{"version":3,"file":"truecropper.es.js","sources":["../src/constant.ts","../src/errors/trueCropperHtmlError.ts","../src/errors/trueCropperImageError.ts","../src/errors/trueCropperOptionsError.ts","../src/helpers.ts","../src/box.ts","../src/touch.ts","../src/HTMLelements/background.ts","../src/HTMLelements/newSelection.ts","../src/HTMLelements/selection.ts","../src/types.ts","../src/options.ts","../src/HTMLelements/handle.ts","../src/HTMLelements/handles.ts","../src/trueCropper.ts"],"sourcesContent":["const BASE_CLASSNAME = \"truecropper\" as const;\nexport const CONSTANTS = {\n  base: BASE_CLASSNAME,\n  img: `${BASE_CLASSNAME}__image`,\n  background: `${BASE_CLASSNAME}__background`,\n  new: `${BASE_CLASSNAME}__new-selection`,\n  selection: `${BASE_CLASSNAME}__selection`,\n  handle: `${BASE_CLASSNAME}__handle`,\n  hanleds: `${BASE_CLASSNAME}__handles`,\n  valueX: `${BASE_CLASSNAME}X`,\n  valueY: `${BASE_CLASSNAME}Y`,\n  valueWidth: `${BASE_CLASSNAME}Width`,\n  valueHeight: `${BASE_CLASSNAME}Height`,\n  valueStatus: `${BASE_CLASSNAME}Status`,\n  epsilon: 0.05,\n} as const;\n","import { TrueCropperErrorData } from \"types\";\n\n/**\n * Predefined error messages for HTML errors in TrueCropper.\n */\nconst errorMessage = {\n  /**\n   * Error when the target element is not found.\n   */\n  elementNotFound: { text: \"Unable to find element\", id: 0 },\n\n  /**\n   * Error when the image source is not provided.\n   */\n  srcEmpty: { text: \"Image src not provided\", id: 1 },\n\n  /**\n   * Error when the parent element does not contain the required <div> element.\n   */\n  parentNotContainDiv: { text: \"Parent element can be exists\", id: 2 },\n};\n\n/**\n * Represents an HTML error specific to TrueCropper.\n *\n * @extends Error\n */\nexport class TrueCropperHtmlError extends Error {\n  /**\n   * Additional error data.\n   */\n  public data: TrueCropperErrorData;\n  /**\n   * The unique identifier for the error message.\n   */\n  public messageId: number;\n\n  /**\n   * Creates an instance of TrueCropperHtmlError.\n   *\n   * @param key - The key corresponding to a predefined error message.\n   */\n  public constructor(key: keyof typeof errorMessage) {\n    const message = errorMessage[key];\n    super(message.text);\n\n    // Restore prototype chain for custom error subclass.\n    Object.setPrototypeOf(this, TrueCropperHtmlError.prototype);\n\n    this.name = \"TrueCropperHtmlError\";\n    this.data = {};\n    this.messageId = message.id;\n  }\n}","import { TrueCropperErrorData, TrueCropperImageErrorData } from \"../types\";\n\n/**\n * Represents an error related to image processing in TrueCropper.\n *\n * @extends Error\n */\nexport class TrueCropperImageError extends Error {\n  /**\n   * Additional data related to the image error.\n   */\n  public data: TrueCropperErrorData;\n  /**\n   * A unique identifier for the error message.\n   */\n  public messageId: number;\n\n  /**\n   * Creates an instance of TrueCropperImageError.\n   *\n   * @param message - The error message.\n   * @param data - Additional data associated with the image error.\n   * @param messageId - A unique identifier for the error message.\n   */\n  public constructor(\n    message: string,\n    data: TrueCropperImageErrorData,\n    messageId: number,\n  ) {\n    super(message);\n\n    // Restore prototype chain for custom error subclass.\n    Object.setPrototypeOf(this, TrueCropperImageError.prototype);\n\n    this.name = \"TrueCropperImageError\";\n    this.data = {\n      target: data.target,\n      targetCoordinates: data.coordinates ? { ...data.coordinates } : undefined,\n      targetSize: { ...data.targetSize },\n      source: data.source,\n      sourceSize: { ...data.sourceSize },\n    };\n    this.messageId = messageId;\n  }\n\n  /**\n   * Creates a new TrueCropperImageError instance for a start size issue.\n   *\n   * @param target - The target element identifier.\n   * @param coordinates - The coordinates related to the error.\n   * @param targetSize - The dimensions of the target element.\n   * @param source - The source element identifier.\n   * @param sourceSize - The dimensions of the source element.\n   * @returns A new instance of TrueCropperImageError.\n   */\n  public static startSize(\n    target: string,\n    coordinates: { x: number; y: number },\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ): TrueCropperImageError {\n    const message = `The ${target} (${coordinates.x}x${coordinates.y}:${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data, 6);\n  }\n\n  /**\n   * Creates a new TrueCropperImageError instance for a size issue.\n   *\n   * @param target - The target element identifier.\n   * @param targetSize - The dimensions of the target element.\n   * @param source - The source element identifier.\n   * @param sourceSize - The dimensions of the source element.\n   * @returns A new instance of TrueCropperImageError.\n   */\n  public static size(\n    target: string,\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ): TrueCropperImageError {\n    const message = `The ${target} (${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates: undefined,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data, 7);\n  }\n}","import { TrueCropperErrorData } from \"types\";\n\n/**\n * Represents an error related to invalid options in TrueCropper.\n *\n * @extends Error\n */\nexport class TrueCropperOptionsError extends Error {\n  /**\n   * Additional data associated with the options error.\n   */\n  public data: TrueCropperErrorData;\n  /**\n   * A unique identifier for the error message.\n   */\n  public messageId: number;\n\n  /**\n   * Creates an instance of TrueCropperOptionsError.\n   *\n   * @param message - The error message.\n   * @param data - Additional error data.\n   * @param messageId - A unique identifier for the error message.\n   */\n  public constructor(\n    message: string,\n    data: TrueCropperErrorData,\n    messageId: number = 0,\n  ) {\n    super(message);\n\n    // Restore prototype chain for custom error subclass.\n    Object.setPrototypeOf(this, TrueCropperOptionsError.prototype);\n\n    this.name = \"TrueCropperOptionsError\";\n    this.data = data;\n    this.messageId = messageId;\n  }\n\n  /**\n   * Factory method for creating an options error related to aspect ratio mismatch.\n   *\n   * @param name - The name of the property or dimension with the aspect ratio issue.\n   * @param calculatedAspectRatio - The calculated aspect ratio based on dimensions.\n   * @param aspectRatio - The expected aspect ratio.\n   * @param epsilon - The tolerance value for aspect ratio differences.\n   * @returns A new instance of TrueCropperOptionsError with aspect ratio error details.\n   */\n  public static aspectRatio(\n    name: string,\n    calculatedAspectRatio: number,\n    aspectRatio: number,\n    epsilon: number,\n  ): TrueCropperOptionsError {\n    const message = `The specified aspect ratio (${aspectRatio}) and calculated ${name} dimensions (width/height = ${calculatedAspectRatio}) are greater than (${epsilon}). This might be due to a rounding error on the server side or incorrect minimum sizes.`;\n    return new this(message, { name }, 5);\n  }\n\n  public static widthIsNull(name: string): TrueCropperOptionsError {\n    const message = `The width of (${name}) is null`;\n    return new this(message, { name }, 8);\n  }\n\n  public static heightIsNull(name: string): TrueCropperOptionsError {\n    const message = `The height of (${name}) is null`;\n    return new this(message, { name }, 9);\n  }\n\n  public static badSizeOfPercent(name: string): TrueCropperOptionsError {\n    const message = `The percent values of (${name}) > 100`;\n    return new this(message, { name }, 10);\n  }\n\n  /**\n   * Factory method for creating a generic options error.\n   *\n   * @param name - The name of the option.\n   * @param object - The expected or disallowed object description.\n   * @param positive - If true, indicates the option must be the specified object; if false, indicates it must not be.\n   * @returns A new instance of TrueCropperOptionsError with generic error details.\n   */\n  public static new(name: string, object: string, positive = true): TrueCropperOptionsError {\n    const messageId = positive ? 3 : 4;\n    const message = positive\n      ? `${name} must be ${object}`\n      : `${name} must not be ${object}`;\n    return new this(message, { name, object }, messageId);\n  }\n}\n","import { CONSTANTS } from \"./constant\";\nimport { TrueCropperHtmlError, TrueCropperImageError } from \"./errors\";\nimport {\n  TrueCropperActiveHandleData,\n  TrueCropperCoordinates,\n  TrueCropperImageElementOrSelector,\n} from \"./types\";\nimport {\n  TrueCropperBoxInitConfig,\n  TrueCropperContainerSizeConstraints,\n  TrueCropperDragData,\n  TrueCropperSize,\n  TrueCropperSizeUnit,\n  TrueCropperSizeWithUnit,\n  TrueCropperInitialSize,\n} from \"./types\";\n\n/**\n * Retrieves HTML elements based on the provided element query or type.\n *\n * @param {TrueCropperImageElementOrSelector} element - The element query or type.\n * @returns {[HTMLImageElement, HTMLDivElement]} The retrieved image element and its parent div.\n */\nexport const getHTMLelements = (\n  element: TrueCropperImageElementOrSelector,\n) => {\n  let el = null;\n  if (typeof element === \"string\") {\n    el = document.querySelector(element);\n    if (el === null) {\n      throw new TrueCropperHtmlError(\"elementNotFound\");\n    }\n  } else {\n    el = element;\n  }\n  if (!(el instanceof HTMLImageElement)) {\n    throw new TrueCropperHtmlError(\"srcEmpty\");\n  }\n  // if (el.getAttribute(\"src\") === null) {\n  //   throw new TrueCropperHtmlError(\"srcEmpty\");\n  // }\n  let parent: HTMLDivElement | null = el.parentElement as HTMLDivElement;\n  if (!parent) {\n    throw new TrueCropperHtmlError(\"parentNotContainDiv\");\n  }\n  if (!parent.classList.contains(CONSTANTS.base)) {\n    parent = null;\n  }\n  return [el, parent] as const;\n};\n\n/**\n * Creates a new div element with the specified class name and appends it to a parent element if provided.\n *\n * @param {string} className - The class name for the new div element.\n * @param {HTMLElement | undefined} parent - The optional parent element to append the new div to.\n * @returns {HTMLDivElement} The newly created div element.\n */\nexport const createDiv = (\n  className: string,\n  parent: HTMLElement | undefined = undefined,\n) => {\n  const el = document.createElement(\"div\");\n  el.className = className;\n  if (parent) {\n    parent.appendChild(el);\n  }\n  return el;\n};\n\n/**\n * Calculate point based on mouse position and active handle\n * @param {number} mouse - Current mouse position\n * @param {TrueCropperActiveHandleData} handle - Active handle data\n * @returns {Object} - Object containing flipped flag and data with values and new point\n */\nconst calculatePointBasedOnMouse = (\n  mousePosition: number,\n  activeHandle: TrueCropperActiveHandleData,\n) => {\n  // If handle is not active, return points\n  if (activeHandle.savedCoordinate < 0) {\n    return { flipped: false, coordinate: null, size: null, point: 0.5 };\n  }\n\n  // Determine if mouse is to the left of the saved coordinate\n  const isMouseLeft = mousePosition < activeHandle.savedCoordinate;\n\n  // Check if handle is flipped\n  const flipped = activeHandle.left !== isMouseLeft;\n  const coordinate = activeHandle.savedCoordinate;\n  const size = Math.abs(activeHandle.savedCoordinate - mousePosition);\n  const point = Number(isMouseLeft);\n\n  return {\n    flipped,\n    coordinate,\n    size,\n    point,\n  };\n};\n\n/**\n * Calculates the points based on the mouse coordinates and handles.\n *\n * @param {TrueCropperCoordinates} mouse - The mouse coordinates.\n * @param {TrueCropperActiveHandleData} handleX - The handle for the X coordinate.\n * @param {TrueCropperActiveHandleData} handleY - The handle for the Y coordinate.\n * @returns {Object} The calculated points based on the mouse and handles.\n */\nexport const calculatePointsBasedOnMouse = (\n  mouse: TrueCropperCoordinates,\n  handleX: TrueCropperActiveHandleData,\n  handleY: TrueCropperActiveHandleData,\n) => {\n  const aX = calculatePointBasedOnMouse(mouse.x, handleX);\n  const aY = calculatePointBasedOnMouse(mouse.y, handleY);\n  return {\n    flipped: { x: aX.flipped, y: aY.flipped },\n    newBox: {\n      coordinates: { x: aX.coordinate, y: aY.coordinate },\n      size: { width: aX.size, height: aY.size },\n      points: { x: aX.point, y: aY.point },\n    },\n  };\n};\n\n/**\n * Converts sizes from real or relative or percent units to real pixel values based on provided parameters.\n * @param {TrueCropperInitialSize} start The starting size in real or relative or percent units.\n * @param {TrueCropperSizeWithUnit} min The minimum size in real or relative or percent units.\n * @param {TrueCropperSizeWithUnit} max The maximum size in real orrelative or percent units.\n * @param {TrueCropperSize} real The real image size in pixels. Need for percent values.\n * @param {TrueCropperSize} ratio The ratio of conversion from relative to real pixels.\n * @returns Object containing converted sizes.\n */\nexport const convertToRealPx = (\n  start: TrueCropperInitialSize,\n  min: TrueCropperSizeWithUnit,\n  max: TrueCropperSizeWithUnit,\n  real: TrueCropperSize,\n  ratio: TrueCropperSize,\n) => {\n  // Function to convert a value from relative or percent units to real pixels\n  const toPx = (val: number, type: keyof TrueCropperSize, unit: TrueCropperSizeUnit) => {\n    if (unit === \"relative\") {\n      return val * ratio[type];\n    }\n    if (unit === \"percent\") {\n      return val >= 1 ? real[type] * (val / 100) : real[type] * val;\n    }\n    // If the unit is already in pixels, return the value as is\n    return val;\n  };\n\n  const newMinSize = {\n    width: toPx(min.width, \"width\", min.unit),\n    height: toPx(min.height, \"height\", min.unit),\n  };\n  const newMaxSize = {\n    width: toPx(max.width, \"width\", max.unit),\n    height: toPx(max.height, \"height\", max.unit),\n  };\n  // Convert starting coordinates to real pixel values\n  const coordinates = {\n    x: toPx(start.x, \"width\", start.unit),\n    y: toPx(start.y, \"height\", start.unit),\n  };\n  // Convert starting size to real pixel values\n  const size = {\n    width: toPx(start.width, \"width\", start.unit),\n    height: toPx(start.height, \"height\", start.unit),\n  };\n  return { coordinates, size, minSize: newMinSize, maxSize: newMaxSize };\n};\n\n/**\n * Processes the initial props for the TrueCropper instance.\n *\n * @param {ReturnType<typeof convertToRealPx>} data - The converted real pixel data.\n * @param {TrueCropperSize} imgProps - The image size.\n * @param {number} aspectRatio - The aspect ratio.\n * @param {boolean} allowChangeStartProps - Flag indicating if start props can be changed.\n * @param {{ x: boolean; y: boolean }} centered - Flag indicating start props coordinates can be changed.\n * @returns {TrueCropperBoxInitConfig} The processed initial props.\n */\nexport const processingInitialProps = (\n  data: ReturnType<typeof convertToRealPx>,\n  imgProps: TrueCropperSize,\n  aspectRatio: number,\n  epsilon: number,\n  allowChangeStartProps: boolean,\n  centered: { x: boolean; y: boolean },\n): TrueCropperBoxInitConfig => {\n  const minSize = adjustSizeProps(\n    data.minSize,\n    { width: 1, height: 1 },\n    aspectRatio,\n  );\n  let maxSize = adjustSizeProps(data.maxSize, imgProps, aspectRatio);\n  let size = adjustSizeProps(data.size, imgProps, aspectRatio);\n\n  maxSize = calculateAdjustedMaxSize(maxSize, imgProps, aspectRatio);\n\n  let coordinates = data.coordinates;\n  if (allowChangeStartProps) {\n    const tmp = adjustStartProps(\n      coordinates,\n      size,\n      minSize,\n      maxSize,\n      imgProps,\n      aspectRatio,\n      centered.x,\n      centered.y,\n    );\n    coordinates = tmp.coordinates;\n    size = tmp.size;\n  }\n\n  return { coordinates, size, minSize, maxSize, imgProps, aspectRatio, epsilon };\n};\n\n/**\n * Validates the image sizes based on various criteria.\n *\n * @param {TrueCropperBoxInitConfig} options - The box initialization interface.\n */\nexport const validateImageSizes = ({\n  coordinates,\n  minSize,\n  maxSize,\n  size,\n  imgProps,\n}: TrueCropperBoxInitConfig) => {\n  const checkDimensions = (\n    first: TrueCropperSize,\n    second: TrueCropperSize,\n    firstName: string,\n    secondName: string,\n  ) => {\n    if (first.width > second.width || first.height > second.height) {\n      throw TrueCropperImageError.size(firstName, first, secondName, second);\n    }\n  };\n\n  // Perform size validations\n  // Check minimum size dimensions\n  checkDimensions(minSize, imgProps, \"minSize\", \"imageSize\");\n  // Validate if the minimum size exceeds the maximum size\n  checkDimensions(minSize, maxSize, \"minSize\", \"maxSize\");\n  // Check start size dimensions\n  checkDimensions(minSize, size, \"minSize\", \"startSize\");\n  if (\n    coordinates.x + size.width > imgProps.width ||\n    coordinates.y + size.height > imgProps.height\n  ) {\n    throw TrueCropperImageError.startSize(\n      \"startSize\",\n      coordinates,\n      size,\n      \"imageSize\",\n      imgProps,\n    );\n  }\n};\n\n/**\n * Converts the container size to the maximum and minimum size.\n *\n * @param {TrueCropperContainerSizeConstraints} options - The container size and constraints.\n * @returns {TrueCropperSize} The new size after applying maximum and minimum constraints.\n */\nexport const containerToMaxMinSize = ({\n  size,\n  minSize,\n  maxSize,\n  aspectRatio,\n}: TrueCropperContainerSizeConstraints) => {\n  const newSize = { ...size };\n  if (maxSize) {\n    if (newSize.width > maxSize.width) {\n      newSize.width = maxSize.width;\n      newSize.height = aspectRatio\n        ? maxSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height > maxSize.height) {\n      newSize.width = aspectRatio\n        ? maxSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = maxSize.height;\n    }\n  }\n\n  if (minSize) {\n    if (newSize.width < minSize.width) {\n      newSize.width = minSize.width;\n      newSize.height = aspectRatio\n        ? minSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height < minSize.height) {\n      newSize.width = aspectRatio\n        ? minSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = minSize.height;\n    }\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the width of a size nox based on a width adjustment, a point, and an aspect ratio.\n * @param {number} widthAdjustment The amount to adjust the width by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {TrueCropperSize} The adjusted size box.\n */\nconst adjustWidth = (\n  widthAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): TrueCropperSize => {\n  const newWidth = widthAdjustment * point;\n  return { width: newWidth, height: newWidth / aspectRatio };\n};\n\n/**\n * Adjusts the height of a size box based on a height adjustment, a point, and an aspect ratio.\n * @param {number} heightAdjustment The amount to adjust the height by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {Size} The adjusted size box.\n */\nconst adjustHeight = (\n  heightAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): TrueCropperSize => {\n  const newHeight = heightAdjustment * point;\n  return { width: newHeight * aspectRatio, height: newHeight };\n};\n\n/**\n * Adjusts a size box to match a specified aspect ratio.\n * @param {TrueCropperDragData} data The data box containing the size, coordinates, and points.\n * @param {TrueCropperSize} maxSize The maximum size of the box.\n * @param {TrueCropperSize} minSize\n * @param {number} aspectRatio The aspect ratio to adjust to.\n * @returns The adjusted size box.\n */\nexport const adjustToAspectRatio = (\n  data: TrueCropperDragData,\n  maxSize: TrueCropperSize,\n  aspectRatio: number,\n): TrueCropperSize => {\n  let newSize = { ...data.size };\n  if (aspectRatio === 0) {\n    return newSize;\n  }\n\n  const vertiacal = data.isMultiAxis\n    ? newSize.height * aspectRatio >= newSize.width\n    : data.isVerticalMovement;\n  const pointX = data.points.x === 1 || data.points.x === 0 ? 1 : 2;\n  const pointY = data.points.y === 1 || data.points.y === 0 ? 1 : 2;\n  if (vertiacal) {\n    const height = newSize.height;\n    newSize = { width: height * aspectRatio, height: height };\n  } else {\n    const width = newSize.width;\n    newSize = { width: width, height: width / aspectRatio };\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width\n  if (\n    data.coordinates.x + newSize.width * (1 - data.points.x) >\n    maxSize.width\n  ) {\n    newSize = adjustWidth(\n      maxSize.width - data.coordinates.x,\n      pointX,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height\n  if (\n    data.coordinates.y + newSize.height * (1 - data.points.y) >\n    maxSize.height\n  ) {\n    newSize = adjustHeight(\n      maxSize.height - data.coordinates.y,\n      pointY,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width (left)\n  if (data.coordinates.x - newSize.width * data.points.x < 0) {\n    newSize = adjustWidth(data.coordinates.x, pointX, aspectRatio);\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height (top)\n  if (data.coordinates.y - newSize.height * data.points.y < 0) {\n    newSize = adjustHeight(data.coordinates.y, pointY, aspectRatio);\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the size properties by removing empty values and adjusting based on aspect ratio.\n *\n * @param {TrueCropperSize} sizeProps - The size properties to adjust.\n * @param {TrueCropperSize} defaultVal - The default size values.\n * @param {number} aspectRatio - The aspect ratio to consider.\n * @returns {TrueCropperSize} The adjusted size.\n */\nconst adjustSizeProps = (\n  sizeProps: TrueCropperSize,\n  defaultVal: TrueCropperSize,\n  aspectRatio: number,\n): TrueCropperSize => {\n  const size = { ...sizeProps };\n  // Adjust size based on aspect ratio if necessary\n  if (aspectRatio && !size.width && !size.height) {\n    if (aspectRatio > 1) {\n      size.height = defaultVal.height;\n    } else {\n      size.width = defaultVal.width;\n    }\n  }\n\n  if (!size.width) {\n    size.width = aspectRatio ? size.height * aspectRatio : defaultVal.width;\n  }\n\n  if (!size.height) {\n    size.height = aspectRatio ? size.width / aspectRatio : defaultVal.height;\n  }\n\n  return size;\n};\n\n/**\n * Calculates the adjusted maximum size based on image size and aspect ratio.\n *\n * @param {TrueCropperSize} maxSizeProps - The maximum size properties.\n * @param {TrueCropperSize} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @returns {TrueCropperSize} The calculated maximum size.\n */\nconst calculateAdjustedMaxSize = (\n  maxSizeProps: TrueCropperSize,\n  image: TrueCropperSize,\n  aspectRatio: number,\n) => {\n  let maxSize = { ...maxSizeProps };\n  if (aspectRatio) {\n    if (maxSize.width > maxSize.height * aspectRatio) {\n      maxSize.width = maxSize.height * aspectRatio;\n    } else {\n      maxSize.height = maxSize.width / aspectRatio;\n    }\n  }\n  // Adjust maximum size if necessary\n  maxSize = containerToMaxMinSize({\n    size: maxSize,\n    maxSize: image,\n    aspectRatio,\n  });\n  return maxSize;\n};\n\n/**\n * Adjusts the start coordinates and size based on constraints and centering options.\n *\n * @param {TrueCropperCoordinates} coordinates - The initial coordinates.\n * @param {TrueCropperSize} startSize - The initial start size.\n * @param {TrueCropperSize} minSize - The minimum size constraints.\n * @param {TrueCropperSize} maxSize - The maximum size constraints.\n * @param {TrueCropperSize} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @param {boolean} centeredX - Flag for centering horizontally.\n * @param {boolean} centeredY - Flag for centering vertically.\n * @returns {AdjustedStartProps} The adjusted start coordinates and size.\n */\nconst adjustStartProps = (\n  coordinates: TrueCropperCoordinates,\n  startSize: TrueCropperSize,\n  minSize: TrueCropperSize,\n  maxSize: TrueCropperSize,\n  image: TrueCropperSize,\n  aspectRatio: number,\n  centeredX: boolean,\n  centeredY: boolean,\n) => {\n  const startSizeProps = { ...startSize };\n  const newCoordinates = { ...coordinates };\n\n  const maxX = Math.min(maxSize.width, image.width - coordinates.x);\n  const maxY = Math.min(maxSize.height, image.height - coordinates.y);\n  // Adjust maximum size if necessary\n  const newSize = containerToMaxMinSize({\n    size: startSizeProps,\n    maxSize: { width: maxX, height: maxY },\n    minSize,\n    aspectRatio,\n  });\n  startSizeProps.width = newSize.width;\n  startSizeProps.height = newSize.height;\n\n  newCoordinates.x = centeredX\n    ? (image.width - startSizeProps.width) / 2\n    : coordinates.x;\n  newCoordinates.y = centeredY\n    ? (image.height - startSizeProps.height) / 2\n    : coordinates.y;\n\n  return { coordinates: newCoordinates, size: startSizeProps };\n};\n","import {\n  TrueCropperBoxInitConfig,\n  TrueCropperBoxProps,\n  TrueCropperCoordinates,\n  TrueCropperNullableBoxData,\n  TrueCropperDragData,\n  TrueCropperPoints,\n  TrueCropperSize,\n} from \"./types\";\nimport { adjustToAspectRatio, containerToMaxMinSize } from \"./helpers\";\n\n/**\n * Box component\n */\nexport default class Box {\n  private coordinates: TrueCropperCoordinates;\n  private size: TrueCropperSize;\n  private minSize: TrueCropperSize;\n  private maxSize: TrueCropperSize;\n  private imgSize: TrueCropperSize;\n  private aspectRatio: number;\n  private epsilon: number;\n\n  /**\n   * Creates a new Box instance.\n   * @constructor\n   * @param {TrueCropperBoxInitConfig} - Initialization parameters.\n   */\n  public constructor({\n    coordinates,\n    size,\n    minSize,\n    maxSize,\n    imgProps,\n    aspectRatio,\n    epsilon,\n  }: TrueCropperBoxInitConfig) {\n    this.coordinates = { ...coordinates };\n    this.size = { ...size };\n    this.minSize = { ...minSize };\n    this.maxSize = { ...maxSize };\n    this.imgSize = { ...imgProps };\n    this.aspectRatio = aspectRatio;\n    this.epsilon = epsilon;\n  }\n\n  /**\n   * Sets the value of coordinates and size properties based on the provided BoxProps object.\n   * @param {TrueCropperBoxProps} box - The BoxProps object containing x, y, width, and height properties.\n   * @returns {void}\n   */\n  public setValue(box: TrueCropperBoxProps) {\n    if (box.width < this.minSize.width || box.height < this.minSize.height) {\n      return { ok: false, message: 'Crop region is smaller than the minimum allowed size.' };\n    }\n    if (box.width > this.maxSize.width || box.height > this.maxSize.height) {\n      return { ok: false, message: 'Crop region exceeds the maximum allowed size.' };\n    }\n    if (this.aspectRatio && box.width / box.height - this.aspectRatio > this.epsilon) {\n      return { ok: false, message: 'Crop region does not match the required aspect ratio.' };\n    }\n    if (box.x < 0 || box.x > this.imgSize.width || box.y < 0 || box.y > this.imgSize.height) {\n      return { ok: false, message: 'Crop region is positioned outside the image boundaries.' };\n    }\n    if (box.x + box.width > this.imgSize.width || box.y + box.height > this.imgSize.height) {\n      return { ok: false, message: 'Crop region extends beyond the image boundaries.' };\n    }\n\n    this.coordinates = { x: box.x, y: box.y };\n    this.size = { width: box.width, height: box.height };\n    return { ok: true, message: 'success' };\n  }\n\n  /**\n   * Moves the box to the specified coordinates within the boundaries of the image.\n   * @param {TrueCropperCoordinates} coordinates - The new x and y coordinates for the box.\n   * @returns {void}\n   */\n  public move(coordinates: TrueCropperCoordinates) {\n    // Ensure box is within the boundaries\n    this.coordinates.x = Math.min(\n      Math.max(coordinates.x, 0),\n      this.imgSize.width - this.size.width,\n    );\n    this.coordinates.y = Math.min(\n      Math.max(coordinates.y, 0),\n      this.imgSize.height - this.size.height,\n    );\n  }\n\n  /**\n   * Resizes the box to a new size.\n   * @param {TrueCropperSize} size - The new size for the box.\n   * @param {TrueCropperPoints} points - The relative points for resizing.\n   * @returns {void}\n   */\n  public resize(size: TrueCropperSize, points: TrueCropperPoints) {\n    if (points.x < 0 || points.x > 1 || points.y < 0 || points.y > 1) {\n      return { ok: false, message: 'Point coordinates must be within the range of 0 to 1.' };\n    }\n    const fromX = this.coordinates.x + this.size.width * points.x;\n    const fromY = this.coordinates.y + this.size.height * points.y;\n\n\n    const x = fromX - size.width * points.x;\n    const y = fromY - size.height * points.y;\n\n\n    return this.setValue({ x, y, width: size.width, height: size.height });\n  }\n\n  /**\n   * Scales the box by a factor and relative points.\n   * @param {number} factor - The scaling factor.\n   * @param {TrueCropperPoints} points - The relative points for scaling.\n   * @returns {void}\n   */\n  public scale(factor: number, points: TrueCropperPoints) {\n    const width = this.size.width * factor;\n    const height = this.size.height * factor;\n    return this.resize({ width, height }, points);\n  }\n\n  /**\n   * Retrieves the current dimensions of the box.\n   * @returns {TrueCropperSize} The width and height of the box.\n   */\n  public getBoxSize() {\n    return { ...this.imgSize };\n  }\n\n  /**\n   * Retrieves the current coordinates of the box.\n   * @returns {TrueCropperCoordinates} The current x and y coordinates of the box.\n   */\n  public getCoourdinates(): TrueCropperCoordinates {\n    return { x: this.coordinates.x, y: this.coordinates.y };\n  }\n\n  /**\n   * Retrieves the current box.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValue(): TrueCropperBoxProps {\n    return {\n      x: this.coordinates.x,\n      y: this.coordinates.y,\n      width: this.size.width,\n      height: this.size.height,\n    };\n  }\n\n  /**\n   * Retrieves the current real(natural) value of the box including coordinates, width, and height.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValueReal(): TrueCropperBoxProps {\n    return this.getValue();\n  }\n\n  /**\n   * Retrieves the current value of the box relative to a specified width and height.\n   * @param {TrueCropperSize} size - The width and height for calculating relative values.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box relative to the specified width and height.\n   */\n  public getValueRelative({ width, height }: TrueCropperSize): TrueCropperBoxProps {\n    return {\n      x: this.coordinates.x * width,\n      y: this.coordinates.y * height,\n      width: this.size.width * width,\n      height: this.size.height * height,\n    };\n  }\n\n  /**\n   * Retrieves the current value of the box as a percentage of the image size.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box as a percentage of the image size.\n   */\n  public getValuePercent(): TrueCropperBoxProps {\n    return {\n      x: (this.coordinates.x / this.imgSize.width) * 100,\n      y: (this.coordinates.y / this.imgSize.height) * 100,\n      width: (this.size.width / this.imgSize.width) * 100,\n      height: (this.size.height / this.imgSize.height) * 100,\n    };\n  }\n\n  /**\n   * Calculates the coordinates of the opposite corner of the box based on relative points.\n   * @param {TrueCropperPoints} points - The relative points determining the opposite corner.\n   * @returns {TrueCropperCoordinates} The calculated x and y coordinates of the opposite corner.\n   */\n  public getOppositeCornerCoordinates(points: TrueCropperPoints): TrueCropperCoordinates {\n    const x =\n      points.x === 0.5\n        ? -1\n        : this.coordinates.x + this.size.width * (1 - points.x);\n    const y =\n      points.y === 0.5\n        ? -1\n        : this.coordinates.y + this.size.height * (1 - points.y);\n    return { x, y };\n  }\n\n  /**\n   * Prepares and applies new size and coordinates for the box based on the provided data.\n   * @param {TrueCropperNullableBoxData} newBox - The new box data to apply.\n   * @returns {boolean} Returns true if the new size and coordinates were successfully applied, false otherwise.\n   */\n  public prepareAndApplyNewSizeAndCoordinates(newBox: TrueCropperNullableBoxData) {\n    const data = this.prepareSizeAndCoordinates(newBox);\n    if (data.size.width === 0 || data.size.height === 0) {\n      return false;\n    }\n\n    const size = this.adjustAndCalculateSize(data);\n    const coordinates = this.adjustAndCalculateCoordinate(\n      data.coordinates,\n      size,\n      data.points,\n    );\n\n    // need for allowFlip combination with minSize\n    if (coordinates.x < 0 || coordinates.x + size.width > this.imgSize.width || coordinates.y < 0 || coordinates.y + size.height > this.imgSize.height) {\n      return false;\n    }\n\n    this.size = size;\n    this.coordinates = coordinates;\n\n    return true;\n  }\n\n  /**\n   * Prepares and calculates the size and coordinates for the new box based on the provided data.\n   * @param {TrueCropperNullableBoxData} newBox - The new box data to calculate size and coordinates for.\n   * @returns {TrueCropperDragData} An object containing the calculated size, coordinates, and other relevant properties.\n   */\n  private prepareSizeAndCoordinates(newBox: TrueCropperNullableBoxData): TrueCropperDragData {\n    const size = {\n      width: newBox.size.width ?? this.size.width,\n      height: newBox.size.height ?? this.size.height,\n    };\n    const coordinates = {\n      x: newBox.coordinates.x ?? this.coordinates.x + this.size.width / 2,\n      y: newBox.coordinates.y ?? this.coordinates.y + this.size.height / 2,\n    };\n    const isVerticalMovement = newBox.coordinates.y !== null;\n    const isMultiAxis = isVerticalMovement && newBox.coordinates.x !== null;\n    return {\n      size,\n      coordinates,\n      isVerticalMovement,\n      isMultiAxis,\n      points: newBox.points,\n    };\n  }\n\n  /**\n   * Adjusts and calculates the size based on aspect ratio and constraints for the new box.\n   * @param {TrueCropperDragData} data - The data containing coordinates, size, and other parameters for adjustment.\n   * @returns {TrueCropperSize} The adjusted size within the constraints of aspect ratio, min size, and max size.\n   */\n  private adjustAndCalculateSize(data: TrueCropperDragData): TrueCropperSize {\n    const size = adjustToAspectRatio(data, this.imgSize, this.aspectRatio);\n    const value = containerToMaxMinSize({\n      size,\n      minSize: this.minSize,\n      maxSize: this.maxSize,\n      aspectRatio: this.aspectRatio,\n    });\n    return value;\n  }\n\n  /**\n   * Adjusts and calculates the new coordinates based on the input coordinates, size, and points.\n   * @param {TrueCropperCoordinates} coordinates - The original coordinates.\n   * @param {TrueCropperSize} size - The size to adjust the coordinates.\n   * @param {TrueCropperPoints} points - The points to calculate the adjustment.\n   * @returns {TrueCropperCoordinates} The adjusted coordinates based on the size and points.\n   */\n  private adjustAndCalculateCoordinate(\n    coordinates: TrueCropperCoordinates,\n    size: TrueCropperSize,\n    points: TrueCropperPoints,\n  ): TrueCropperCoordinates {\n    return {\n      x: coordinates.x - size.width * points.x,\n      y: coordinates.y - size.height * points.y,\n    };\n  }\n}\n","/**\n * Enables support for touch devices by translating touch events to mouse events.\n */\n\n/**\n * Binds an element's touch events to be simulated as mouse events.\n * @param {HTMLDivElement} element - The element to bind touch events to.\n */\nexport default function enableTouch(element: HTMLDivElement) {\n  element.addEventListener(\"touchstart\", simulateMouseEvent);\n  element.addEventListener(\"touchend\", simulateMouseEvent);\n  element.addEventListener(\"touchmove\", simulateMouseEvent);\n}\n\n/**\n * Translates a touch event to a mouse event.\n * @param {Event} e - The touch event to be translated.\n */\nfunction simulateMouseEvent(e: Event) {\n  e.preventDefault();\n  const event = e as TouchEvent;\n  const touch = event.changedTouches[0];\n\n  touch.target.dispatchEvent(\n    new MouseEvent(touchEventToMouseEvent(event.type), {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      screenX: touch.screenX,\n      screenY: touch.screenY,\n    }),\n  );\n}\n\n/**\n * SubFunction to translates a touch type event to a mouse event\n * @param {string} type - The type of touch event to be translated.\n */\nfunction touchEventToMouseEvent(type: string) {\n  switch (type) {\n    case \"touchstart\":\n      return \"mousedown\";\n    case \"touchmove\":\n      return \"mousemove\";\n    default: // touchend || touchcanceled\n      return \"mouseup\";\n  }\n}\n","/**\n * Background component for managing overlay elements.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps } from \"../types\";\n\n/**\n * The Background class manages a set of overlay elements (divs) used as a background\n * for cropping functionality. It provides methods to show, hide, remove, and transform\n * the background elements based on the crop box.\n */\nexport default class Background {\n  private nested: HTMLDivElement[] = [];\n\n  /**\n   * Creates an instance of Background.\n   *\n   * @param parent - The parent HTMLDivElement where the background elements will be appended.\n   * @param className - The base CSS class name for the background elements.\n   */\n  public constructor(parent: HTMLDivElement, className: string) {\n    for (let i = 0; i < 4; i++) {\n      const div = createDiv(`${className}-${i}`, parent);\n      this.nested.push(div);\n    }\n  }\n\n  /**\n   * Hides the background elements by setting their display style to \"none\".\n   */\n  public hide(): void {\n    for (const el of this.nested) {\n      el.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Displays the background elements by setting their display style to \"block\".\n   */\n  public show(): void {\n    for (const el of this.nested) {\n      el.style.display = \"block\";\n    }\n  }\n\n  /**\n   * Removes the background elements from the DOM.\n   */\n  public destroy(): void {\n    for (const el of this.nested) {\n      el.remove();\n    }\n  }\n\n  /**\n   * Transforms the background elements based on the provided crop box.\n   *\n   * @param box - An object representing the crop box, including its x and y coordinates and dimensions.\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    const x2 = box.x + box.width;\n    const y2 = box.y + box.height;\n\n    // Top overlay: positioned above the crop box.\n    this.nested[0].style.height = `${box.y}px`;\n    this.nested[0].style.left = `${box.x}px`;\n    this.nested[0].style.right = `calc(100% - ${box.width}px - ${box.x}px)`;\n\n    // Right overlay: positioned to the right of the crop box.\n    this.nested[1].style.left = `${x2}px`;\n\n    // Bottom overlay: positioned below the crop box.\n    this.nested[2].style.left = `${box.x}px`;\n    this.nested[2].style.right = `calc(100% - ${box.width}px - ${box.x}px)`;\n    this.nested[2].style.top = `${y2}px`;\n\n    // Left overlay: positioned to the left of the crop box.\n    this.nested[3].style.width = `${box.x}px`;\n  }\n}\n","/**\n * NewSelection component\n *\n * This component allows the user to create a new crop box by clicking and dragging\n * within the designated area. It listens for mouse events and notifies the parent\n * via an event bus.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperEventHandler } from \"../types\";\n\nexport default class NewSelection {\n  /**\n   * Callback function to communicate events to the parent.\n   */\n  private eventBus: TrueCropperEventHandler;\n  /**\n   * The container element for the new selection.\n   */\n  private el: HTMLDivElement;\n  /**\n   * The starting mouse coordinates when a new selection is initiated.\n   */\n  private startMouse = { mouseX: 0, mouseY: 0 };\n  /**\n   * Flag indicating whether a new crop box has been created.\n   */\n  private newBoxCreated: boolean = false;\n  /**\n   * Reference to the mousedown event listener.\n   */\n  private listener?: (e: MouseEvent) => void;\n\n  /**\n   * Creates a new NewSelection instance.\n   *\n   * @param parent - The parent HTMLDivElement where the new selection element is appended.\n   * @param className - The CSS class name for styling the new selection element.\n   * @param eventBus - A callback function for communicating events (e.g., creating a new box).\n   * @param enable - Determines whether the new selection functionality is enabled.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    this.el = createDiv(className, parent);\n    if (enable) {\n      // Attach initial mousedown listener to initiate new selection.\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Hides the new selection element.\n   */\n  public hide(): void {\n    this.el.style.display = \"none\";\n  }\n\n  /**\n   * Shows the new selection element.\n   */\n  public show(): void {\n    this.el.style.display = \"block\";\n  }\n\n  /**\n   * Removes the new selection element from the DOM and cleans up event listeners.\n   */\n  public destroy(): void {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Creates and returns a mousedown event handler that initiates the new selection process.\n   *\n   * When the user presses the mouse button down, mousemove and mouseup listeners are attached\n   * to track the selection process.\n   *\n   * @returns A mousedown event handler function.\n   */\n  private mouseEvent(): (e: MouseEvent) => void {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      // Attach mousemove and mouseup listeners to the document.\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Save the starting mouse coordinates.\n      this.startMouse = { mouseX: e.clientX, mouseY: e.clientY };\n      this.newBoxCreated = false;\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (this.newBoxCreated) {\n        // Notify parent that the selection is being adjusted.\n        const data = { x: e.clientX, y: e.clientY };\n        this.eventBus({ type: \"handlemove\", data });\n      } else {\n        // Attempt to create a new crop box if the mouse has moved.\n        this.tryToCreateNewBox(e.clientX, e.clientY);\n      }\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      // Remove the document-level mouse event listeners.\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // If a new box was created, notify parent that the selection process has ended.\n      if (this.newBoxCreated) {\n        this.eventBus({ type: \"handleend\" });\n      }\n    };\n\n    return onMouseDown;\n  }\n\n  /**\n   * Attempts to create a new crop box based on the current mouse coordinates.\n   *\n   * This method calculates the new crop box dimensions from the starting mouse position\n   * and the current mouse position, then notifies the parent via the event bus.\n   *\n   * @param mouseX - The current x-coordinate of the mouse.\n   * @param mouseY - The current y-coordinate of the mouse.\n   */\n  private tryToCreateNewBox(mouseX: number, mouseY: number): void {\n    // Do nothing if the mouse hasn't moved.\n    if (mouseX === this.startMouse.mouseX || mouseY === this.startMouse.mouseY) {\n      return;\n    }\n\n    // Determine if the new box is drawn from the left/top or right/bottom.\n    const leftMovable = mouseX < this.startMouse.mouseX;\n    const topMovable = mouseY < this.startMouse.mouseY;\n\n    // Calculate the top-left coordinates and dimensions of the new crop box.\n    const [x, width] = leftMovable\n      ? [mouseX, this.startMouse.mouseX - mouseX]\n      : [this.startMouse.mouseX, mouseX - this.startMouse.mouseX];\n    const [y, height] = topMovable\n      ? [mouseY, this.startMouse.mouseY - mouseY]\n      : [this.startMouse.mouseY, mouseY - this.startMouse.mouseY];\n\n    // Prepare data for the new crop box.\n    const data = {\n      coordinates: { x, y },\n      size: { width, height },\n      leftMovable,\n      topMovable,\n    };\n\n    // Notify parent to create a new crop box and record the result.\n    this.newBoxCreated = this.eventBus({ type: \"createnewbox\", data });\n  }\n}","/**\n * Selection component for crop region interaction.\n *\n * This component represents the crop selection area that the user can drag to move.\n * It handles mouse events and communicates state changes via an event bus.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps, TrueCropperEventHandler } from \"../types\";\n\nexport default class Selection {\n  /**\n   * Callback function to handle events emitted by the selection component.\n   */\n  private eventBus: TrueCropperEventHandler;\n  /**\n   * The DOM element representing the selection area.\n   */\n  private el: HTMLDivElement;\n  /**\n   * Indicates whether the selection is interactive.\n   */\n  private enable: boolean;\n  /**\n   * Reference to the mousedown event listener.\n   */\n  private listener?: (e: MouseEvent) => void;\n\n  /**\n   * Creates a new Selection instance.\n   *\n   * @param parent - The parent HTMLDivElement to which the selection element is appended.\n   * @param className - The CSS class name assigned to the selection element.\n   * @param eventBus - A callback to emit events related to selection interactions.\n   * @param enable - Determines if the selection element should be interactive.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    // Create the selection DOM element.\n    this.el = createDiv(className, parent);\n    this.enable = enable;\n    if (enable) {\n      // Attach the mousedown listener if interaction is enabled.\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.el.style.cursor = \"default\";\n    }\n  }\n\n  /**\n   * Transforms the selection element to match the specified crop box dimensions.\n   *\n   * @param box - An object containing the x, y coordinates and width, height dimensions.\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    this.el.style.transform = `translate(${box.x}px, ${box.y}px)`;\n    this.el.style.width = `${box.width}px`;\n    this.el.style.height = `${box.height}px`;\n  }\n\n  /**\n   * Hides the selection element.\n   */\n  public hide(): void {\n    this.el.style.display = \"none\";\n    this.el.style.cursor = \"default\";\n  }\n\n  /**\n   * Shows the selection element.\n   */\n  public show(): void {\n    this.el.style.display = \"block\";\n    this.el.style.cursor = \"move\";\n  }\n\n  /**\n   * Destroys the selection element by removing it from the DOM and cleaning up event listeners.\n   */\n  public destroy(): void {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Creates and returns a mousedown event handler for the selection element.\n   *\n   * This handler attaches mousemove and mouseup listeners to the document to enable\n   * dragging of the selection element. It emits corresponding events via the event bus.\n   *\n   * @returns A mousedown event handler function.\n   */\n  private mouseEvent(): (e: MouseEvent) => void {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify that the dragging (region start) has begun.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionstart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify that the selection region is being moved.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionmove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify that the dragging (region end) has finished.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionend\", data });\n    };\n\n    return onMouseDown;\n  }\n}","import TrueCropperCore from \"./trueCropper\";\n\n/**\n * Represents an HTMLImageElement or a CSS selector string.\n */\nexport type TrueCropperImageElementOrSelector = HTMLImageElement | string;\n\n/**\n * Array of allowed size units.\n */\nexport const TRUECROPPER_SIZE_UNITS = [\"real\", \"relative\", \"percent\"] as const;\n\n/**\n * A union type representing allowed units for sizing.\n */\nexport type TrueCropperSizeUnit = (typeof TRUECROPPER_SIZE_UNITS)[number];\n\n/**\n * Represents a point in 2D space.\n */\nexport interface TrueCropperCoordinates {\n  /** The x-coordinate. */\n  x: number;\n  /** The y-coordinate. */\n  y: number;\n}\n\n/**\n * Represents directional points used for positioning handles or regions.\n *\n * @remarks\n * - For the x property: use `1` for left, `0` for right, and `0.5` for centered horizontally.\n * - For the y property: use `1` for top, `0` for bottom, and `0.5` for centered vertically.\n */\nexport interface TrueCropperPoints {\n  x: number;\n  y: number;\n}\n\n/**\n * Represents dimensions with width and height.\n */\nexport interface TrueCropperSize {\n  /** The width dimension. */\n  width: number;\n  /** The height dimension. */\n  height: number;\n}\n\n/**\n * Provides a size unit property.\n */\nexport interface TrueCropperUnitProps {\n  /** The unit used for sizing. */\n  unit: TrueCropperSizeUnit;\n}\n\n/**\n * Combines position and size properties.\n */\nexport interface TrueCropperBoxProps extends TrueCropperCoordinates, TrueCropperSize {}\n\n/**\n * Represents a size value along with its associated unit.\n */\nexport interface TrueCropperSizeWithUnit extends TrueCropperSize, TrueCropperUnitProps {}\n\n/**\n * Initial sizing properties used during setup.\n *\n * @remarks\n * The size values (width and height) are optional.\n */\nexport interface TrueCropperInitialSizeProps\n  extends TrueCropperCoordinates,\n    Partial<TrueCropperSize>,\n    TrueCropperUnitProps {}\n\n/**\n * The complete initial size configuration.\n */\nexport interface TrueCropperInitialSize extends TrueCropperCoordinates, TrueCropperSize, TrueCropperUnitProps {\n  /** Whether the crop box is centered horizontally. */\n  centeredX: boolean;\n  /** Whether the crop box is centered vertically. */\n  centeredY: boolean;\n  /** Whether the crop box size can be changed after initialization. */\n  allowChange: boolean;\n}\n\n/**\n * A generic callback type.\n *\n * @param instance - The instance of TrueCropperCore.\n * @param values - The associated values passed to the callback.\n */\nexport type TrueCropperCallback<T, K> = (instance: T, values: K) => void;\n\n/**\n * Callback invoked during cropping events.\n *\n * @see {@link TrueCropperCallback}\n */\nexport type TrueCropperCropCallback = TrueCropperCallback<TrueCropperCore, TrueCropperBoxProps>;\n\n/**\n * Data structure for details about an error during cropping.\n */\nexport interface TrueCropperErrorData {\n  /** The target element identifier (if applicable). */\n  target?: string;\n  /** The size of the target element (if applicable). */\n  targetSize?: TrueCropperSize;\n  /** The coordinates of the target element (if applicable). */\n  targetCoordinates?: TrueCropperCoordinates;\n  /** The source element identifier (if applicable). */\n  source?: string;\n  /** The size of the source element (if applicable). */\n  sourceSize?: TrueCropperSize;\n  /** An optional error name. */\n  name?: string;\n  /** An optional object identifier related to the error. */\n  object?: string;\n}\n\n/**\n * Represents an error that occurred during the cropping process.\n */\nexport interface TrueCropperError {\n  /** The error name. */\n  name: string;\n  /** The error message. */\n  message: string;\n  /** An error message identifier. */\n  messageId: number;\n  /** Additional data related to the error. */\n  data: TrueCropperErrorData;\n}\n\n/**\n * Callback invoked when an error occurs during cropping.\n *\n * @see {@link TrueCropperCallback}\n */\nexport type TrueCropperErrorCallback = TrueCropperCallback<TrueCropperCore, TrueCropperError>;\n\n/**\n * Options to configure the TrueCropper instance.\n */\nexport interface TrueCropperOptions {\n  /** The desired aspect ratio for the crop box. */\n  aspectRatio: number; // [0,1]\n  /** The epsilon value used for calculations (tolerance). */\n  epsilon: number; // > 0\n  /** Maximum allowed size for the crop box. */\n  maxSize: Partial<TrueCropperSizeWithUnit>; // x,y,width,height\n  /** Minimum allowed size for the crop box. */\n  minSize: Partial<TrueCropperSizeWithUnit>; // x,y,width,height\n  /** The starting size properties for the crop box. */\n  startSize: Partial<TrueCropperInitialSizeProps>; // x,y,width,height\n  /** The default size properties for the crop box. */\n  defaultSize: Partial<TrueCropperInitialSizeProps>; // x,y,width,height\n  /** The unit mode to use when returning size values. */\n  returnMode: TrueCropperSizeUnit; // real,persent,relative\n  /** Whether the crop box can be flipped. */\n  allowFlip: boolean;\n  /** Whether a new selection (crop box) can be created. */\n  allowNewSelection: boolean;\n  /** Whether the crop box is movable. */\n  allowMove: boolean;\n  /** Whether the crop box is resizable. */\n  allowResize: boolean;\n  /** Callback invoked upon initialization. */\n  onInitialize: TrueCropperCropCallback;\n  /** Callback invoked when cropping starts. */\n  onCropStart: TrueCropperCropCallback;\n  /** Callback invoked during cropping movement. */\n  onCropChange: TrueCropperCropCallback;\n  /** Callback invoked when cropping ends. */\n  onCropEnd: TrueCropperCropCallback;\n  /** Callback invoked when an error occurs. */\n  onError: TrueCropperErrorCallback;\n}\n\n/* ────── Event Types ────── */\n\n/**\n * Event fired when a handle starts moving.\n */\nexport interface TrueCropperHandleStartEvent {\n  /** The event type identifier. */\n  type: \"handlestart\";\n  /** Data associated with the active handle. */\n  data: TrueCropperActiveHandle;\n}\n\n/**\n * Event fired during handle movement.\n */\nexport interface TrueCropperHandleMoveEvent {\n  /** The event type identifier. */\n  type: \"handlemove\";\n  /** The current coordinates of the handle. */\n  data: TrueCropperCoordinates;\n}\n\n/**\n * Event fired when a handle movement ends.\n */\nexport interface TrueCropperHandleEndEvent {\n  /** The event type identifier. */\n  type: \"handleend\";\n  /** No additional data is provided on handle end. */\n  data?: null;\n}\n\n/**\n * Event fired during region movement (start, move, or end).\n */\nexport interface TrueCropperRegionMoveEvent {\n  /** The event type identifier; can be 'regionstart', 'regionmove', or 'regionend'. */\n  type: \"regionstart\" | \"regionmove\" | \"regionend\";\n  /** The current coordinates of the region. */\n  data: TrueCropperCoordinates;\n}\n\n/**\n * Data structure for creating a new crop box.\n */\nexport interface TrueCropperNewBoxEventData {\n  /** The starting coordinates for the new crop box. */\n  coordinates: TrueCropperCoordinates;\n  /** The initial size for the new crop box. */\n  size: TrueCropperSize;\n  /** Indicates if the left side of the crop box can be moved. */\n  leftMovable: boolean;\n  /** Indicates if the top side of the crop box can be moved. */\n  topMovable: boolean;\n}\n\n/**\n * Event fired when a new crop box is created.\n */\nexport interface TrueCropperNewBoxEvent {\n  /** The event type identifier. */\n  type: \"createnewbox\";\n  /** Data associated with the new crop box. */\n  data: TrueCropperNewBoxEventData;\n}\n\n/**\n * Additional data for active handles.\n */\nexport interface TrueCropperActiveHandleData {\n  /** Indicates if the left side is active. */\n  left: boolean;\n  /** The saved coordinate value used during the handle's movement. */\n  savedCoordinate: number;\n}\n\n/**\n * Represents an active handle with its directional points.\n */\nexport interface TrueCropperActiveHandle {\n  /** The directional points for the active handle. */\n  points: TrueCropperPoints;\n}\n\n/**\n * Union type for all TrueCropper events.\n */\nexport type TrueCropperEvent =\n  | TrueCropperHandleStartEvent\n  | TrueCropperHandleMoveEvent\n  | TrueCropperHandleEndEvent\n  | TrueCropperRegionMoveEvent\n  | TrueCropperNewBoxEvent;\n\n/**\n * The event handler function type for TrueCropper events.\n *\n * @param event - The event object.\n * @returns A boolean indicating whether the event was handled.\n */\nexport type TrueCropperEventHandler = (event: TrueCropperEvent) => boolean;\n\n/* ────── Enums & Callback Collections ────── */\n\n/**\n * The possible statuses of the TrueCropper.\n */\nexport enum TrueCropperStatus {\n  /** The cropper is waiting for initialization. */\n  Waiting = \"waiting\",\n  /** The cropper is ready for user interaction. */\n  Ready = \"ready\",\n  /** The cropper is in the process of reloading. */\n  Reloading = \"reloading\",\n  /** An error has occurred in the cropper. */\n  Error = \"error\",\n}\n\n/**\n * Collection of optional callback handlers for TrueCropper events.\n */\nexport interface TrueCropperCallbacks {\n  /** Callback invoked upon initialization. */\n  onInitialize?: TrueCropperCropCallback;\n  /** Callback invoked when cropping starts. */\n  onCropStart?: TrueCropperCropCallback;\n  /** Callback invoked during cropping changes. */\n  onCropChange?: TrueCropperCropCallback;\n  /** Callback invoked when cropping ends. */\n  onCropEnd?: TrueCropperCropCallback;\n  /** Callback invoked when an error occurs. */\n  onError?: TrueCropperErrorCallback;\n}\n\n/* ────── Additional Data Structures ────── */\n\n/**\n * Defines container size constraints along with its aspect ratio.\n */\nexport interface TrueCropperContainerSizeConstraints {\n  /** The container size. */\n  size: TrueCropperSize;\n  /** The minimum allowed container size (if applicable). */\n  minSize?: TrueCropperSize;\n  /** The maximum allowed container size (if applicable). */\n  maxSize?: TrueCropperSize;\n  /** The aspect ratio of the container. */\n  aspectRatio: number;\n}\n\n/**\n * Error data specific to image issues.\n */\nexport interface TrueCropperImageErrorData {\n  /** The target image identifier. */\n  target: string;\n  /** The coordinates related to the error (if applicable). */\n  coordinates?: TrueCropperCoordinates;\n  /** The size of the target image. */\n  targetSize: TrueCropperSize;\n  /** The source image identifier. */\n  source: string;\n  /** The size of the source image. */\n  sourceSize: TrueCropperSize;\n}\n\n/**\n * Box data that may contain nullable values.\n */\nexport interface TrueCropperNullableBoxData {\n  coordinates: { x: number | null; y: number | null };\n  size: { width: number | null; height: number | null };\n  points: TrueCropperPoints;\n}\n\n/**\n * Data related to dragging or resizing operations.\n */\nexport interface TrueCropperDragData {\n  /** The current coordinates during the drag or resize operation. */\n  coordinates: TrueCropperCoordinates;\n  /** The current size during the drag or resize operation. */\n  size: TrueCropperSize;\n  /** The directional points associated with the operation. */\n  points: TrueCropperPoints;\n  /** Whether the movement is primarily vertical. */\n  isVerticalMovement: boolean;\n  /** Whether the movement affects multiple axes. */\n  isMultiAxis: boolean;\n}\n\n/**\n * Represents the initialization configuration for a crop box.\n */\nexport interface TrueCropperBoxInitConfig {\n  /** The starting coordinates of the crop box. */\n  coordinates: TrueCropperCoordinates;\n  /** The initial size of the crop box. */\n  size: TrueCropperSize;\n  /** The minimum allowed size for the crop box. */\n  minSize: TrueCropperSize;\n  /** The maximum allowed size for the crop box. */\n  maxSize: TrueCropperSize;\n  /** The properties of the image (dimensions) being cropped. */\n  imgProps: TrueCropperSize;\n  /** The desired aspect ratio for the crop box. */\n  aspectRatio: number;\n  /** The epsilon value used for calculations (tolerance). */\n  epsilon: number;\n}\n","/**\n * Parse user options\n */\n\n// Tolerance value for floating-point comparison\n// const EPSILON = 0.05;\n\nimport { CONSTANTS } from \"./constant\";\nimport { TrueCropperOptionsError } from \"./errors\";\nimport { TrueCropperOptions, TRUECROPPER_SIZE_UNITS, TrueCropperSizeUnit } from \"./types\";\n\nconst PREFIX = CONSTANTS.base;\n\n/**\n * Capitalizes the first letter of a string.\n * @param {string} str - The input string.\n * @returns {string} The input string with the first letter capitalized.\n */\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Checks if a value is undefined or null.\n * @param {unknown} val - The value to check.\n * @returns {boolean} True if the value is undefined or null, false otherwise.\n */\nfunction isNil(val: unknown) {\n  return val === undefined || val === null;\n}\n\n/**\n * Checks if a value is a valid number.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {number} defaultValue - The default value to return if val is null or undefined.\n * @param {boolean} [allowZero=false] - Whether to allow zero as a valid number.\n * @returns {number} The valid number or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a number, is NaN, or is not positive.\n */\nfunction isNumber(\n  name: string,\n  val: unknown,\n  defaultValue: number,\n  allowZero: boolean = false,\n  allowFractional: boolean = false,\n) {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"number\") {\n    throw TrueCropperOptionsError.new(name, \"number\");\n  }\n  if (Number.isNaN(val)) {\n    throw TrueCropperOptionsError.new(name, \"NaN\", false);\n  }\n  if (allowZero ? val < 0 : val <= 0) {\n    throw TrueCropperOptionsError.new(name, \"positive\");\n  }\n  if (!allowFractional && val > 0 && val < 1) {\n    throw TrueCropperOptionsError.new(name, \"fractional\");\n  }\n\n  return val;\n}\n\n/**\n * Checks if a value is a valid boolean.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {boolean} defaultVal - The default value to return if val is null or undefined.\n * @returns {boolean} The valid boolean or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a boolean.\n */\nfunction isBoolean(name: string, val: unknown, defaultVal: boolean) {\n  if (isNil(val)) {\n    return defaultVal;\n  }\n  if (typeof val !== \"boolean\") {\n    throw TrueCropperOptionsError.new(name, \"boolean\");\n  }\n  return val;\n}\n\n/**\n * Checks if a value is a valid SizeUnit.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {TrueCropperSizeUnit} defaultValue - The default value to return if val is null or undefined.\n * @returns {TrueCropperSizeUnit} The valid SizeUnit or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a valid SizeUnit.\n */\nfunction isSizeUnit(\n  name: string,\n  val: unknown,\n  defaultValue: TrueCropperSizeUnit,\n): TrueCropperSizeUnit {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"string\" || !TRUECROPPER_SIZE_UNITS.includes(val as TrueCropperSizeUnit)) {\n    throw TrueCropperOptionsError.new(name, \"SizeUnit\");\n  }\n  return val as TrueCropperSizeUnit;\n}\n\n/**\n * Parses the options for the TrueCropper instance.\n * @param {DOMStringMap} dataset - The dataset of the TrueCropper container element.\n * @param {Partial<TrueCropperOptions> | undefined} options - The options object passed to the TrueCropper constructor.\n * @returns {TrueCropperOptions} The parsed options object.\n * @throws {TrueCropperOptionsError} if the options object is not of type 'object'.\n */\nexport const parseOptions = (\n  dataset: DOMStringMap,\n  options: Partial<TrueCropperOptions> | undefined,\n) => {\n  const opts = options || {};\n  if (typeof opts !== \"object\" || opts === null) {\n    throw TrueCropperOptionsError.new(\"options\", \"object\");\n  }\n\n  /**\n   * Retrieves the value for a specific option from the dataset.\n   * @param {string} name - The name of the option.\n   * @param {unknown} val - The value for the options.\n   * @returns {unknown} The parsed value for the options.\n   */\n  const getValue = (name: string, val: unknown) => {\n    // Get the raw value from the dataset\n    const value = dataset[`${PREFIX}${capitalizeFirstLetter(name)}`];\n\n    // If the value is null or undefined, return val\n    if (!value) {\n      return val;\n    }\n\n    const lower = value.toLowerCase();\n    if (lower === \"null\" || lower === \"undefined\" || lower === \"nil\") {\n      return val;\n    }\n\n    // If the value can be parsed as a number, return it as a number\n    // const numberValue = Number.parseFloat(value);\n    // if (numberValue.toString() === value) {\n    //   return numberValue;\n    // }\n    if (value.trim().length !== 0 && !Number.isNaN(Number(value))) {\n      return Number(value);\n    }\n\n    // If the value is \"true\" (case-insensitive), return true\n    if (lower === \"true\") {\n      return true;\n    }\n\n    // If the value is \"false\" (case-insensitive), return false\n    if (lower === \"false\") {\n      return false;\n    }\n\n    // Otherwise, return the value as-is\n    return value;\n  };\n\n  const returnValue = {\n    aspectRatio: getValue(\"aspectRatio\", opts.aspectRatio),\n    epsilon: getValue(\"epsilon\", opts.epsilon),\n    allowFlip: getValue(\"allowFlip\", opts.allowFlip),\n    allowNewSelection: getValue(\"allowNewSelection\", opts.allowNewSelection),\n    allowMove: getValue(\"allowMove\", opts.allowMove),\n    allowResize: getValue(\"allowResize\", opts.allowResize),\n    returnMode: getValue(\"returnMode\", opts.returnMode),\n    minSize: {\n      width: getValue(\"minSizeWidth\", opts.minSize?.width),\n      height: getValue(\"minSizeHeight\", opts.minSize?.height),\n      unit: getValue(\"minSizeUnit\", opts.minSize?.unit),\n    },\n    maxSize: {\n      width: getValue(\"maxSizeWidth\", opts.maxSize?.width),\n      height: getValue(\"maxSizeHeight\", opts.maxSize?.height),\n      unit: getValue(\"maxSizeUnit\", opts.maxSize?.unit),\n    },\n    startSize: {\n      x: getValue(\"startSizeX\", opts.startSize?.x),\n      y: getValue(\"startSizeY\", opts.startSize?.y),\n      width: getValue(\"startSizeWidth\", opts.startSize?.width),\n      height: getValue(\"startSizeHeight\", opts.startSize?.height),\n      unit: getValue(\"startSizeUnit\", opts.startSize?.unit),\n    },\n    defaultSize: {\n      x: getValue(\"defaultSizeX\", opts.defaultSize?.x),\n      y: getValue(\"defaultSizeY\", opts.defaultSize?.y),\n      width: getValue(\"defaultSizeWidth\", opts.defaultSize?.width),\n      height: getValue(\"defaultSizeHeight\", opts.defaultSize?.height),\n      unit: getValue(\"defaultSizeUnit\", opts.defaultSize?.unit),\n    },\n  };\n  if (isNil(returnValue.startSize.x) && isNil(returnValue.startSize.y) && isNil(returnValue.startSize.width) && isNil(returnValue.startSize.height)) {\n    returnValue.startSize = returnValue.defaultSize;\n  }\n  return returnValue;\n};\n\n/**\n * Checks if two numbers are approximately equal within a tolerance.\n * @param {number} a - First number.\n * @param {number} b - Second number.\n * @param {number} epsilon - Tolerance value for floating-point comparison.\n * @returns {boolean} True if the numbers are approximately equal, false otherwise.\n */\nconst checkAspectRatio = (a: number, b: number, epsilon: number) =>\n  Math.abs(a - b) < epsilon;\n\n/**\n * Prepares the options for the TrueCropper instance.\n * @param {ReturnType<typeof parseOptions>} options - The parsed options object.\n * @returns {PreparedOptions} The prepared options object.\n * @throws {TrueCropperOptionsError} if there are issues with the options.\n */\nexport const prepareOptions = (options: ReturnType<typeof parseOptions>) => {\n  const aspectRatio = isNumber(\"aspectRatio\", options.aspectRatio, 0, false, true);\n  const epsilon = isNumber(\"epsilon\", options.epsilon, CONSTANTS.epsilon, true, true);\n  const minSize = {\n    width: isNumber(\"minSizeWidth\", options.minSize.width, 0),\n    height: isNumber(\"minSizeHeight\", options.minSize.height, 0),\n    unit: isSizeUnit(\"minSizeUnit\", options.minSize?.unit, \"real\"),\n  };\n  const maxSize = {\n    width: isNumber(\"maxSizeWidth\", options.maxSize.width, 0),\n    height: isNumber(\"maxSizeHeight\", options.maxSize.height, 0),\n    unit: isSizeUnit(\"maxSizeUnit\", options.maxSize.unit, \"real\"),\n  };\n  const firstInitSize = {\n    x: isNumber(\"startSizeX\", options.startSize.x, 0, true),\n    y: isNumber(\"startSizeY\", options.startSize.y, 0, true),\n    width: isNumber(\"startSizeWidth\", options.startSize.width, 0),\n    height: isNumber(\"startSizeHeight\", options.startSize.height, 0),\n    unit: isSizeUnit(\"startSizeUnit\", options.startSize.unit, \"real\"),\n    centeredX: isNil(options.startSize.x),\n    centeredY: isNil(options.startSize.y),\n    allowChange: false,\n  };\n  firstInitSize.allowChange =\n    firstInitSize.width === 0 && firstInitSize.height === 0;\n\n  const startSize = {\n    x: isNumber(\"defaultSizeX\", options.defaultSize.x, 0, true),\n    y: isNumber(\"defaultSizeY\", options.defaultSize.y, 0, true),\n    width: isNumber(\"defaultSizeWidth\", options.defaultSize.width, 0),\n    height: isNumber(\"defaultSizeHeight\", options.defaultSize.height, 0),\n    unit: isSizeUnit(\"defaultSizeUnit\", options.defaultSize.unit, \"real\"),\n    centeredX: isNil(options.defaultSize.x),\n    centeredY: isNil(options.defaultSize.y),\n    allowChange: false,\n  };\n  startSize.allowChange = startSize.width === 0 && startSize.height === 0;\n\n  if (aspectRatio) {\n    if (minSize.width && minSize.height) {\n      const calculatedAspectRatio = minSize.width / minSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, epsilon)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          \"minimum\",\n          calculatedAspectRatio,\n          aspectRatio,\n          epsilon,\n        );\n      }\n    }\n    if (startSize.width && startSize.height) {\n      const calculatedAspectRatio = startSize.width / startSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, epsilon)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          \"defaultSize\",\n          calculatedAspectRatio,\n          aspectRatio,\n          epsilon,\n        );\n      }\n    }\n    if (firstInitSize.width && firstInitSize.height) {\n      const calculatedAspectRatio = firstInitSize.width / firstInitSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, epsilon)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          \"startSize\",\n          calculatedAspectRatio,\n          aspectRatio,\n          epsilon,\n        );\n      }\n    }\n  }\n\n  if (!firstInitSize.centeredX && firstInitSize.width === 0) {\n    throw TrueCropperOptionsError.widthIsNull(\"firstInitSize\");\n  }\n  if (!firstInitSize.centeredY && firstInitSize.height === 0) {\n    throw TrueCropperOptionsError.heightIsNull(\"firstInitSize\");\n  }\n\n  if (!startSize.centeredX && startSize.width === 0) {\n    throw TrueCropperOptionsError.widthIsNull(\"startSize\");\n  }\n  if (!startSize.centeredY && startSize.height === 0) {\n    throw TrueCropperOptionsError.heightIsNull(\"startSize\");\n  }\n\n  if (startSize.unit === 'percent' && (startSize.x + startSize.width > 100 || startSize.y + startSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"startSize\");\n  }\n  if (firstInitSize.unit === 'percent' && (firstInitSize.x + firstInitSize.width > 100 || firstInitSize.y + firstInitSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"firstInitSize\");\n  }\n\n  if (minSize.unit === 'percent' && (minSize.width > 100 || minSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"minSize\");\n  }\n\n  if (maxSize.unit === 'percent' && (maxSize.width > 100 || maxSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"maxSize\");\n  }\n\n  return {\n    aspectRatio,\n    epsilon,\n    allowFlip: isBoolean(\"allowFlip\", options.allowFlip, true),\n    allowNewSelection: isBoolean(\"allowNewSelection\", options.allowNewSelection, true,),\n    allowMove: isBoolean(\"allowMove\", options.allowMove, true),\n    allowResize: isBoolean(\"allowResize\", options.allowResize, true),\n    returnMode: isSizeUnit(\"returnMode\", options.returnMode, \"real\"),\n    minSize,\n    maxSize,\n    firstInitSize,\n    startSize,\n  } as const;\n};\n","/**\n * Handle component for cropping operations.\n *\n * This class represents an interactive handle used to adjust the crop boundaries.\n */\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps, TrueCropperEventHandler } from \"../types\";\nimport { HandlesType } from \"./handles\";\n\nexport default class Handle {\n  /**\n   * The normalized position of the handle (values between 0 and 1).\n   */\n  public position: { x: number; y: number };\n\n  /**\n   * Event bus function used to emit handle events.\n   */\n  private eventBus: TrueCropperEventHandler;\n\n  /**\n   * The HTML element representing the handle.\n   */\n  public el!: HTMLDivElement;\n\n  /**\n   * Flag indicating whether the handle is enabled.\n   */\n  private enable: boolean;\n\n  /**\n   * The event listener function for handling mouse events.\n   */\n  private listener?: (e: MouseEvent) => void;\n\n  /**\n   * Creates an instance of the Handle.\n   *\n   * @param parent - The parent HTMLDivElement to which the handle element is appended.\n   * @param className - The CSS class name to assign to the handle element.\n   * @param item - The handle configuration object, including its position and cursor style.\n   * @param eventBus - A callback function to handle events emitted by the handle.\n   * @param enable - Determines whether the handle is enabled.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    item: HandlesType,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n  ) {\n    this.position = item.position;\n    this.eventBus = eventBus;\n    this.enable = enable;\n\n    this.el = createDiv(className, parent);\n    this.el.style.cursor = item.cursor;\n\n    if (enable) {\n      // Attach initial mouse down listener.\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Displays the handle element.\n   */\n  public show(): void {\n    this.el.style.display = \"block\";\n  }\n\n  /**\n   * Hides the handle element.\n   */\n  public hide(): void {\n    this.el.style.display = \"none\";\n  }\n\n  /**\n   * Destroys the handle by removing event listeners and detaching it from the DOM.\n   */\n  public destroy(): void {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Transforms the handle's position based on the provided crop box properties.\n   *\n   * @param box - The crop box properties (x, y, width, height).\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    const handleWidth = this.el.offsetWidth;\n    const handleHeight = this.el.offsetHeight;\n    const left = box.x + box.width * this.position.x - handleWidth / 2;\n    const top = box.y + box.height * this.position.y - handleHeight / 2;\n\n    this.el.style.transform = `translate(${left}px, ${top}px)`;\n  }\n\n  /**\n   * Retrieves data associated with the handle.\n   *\n   * @returns An object containing the handle's normalized position.\n   */\n  public getData() {\n    return {\n      points: { ...this.position },\n    };\n  }\n\n  /**\n   * Creates and returns a mouse event handler for the handle.\n   *\n   * This function attaches mousemove and mouseup listeners to the document when a mousedown event is detected.\n   *\n   * @returns The mousedown event handler function.\n   */\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent that handle interaction has started.\n      const data = this.getData();\n      this.eventBus({ type: \"handlestart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify parent of handle movement.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"handlemove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent that handle interaction has ended.\n      this.eventBus({ type: \"handleend\" });\n    };\n\n    return onMouseDown;\n  }\n}","/**\n * Handles component\n *\n * This module defines a collection of resize handles used in the cropping interface.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps, TrueCropperEventHandler } from \"../types\";\nimport Handle from \"./handle\";\n\n/**\n * Defines the configuration for each resize handle.\n *\n * @property {object} position - The normalized (x, y) position of the handle within\n *      the crop region. Values are between 0 and 1.\n * @property {string} cursor - The CSS cursor style for this handle.\n */\nconst HANDLES = [\n  { position: { x: 0, y: 0 }, cursor: \"nw-resize\" },\n  { position: { x: 0.5, y: 0 }, cursor: \"n-resize\" },\n  { position: { x: 1, y: 0 }, cursor: \"ne-resize\" },\n  { position: { x: 1, y: 0.5 }, cursor: \"e-resize\" },\n  { position: { x: 1, y: 1 }, cursor: \"se-resize\" },\n  { position: { x: 0.5, y: 1 }, cursor: \"s-resize\" },\n  { position: { x: 0, y: 1 }, cursor: \"sw-resize\" },\n  { position: { x: 0, y: 0.5 }, cursor: \"w-resize\" },\n] as const;\n\n/**\n * Type definition for a single handle configuration.\n */\nexport type HandlesType = (typeof HANDLES)[number];\n\n/**\n * Represents a collection of resize handles used in the cropping interface.\n */\nexport default class Handles {\n  /**\n   * The container element for the handles.\n   */\n  private el: HTMLDivElement;\n  /**\n   * Array of individual handle instances.\n   */\n  private handles: Handle[] = [];\n\n  /**\n   * Creates a new instance of the Handles collection.\n   *\n   * @param parent - The parent HTMLDivElement to which the handles container is appended.\n   * @param className - The CSS class name for the handles container.\n   * @param eventBus - A callback function to handle events emitted by the handles.\n   * @param enable - Determines whether the handles are enabled for user interaction.\n   * @param handleClassName - The CSS class name for individual handle elements.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n    handleClassName: string,\n  ) {\n    this.el = createDiv(className, parent);\n    for (const item of HANDLES) {\n      const handle = new Handle(\n        this.el,\n        handleClassName,\n        item,\n        eventBus,\n        enable,\n      );\n      this.handles.push(handle);\n    }\n  }\n\n  /**\n   * Hides all the handles by setting their display style to \"none\".\n   */\n  public hide(): void {\n    for (const handle of this.handles) {\n      handle.hide();\n    }\n  }\n\n  /**\n   * Shows all the handles by setting their display style to \"block\".\n   */\n  public show(): void {\n    for (const handle of this.handles) {\n      handle.show();\n    }\n  }\n\n  /**\n   * Destroys all handles by removing them from the DOM.\n   */\n  public destroy(): void {\n    for (const handle of this.handles) {\n      handle.destroy();\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Transforms (repositions) all handles based on the provided crop box dimensions.\n   *\n   * @param box - An object representing the crop box properties (x, y, width, height).\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    for (const handle of this.handles) {\n      handle.transform(box);\n    }\n  }\n\n  /**\n   * Retrieves a handle based on the movability of the crop box edges.\n   *\n   * @param leftMovable - Indicates whether the left edge of the crop box is movable.\n   * @param topMovable - Indicates whether the top edge of the crop box is movable.\n   * @returns The handle corresponding to the specified movability configuration.\n   */\n  public handleByMovableType(leftMovable: boolean, topMovable: boolean): Handle {\n    if (leftMovable) {\n      return topMovable ? this.handles[0] : this.handles[6];\n    } else {\n      return topMovable ? this.handles[2] : this.handles[4];\n    }\n  }\n}\n","/**\n * Here lies the main logic.\n */\n\nimport Box from \"./box\";\nimport enableTouch from \"./touch\";\nimport Background from \"./HTMLelements/background\";\nimport NewSelection from \"./HTMLelements/newSelection\";\nimport Selection from \"./HTMLelements/selection\";\nimport { calculatePointsBasedOnMouse, getHTMLelements } from \"./helpers\";\nimport {\n  TrueCropperBoxProps,\n  TrueCropperCoordinates,\n  TrueCropperEvent,\n  TrueCropperNewBoxEvent,\n  TrueCropperHandleMoveEvent,\n  TrueCropperHandleStartEvent,\n  TrueCropperRegionMoveEvent,\n  TrueCropperCallbacks,\n  TrueCropperBoxInitConfig,\n  TrueCropperPoints,\n  TrueCropperSize,\n  TrueCropperSizeUnit,\n  TrueCropperStatus,\n  TrueCropperOptions\n} from \"./types\";\nimport { parseOptions, prepareOptions } from \"./options\";\nimport {\n  TrueCropperHtmlError,\n  TrueCropperOptionsError,\n  TrueCropperImageError,\n} from \"./errors\";\nimport Handles from \"./HTMLelements/handles\";\nimport { CONSTANTS } from \"./constant\";\nimport {\n  convertToRealPx,\n  processingInitialProps,\n  validateImageSizes,\n} from \"./helpers\";\n\n/**\n * Core class for TrueCropper containing most of its functional logic.\n */\nconst defaultSize = { width: 0, height: 0 };\nexport default class TrueCropper {\n  private replaceDOM = false;\n  private htmlContainer!: HTMLDivElement;\n  private htmlImg!: HTMLImageElement;\n\n  private options!: ReturnType<typeof prepareOptions>;\n  private newSelection!: NewSelection;\n  private selection!: Selection;\n  private handles!: Handles;\n  private background!: Background;\n\n  private box!: Box;\n\n  private currentMove!: { offsetX: number; offsetY: number };\n  private activeHandle!: {\n    x: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n    y: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n  };\n\n  private real = defaultSize;\n  private relative = defaultSize;\n  private ratio = defaultSize;\n  private firstInit = true;\n  private isDomCreated = false;\n  public status = TrueCropperStatus.Waiting;\n  public eventBus = this.event.bind(this);\n  private observer!: ResizeObserver;\n  private preventDoubleLoad?: string;\n\n  private callbacks: TrueCropperCallbacks = {\n    onInitialize: undefined,\n    onCropStart: undefined,\n    onCropChange: undefined,\n    onCropEnd: undefined,\n    onError: undefined,\n  };\n\n  public constructor(\n    element: HTMLImageElement | string,\n    optionsProps?: Partial<TrueCropperOptions>,\n  ) {\n    try {\n      this.parseCallbackFunctions(optionsProps);\n      const [img, container] = getHTMLelements(element);\n      this.htmlImg = img;\n      if (container) {\n        this.htmlContainer = container;\n      } else {\n        this.replaceDOM = true;\n      }\n      this.changeStatus(TrueCropperStatus.Waiting);\n\n      // Parse options\n      const rawOptionsData = parseOptions(this.htmlImg.dataset, optionsProps);\n      this.options = prepareOptions(rawOptionsData);\n\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  public getImagePreview(): HTMLCanvasElement | null {\n    if (this.status !== \"ready\") {\n      return null;\n    }\n\n    if (!this.htmlImg.complete) {\n      return null;\n    }\n    if (this.htmlImg.naturalWidth === 0 || this.htmlImg.naturalHeight === 0) {\n      return null;\n    }\n\n    const val = this.getValue(\"real\");\n    if (!val) {\n      return null;\n    }\n\n    if (\n      val.width <= 0 ||\n      val.height <= 0 ||\n      val.x < 0 ||\n      val.y < 0 ||\n      val.x + val.width > this.htmlImg.naturalWidth ||\n      val.y + val.height > this.htmlImg.naturalHeight\n    ) {\n      return null;\n    }\n\n    const canvas = document.createElement(\"canvas\");\n    const dpr = window.devicePixelRatio || 1;\n\n    canvas.width  = val.width * dpr;\n    canvas.height = val.height * dpr;\n\n    canvas.style.width  = `${val.width}px`;\n    canvas.style.height = `${val.height}px`;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      return null;\n    }\n\n    ctx.scale(dpr, dpr);\n\n    ctx.drawImage(\n      this.htmlImg,\n      val.x,\n      val.y,\n      val.width,\n      val.height,\n      0,\n      0,\n      val.width,\n      val.height\n    );\n\n    return canvas;\n  }\n\n\n  /**\n   * Changes the image src.\n   * @param {String} src\n   */\n  public setImage(src: string) {\n    if (src && src.length !== 0) {\n      this.firstInit = false;\n      this.htmlImg.src = src;\n    }\n  }\n\n  /**\n   * Resets the crop region to the initial settings.\n   */\n  public reset() {\n    try {\n      this.firstInit = false;\n      this.destroy();\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError ||\n        error instanceof TrueCropperImageError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Destroy the TrueCropper instance and replace with the original element.\n   */\n  public destroy() {\n    if (this.isDomCreated) {\n      this.observer.unobserve(this.htmlImg);\n      this.newSelection.destroy();\n      this.handles.destroy();\n      this.selection.destroy();\n      this.background.destroy();\n      if (this.replaceDOM) {\n        if (this.htmlContainer.parentElement) {\n          this.htmlContainer.parentElement.replaceChild(\n            this.htmlImg,\n            this.htmlContainer,\n          );\n        }\n      }\n    }\n    this.isDomCreated = false;\n  }\n\n  /**\n   * Moves the crop region to a specified coordinate.\n   * @param {TrueCropperCoordinates} coordinates\n   */\n  public moveTo(coordinates: TrueCropperCoordinates, mode: TrueCropperSizeUnit | undefined = undefined) {\n    if (typeof coordinates !== \"object\") {\n      return;\n    }\n    if (!coordinates\n      || typeof coordinates.x !== \"number\"\n      || typeof coordinates.y !== \"number\") {\n      return;\n    }\n\n    const realCoordinates = this.coordinatesToReal(coordinates, mode);\n\n    this.box.move(realCoordinates);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Resizes the crop region to a specified width and height.\n   * @param {SiTrueCropperSizeze} size\n   * @param {TrueCropperPoints} points\n   */\n  public resizeTo(size: TrueCropperSize, points: TrueCropperPoints = { x: 0.5, y: 0.5 }, mode: TrueCropperSizeUnit | undefined = undefined) {\n    if (typeof size !== \"object\") {\n      return { ok: false, message: \"Size must be provided as an Size object.\" };\n    }\n    if (!size\n      || typeof size.width !== \"number\"\n      || typeof size.height !== \"number\") {\n      return { ok: false, message: \"Size object must have numeric 'width' and 'height' properties.\" };\n    }\n    if (typeof points !== \"object\") {\n      return { ok: false, message: \"Points must be provided as an Points object.\" };\n    }\n    if (!points\n      || typeof points.x !== \"number\"\n      || typeof points.y !== \"number\") {\n      return { ok: false, message: \"Points object must have numeric 'x' and 'y' properties.\" };\n    }\n\n    const realSize = this.sizeToReal(size, mode);\n\n    this.box.resize(realSize, points);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Scale the crop region by a factor.\n   * @param {Number} factor\n   * @param {TrueCropperPoints} points\n   */\n  public scaleBy(factor: number, points: TrueCropperPoints = { x: 0.5, y: 0.5 }) {\n    if (typeof factor !== \"number\") {\n      return { ok: false, message: \"factor must be provided as numeric.\" };\n    }\n    const status = this.box.scale(factor, points);\n    if (status.ok) {\n      this.redraw();\n\n      // Call the callback\n      this.onCropEndCallback();\n    }\n    return status;\n  }\n\n  /**\n   * Sets the value of a box.\n   * @param {TrueCropperBoxProps} box - The box object containing properties to set.\n   * @public\n   */\n  public setValue(box: TrueCropperBoxProps, mode: TrueCropperSizeUnit | undefined = undefined) {\n    if (typeof box !== \"object\") {\n      return { ok: false, message: \"Size must be provided as an BoxProps object.\" };\n    }\n    if (!box\n      || typeof box.x !== \"number\"\n      || typeof box.y !== \"number\"\n      || typeof box.width !== \"number\"\n      || typeof box.height !== \"number\") {\n        return { ok: false, message: \"BoxProps object must have numeric 'x', 'y', 'width' and 'height' properties.\" };\n    }\n    const realSize = this.boxToReal(box, mode);\n    const status = this.box.setValue(realSize);\n\n    if (status.ok) {\n      this.redraw();\n      // Call the callback\n      this.onCropEndCallback();\n    }\n    return status;\n  }\n\n  /**\n   * Get the value of the crop region.\n   * @param {TrueCropperSizeUnit | undefined} mode - The mode of return value type. If null, defaults to the return mode set in returnMode options.\n   * @returns {number} - The value of the crop region.\n   */\n  public getValue(mode: TrueCropperSizeUnit | undefined = undefined) {\n    const calculationMode = mode || this.options.returnMode;\n\n    const notRoundedValues = () => {\n      if (calculationMode === \"relative\") {\n        return this.box.getValueRelative(this.ratio);\n      }\n      if (calculationMode === \"percent\") {\n        return this.box.getValuePercent();\n      }\n\n      return this.box.getValueReal();\n    };\n\n    const values = notRoundedValues();\n    return {\n      x: Math.round(values.x),\n      y: Math.round(values.y),\n      width: Math.round(values.width),\n      height: Math.round(values.height),\n    };\n  }\n\n  /**\n   * Retrieves the image properties.\n   * @returns {real: TrueCropperSize, relative: TrueCropperSize} An object containing the real and relative properties.\n   * @public\n   */\n  public getImageProps() {\n    return { real: this.real, relative: this.relative };\n  }\n\n  /**\n   * Retrieves the status of the instance.\n   * @returns {TrueCropperStatus} The status of the instance.\n   */\n  public getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Handles the callback when after initialization.\n   */\n  protected onInitializeCallback() {\n    if (this.callbacks.onInitialize) {\n      this.callbacks.onInitialize(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping starts.\n   */\n  protected onCropStartCallback() {\n    if (this.callbacks.onCropStart) {\n      this.callbacks.onCropStart(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping is in progress.\n   */\n  protected onCropChangeCallback() {\n    if (this.callbacks.onCropChange) {\n      this.callbacks.onCropChange(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping ends.\n   */\n  protected onCropEndCallback() {\n    const val = this.getValue();\n    // Set dataset properties for cropping dimensions\n    this.setDatasetCropValues(val);\n\n    if (this.callbacks.onCropEnd) {\n      this.callbacks.onCropEnd(this, val);\n    }\n  }\n\n  /**\n   * Handles errors encountered during operations.\n   * @param {TrueCropperHtmlError | TrueCropperImageError | TrueCropperOptionsError} error - The error object containing information about the error.\n   */\n  protected onErrorCallback(\n    error:\n      | TrueCropperHtmlError\n      | TrueCropperImageError\n      | TrueCropperOptionsError,\n  ) {\n    // Change dataset properties status to error\n    this.changeStatus(TrueCropperStatus.Error);\n    const value = {\n      name: error.name,\n      message: error.message,\n      messageId: error.messageId,\n      data: error.data,\n    };\n    // Destroy instance\n    this.destroy();\n    // If onError callback is provided, invoke it with the error object; otherwise, throw the error\n    if (this.callbacks.onError) {\n      this.callbacks.onError(this, value);\n    } else {\n      throw error;\n    }\n  }\n\n  /** ==============\n   *\n   *\n   *  Private methods\n   *\n   *\n   * ==============\n   */\n\n  private initializeObserver() {\n    this.observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const target = entry.target as HTMLImageElement;\n        if (target === this.htmlImg && target.complete && target.width !== 0) {\n          this.updateRelativeSize();\n          this.redraw();\n        }\n      }\n    });\n  }\n\n  private initializeCropper() {\n    this.initializeObserver();\n    // Wait until image is loaded before proceeding\n    if (\n      this.htmlImg.src &&\n      this.htmlImg.complete &&\n      this.htmlImg.width !== 0 &&\n      this.htmlImg.height !== 0\n    ) {\n      this.preventDoubleLoad = this.htmlImg.src;\n      this.initialize();\n    }\n    this.htmlImg.onload = () => {\n      if (!this.htmlImg.src || this.preventDoubleLoad === this.htmlImg.src) {\n        return;\n      } else {\n        this.preventDoubleLoad = undefined;\n      }\n      this.changeStatus(\n        this.status === TrueCropperStatus.Waiting ? TrueCropperStatus.Waiting : TrueCropperStatus.Reloading,\n      );\n      this.observer.unobserve(this.htmlImg);\n      this.initialize();\n    };\n  }\n  private initialize() {\n    try {\n      this.createDOM();\n      this.calcContainerProps();\n      this.updateRelativeSize();\n      this.createNewBox();\n      this.onInitializeCallback();\n      this.observer.observe(this.htmlImg);\n      this.changeStatus(TrueCropperStatus.Ready);\n      this.onCropEndCallback();\n    } catch (error) {\n      if (error instanceof TrueCropperImageError) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private createDOM() {\n    if (this.isDomCreated) {\n      return;\n    }\n\n    if (this.replaceDOM) {\n      this.htmlContainer = document.createElement(\"div\");\n      this.htmlContainer.classList.add(CONSTANTS.base);\n      if (this.htmlImg.parentElement) {\n        this.htmlImg.parentElement.replaceChild(\n          this.htmlContainer,\n          this.htmlImg,\n        );\n      }\n      this.htmlContainer.appendChild(this.htmlImg);\n    }\n    const base = this.htmlContainer;\n    enableTouch(base);\n\n    this.htmlImg.classList.add(CONSTANTS.img);\n    this.background = new Background(base, CONSTANTS.background);\n    this.newSelection = new NewSelection(\n      base,\n      CONSTANTS.new,\n      this.eventBus,\n      this.options.allowNewSelection,\n    );\n    this.selection = new Selection(\n      base,\n      CONSTANTS.selection,\n      this.eventBus,\n      this.options.allowMove,\n    );\n    this.handles = new Handles(\n      base,\n      CONSTANTS.hanleds,\n      this.eventBus,\n      this.options.allowResize,\n      CONSTANTS.handle,\n    );\n    this.isDomCreated = true;\n  }\n\n  private calcContainerProps() {\n    this.real = {\n      width: this.htmlImg.naturalWidth,\n      height: this.htmlImg.naturalHeight,\n    };\n  }\n\n  protected createNewBox() {\n    let startSizeProps = this.options.startSize;\n    if (this.firstInit) {\n      this.firstInit = false;\n      startSizeProps = this.options.firstInitSize;\n    }\n\n    const centered = {\n      x: startSizeProps.centeredX,\n      y: startSizeProps.centeredX,\n    };\n    const allowChange = startSizeProps.allowChange;\n    const realData = convertToRealPx(\n      startSizeProps,\n      this.options.minSize,\n      this.options.maxSize,\n      this.real,\n      this.ratio,\n    );\n    const props = processingInitialProps(\n      realData,\n      this.real,\n      this.options.aspectRatio,\n      this.options.epsilon,\n      allowChange,\n      centered,\n    );\n\n    validateImageSizes(props);\n\n    this.box = new Box(props);\n  }\n\n  private updateRelativeSize() {\n    const { width, height } = this.htmlImg.getBoundingClientRect();\n    if (this.htmlImg.offsetWidth === 0 || this.htmlImg.offsetHeight === 0) {\n      this.relative = { width: this.real.width, height: this.real.height };\n    } else {\n      this.relative = { width, height };\n    }\n\n    this.ratio = {\n      width: this.relative.width / this.real.width,\n      height: this.relative.height / this.real.height,\n    };\n  }\n\n  private changeStatus(status: TrueCropperStatus) {\n    this.status = status;\n    if (this.htmlImg) {\n      this.setDataset(CONSTANTS.valueStatus, status);\n    }\n  }\n\n  /**\n   * Draw visuals (border, handles, etc) for the current box.\n   */\n  private redraw() {\n    const box = this.box.getValueRelative(this.ratio);\n\n    this.selection.transform(box);\n    this.background.transform(box);\n    this.handles.transform(box);\n  }\n\n  private event({ type, data }: TrueCropperEvent) {\n    switch (type) {\n      case \"handlestart\":\n        this.onHandleMoveStart(data);\n        break;\n      case \"handlemove\":\n        this.onHandleMoveMoving(data);\n        break;\n      case \"handleend\":\n        this.onHandleMoveEnd();\n        break;\n      case \"regionstart\":\n        this.onRegionMoveStart(data);\n        break;\n      case \"regionmove\":\n        this.onRegionMoveMoving(data);\n        break;\n      case \"regionend\":\n        this.onRegionMoveEnd();\n        break;\n      case \"createnewbox\":\n        return this.tryToCreateNewBox(data);\n    }\n    return true;\n  }\n\n  private tryToCreateNewBox({\n    coordinates,\n    size,\n    leftMovable,\n    topMovable,\n  }: TrueCropperNewBoxEvent[\"data\"]) {\n    // Get handle data based on movable types\n    const handleData = this.handles\n      .handleByMovableType(leftMovable, topMovable)\n      .getData();\n\n    // Calculate new mouse coordinates\n    const boxCoordinates = this.mouseCoordinates(coordinates);\n\n    // Define movement coordinates for x and y axes\n    const newBox = {\n      coordinates: boxCoordinates,\n      size,\n      points: handleData.points,\n    };\n\n    // Move the box using the calculated movement, and if unsuccessful, return false\n    if (!this.box.prepareAndApplyNewSizeAndCoordinates(newBox)) {\n      return false;\n    }\n\n    // Redraw the box\n    this.redraw();\n\n    // Trigger handle move start event\n    this.onHandleMoveStart(handleData);\n\n    // Return true to indicate successful box creation\n    return true;\n  }\n\n  /**\n   * Executes when user begins dragging a handle.\n   */\n  private onHandleMoveStart(data: TrueCropperHandleStartEvent[\"data\"]) {\n    const { x, y } = this.box.getOppositeCornerCoordinates(data.points);\n    this.activeHandle = {\n      x: {\n        left: data.points.x === 0,\n        savedCoordinate: x,\n      },\n      y: {\n        left: data.points.y === 0,\n        savedCoordinate: y,\n      },\n    };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes on handle move. Main logic to manage the movement of handles.\n   */\n  private onHandleMoveMoving(absMouse: TrueCropperHandleMoveEvent[\"data\"]) {\n    // Calculate mouse's position in relative to the container\n    const coordinates = this.mouseCoordinates(absMouse);\n\n    // получаем левый угол и длину\n    // point == 1 значит мы меняем левый угол\n    // point == 0 значит мы меняем правый угол\n    // point == 0.5 значит мы меняем и левый и правый угол (относительно центра).\n    // в этом случае значение x == null (берем из текещего box)\n    const newBox = calculatePointsBasedOnMouse(\n      coordinates,\n      this.activeHandle.x,\n      this.activeHandle.y,\n    );\n    // const aY = calculatePointBasedOnMouse(mouseY, this.activeHandle.y);\n\n    // Disable flipped crop\n    if (!this.options.allowFlip && (newBox.flipped.x || newBox.flipped.y)) {\n      return;\n    }\n\n    if (this.box.prepareAndApplyNewSizeAndCoordinates(newBox.newBox)) {\n      this.redraw();\n    }\n\n    // Trigger callback\n    this.onCropChangeCallback();\n  }\n  /**\n   *  Executes when the handle move ends.\n   */\n  private onHandleMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Executes when user starts moving the crop region.\n   * @param {TrueCropperRegionMoveEvent[\"data\"]} data - contains the raw mouseX, mouseY coordinate\n   */\n  private onRegionMoveStart(absMouse: TrueCropperRegionMoveEvent[\"data\"]) {\n    const { x, y } = this.mouseCoordinates(absMouse);\n    const box = this.box.getCoourdinates();\n\n    this.currentMove = { offsetX: x - box.x, offsetY: y - box.y };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes when user moves the crop region.\n   */\n  private onRegionMoveMoving(absMouse: TrueCropperRegionMoveEvent[\"data\"]) {\n    const { offsetX, offsetY } = this.currentMove;\n\n    // Calculate mouse's position in relative to the container\n    const { x, y } = this.mouseCoordinates(absMouse);\n    this.box.move({ x: x - offsetX, y: y - offsetY });\n\n    // Update visuals\n    this.redraw();\n\n    // Trigger callback\n    this.onCropChangeCallback();\n  }\n\n  /**\n   * Executes when user stops moving the crop region (mouse up).\n   */\n  private onRegionMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Get the real(natural) mouse coordinates within the image container.\n   * @param {number} absMouseX - The absolute X coordinate of the mouse.\n   * @param {number} absMouseY - The absolute Y coordinate of the mouse.\n   * @returns {[number, number]} - The real(natural) X and Y coordinates within the image container.\n   */\n  private mouseCoordinates(absMouse: { x: number; y: number }) {\n    const container = this.htmlImg.getBoundingClientRect();\n    let x = absMouse.x - container.left;\n    let y = absMouse.y - container.top;\n    x = Math.min(Math.max(x, 0), this.relative.width) / this.ratio.width;\n    y = Math.min(Math.max(y, 0), this.relative.height) / this.ratio.height;\n    return { x, y };\n  }\n\n  /**\n   * Sets a value to a dataset attribute of an HTML image element.\n   * @param {string} name - The name of the dataset attribute.\n   * @param {string | number} value - The value to set for the dataset attribute.\n   */\n  private setDataset(name: string, value: string | number) {\n    this.htmlImg.dataset[name] = value.toString();\n  }\n\n  // to helpers\n  private parseCallbackFunctions(\n    optionsProps?: Partial<TrueCropperOptions>,\n  ) {\n    if (!optionsProps) {\n      return;\n    }\n    if (optionsProps.onError && typeof optionsProps.onError === \"function\") {\n      this.callbacks.onError = optionsProps.onError;\n    }\n    if (\n      optionsProps.onInitialize &&\n      typeof optionsProps.onInitialize === \"function\"\n    ) {\n      this.callbacks.onInitialize = optionsProps.onInitialize;\n    }\n    if (\n      optionsProps.onCropStart &&\n      typeof optionsProps.onCropStart === \"function\"\n    ) {\n      this.callbacks.onCropStart = optionsProps.onCropStart;\n    }\n    if (\n      optionsProps.onCropChange &&\n      typeof optionsProps.onCropChange === \"function\"\n    ) {\n      this.callbacks.onCropChange = optionsProps.onCropChange;\n    }\n    if (\n      optionsProps.onCropEnd &&\n      typeof optionsProps.onCropEnd === \"function\"\n    ) {\n      this.callbacks.onCropEnd = optionsProps.onCropEnd;\n    }\n  }\n\n  private setDatasetCropValues(value?: TrueCropperBoxProps) {\n    const val = value || this.getValue();\n    this.setDataset(CONSTANTS.valueX, val.x);\n    this.setDataset(CONSTANTS.valueY, val.y);\n    this.setDataset(CONSTANTS.valueWidth, val.width);\n    this.setDataset(CONSTANTS.valueHeight, val.height);\n  }\n\n  /**\n   * Converts a single numeric value from a given mode (\"relative\", \"percent\", or \"real\")\n   * into its corresponding real value.\n   *\n   * @param value - The original value to convert.\n   * @param ratio - The reference ratio (e.g., this.ratio.width or this.ratio.height) used for relative conversion.\n   * @param total - The total dimension (from the image size) used for percent conversion.\n   * @param mode - The conversion mode.\n   * @returns The converted value.\n   */\n  private getConvertedValue(value: number, ratio: number, total: number, mode: TrueCropperSizeUnit): number {\n    if (mode === \"relative\") {\n      return value / ratio;\n    }\n    if (mode === \"percent\") {\n      return (total * value) / 100;\n    }\n    // For \"real\" or any unrecognized mode, return the original value.\n    return value;\n  }\n\n  /**\n   * Converts coordinate values (x and y) into their real equivalents based on the specified mode.\n   *\n   * @param coordinates - The coordinates to convert.\n   * @param mode - The conversion mode (\"relative\", \"percent\", or \"real\").\n   *               Defaults to `this.options.returnMode` if not provided.\n   * @returns The converted coordinates.\n   */\n  private coordinatesToReal(coordinates: TrueCropperCoordinates, mode: TrueCropperSizeUnit | undefined = undefined): TrueCropperCoordinates {\n    const calculationMode = mode || this.options.returnMode;\n\n    // If the mode is \"real\", return the original coordinates.\n    if (calculationMode === \"real\") {\n      return { ...coordinates };\n    }\n\n    const imgSize = this.box.getBoxSize();\n    return {\n      x: this.getConvertedValue(\n        coordinates.x,\n        this.ratio.width,\n        imgSize.width,\n        calculationMode\n      ),\n      y: this.getConvertedValue(\n        coordinates.y,\n        this.ratio.height,\n        imgSize.height,\n        calculationMode\n      ),\n    };\n  }\n\n  /**\n   * Converts size values (width and height) into their real equivalents based on the specified mode.\n   *\n   * @param size - The size object to convert.\n   * @param mode - The conversion mode (\"relative\", \"percent\", or \"real\").\n   *               Defaults to `this.options.returnMode` if not provided.\n   * @returns The converted size object.\n   */\n  private sizeToReal(size: TrueCropperSize, mode: TrueCropperSizeUnit | undefined = undefined): TrueCropperSize {\n    const calculationMode = mode || this.options.returnMode;\n\n    // If the mode is \"real\", return the original size.\n    if (calculationMode === \"real\") {\n      return { ...size };\n    }\n\n    const imgSize = this.box.getBoxSize();\n    return {\n      width: this.getConvertedValue(\n        size.width,\n        this.ratio.width,\n        imgSize.width,\n        calculationMode\n      ),\n      height: this.getConvertedValue(\n        size.height,\n        this.ratio.height,\n        imgSize.height,\n        calculationMode\n      ),\n    };\n  }\n\n  /**\n   * Converts a box's properties (both position and size) into their real equivalents\n   * based on the specified mode.\n   *\n   * @param box - The box properties to convert.\n   * @param mode - The conversion mode (\"relative\", \"percent\", or \"real\").\n   *               Defaults to `this.options.returnMode` if not provided.\n   * @returns The converted box properties.\n   */\n  private boxToReal(box: TrueCropperBoxProps, mode: TrueCropperSizeUnit | undefined = undefined): TrueCropperBoxProps {\n    const calculationMode = mode || this.options.returnMode;\n\n    // If the mode is \"real\", no conversion is necessary.\n    if (calculationMode === \"real\") {\n      return box;\n    }\n\n    return {\n      ...this.coordinatesToReal({ x: box.x, y: box.y }, calculationMode),\n      ...this.sizeToReal({ width: box.width, height: box.height }, calculationMode),\n    };\n  }\n}\n"],"names":["BASE_CLASSNAME","CONSTANTS","errorMessage","TrueCropperHtmlError","key","message","__publicField","TrueCropperImageError","data","messageId","target","coordinates","targetSize","source","sourceSize","TrueCropperOptionsError","name","calculatedAspectRatio","aspectRatio","epsilon","object","positive","getHTMLelements","element","el","parent","createDiv","className","calculatePointBasedOnMouse","mousePosition","activeHandle","isMouseLeft","flipped","coordinate","size","point","calculatePointsBasedOnMouse","mouse","handleX","handleY","aX","aY","convertToRealPx","start","min","max","real","ratio","toPx","val","type","unit","newMinSize","newMaxSize","processingInitialProps","imgProps","allowChangeStartProps","centered","minSize","adjustSizeProps","maxSize","calculateAdjustedMaxSize","tmp","adjustStartProps","validateImageSizes","checkDimensions","first","second","firstName","secondName","containerToMaxMinSize","newSize","adjustWidth","widthAdjustment","newWidth","adjustHeight","heightAdjustment","newHeight","adjustToAspectRatio","vertiacal","pointX","pointY","height","width","sizeProps","defaultVal","maxSizeProps","image","startSize","centeredX","centeredY","startSizeProps","newCoordinates","maxX","maxY","Box","box","points","fromX","fromY","x","y","factor","newBox","isVerticalMovement","isMultiAxis","enableTouch","simulateMouseEvent","e","event","touch","touchEventToMouseEvent","Background","div","x2","y2","NewSelection","eventBus","enable","onMouseDown","onMouseMove","onMouseUp","mouseX","mouseY","leftMovable","topMovable","Selection","TRUECROPPER_SIZE_UNITS","TrueCropperStatus","PREFIX","capitalizeFirstLetter","str","isNil","isNumber","defaultValue","allowZero","allowFractional","isBoolean","isSizeUnit","parseOptions","dataset","options","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","opts","getValue","value","lower","returnValue","checkAspectRatio","a","b","prepareOptions","firstInitSize","Handle","item","handleWidth","handleHeight","left","top","HANDLES","Handles","handleClassName","handle","defaultSize","TrueCropper","optionsProps","img","container","rawOptionsData","error","canvas","dpr","ctx","src","mode","realCoordinates","realSize","status","calculationMode","values","entries","entry","base","allowChange","realData","props","handleData","absMouse","offsetX","offsetY","total","imgSize"],"mappings":"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"}