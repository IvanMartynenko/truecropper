{"version":3,"file":"trueCropper.es.js","sources":["../src/constant.ts","../src/errors/trueCropperHtmlError.ts","../src/errors/trueCropperImageError.ts","../src/errors/trueCropperOptionsError.ts","../src/helpers.ts","../src/box.ts","../src/touch.ts","../src/HTMLelements/background.ts","../src/HTMLelements/newSelection.ts","../src/HTMLelements/selection.ts","../src/types.ts","../src/options.ts","../src/HTMLelements/handle.ts","../src/HTMLelements/handles.ts","../src/trueCropper.ts"],"sourcesContent":["const BASE_CLASSNAME = \"truecropper\" as const;\nexport const CONSTANTS = {\n  base: BASE_CLASSNAME,\n  img: `${BASE_CLASSNAME}__image`,\n  background: `${BASE_CLASSNAME}__background`,\n  new: `${BASE_CLASSNAME}__new-selection`,\n  selection: `${BASE_CLASSNAME}__selection`,\n  handle: `${BASE_CLASSNAME}__handle`,\n  hanleds: `${BASE_CLASSNAME}__handles`,\n  valueX: `${BASE_CLASSNAME}X`,\n  valueY: `${BASE_CLASSNAME}Y`,\n  valueWidth: `${BASE_CLASSNAME}Width`,\n  valueHeight: `${BASE_CLASSNAME}Height`,\n  valueStatus: `${BASE_CLASSNAME}Status`,\n} as const;\n","const errorMessage = {\n  srcEmpty: \"Image src not provided\",\n  elementNotFound: \"Unable to find element\",\n  parentNotContainDiv: \"parent element can be exists\",\n};\n\nexport class TrueCropperHtmlError extends Error {\n  public data: null;\n  public constructor(key: keyof typeof errorMessage) {\n    const message = errorMessage[key];\n    super(message);\n\n    Object.setPrototypeOf(this, TrueCropperHtmlError.prototype);\n\n    this.name = \"TrueCropperHtmlError\";\n    this.data = null;\n  }\n}\n","import { IimageErrorData } from \"../types\";\n\nexport class TrueCropperImageError extends Error {\n  public data;\n  public constructor(message: string, data: IimageErrorData) {\n    super(message);\n\n    Object.setPrototypeOf(this, TrueCropperImageError.prototype);\n\n    this.name = \"TrueCropperImageError\";\n    this.data = {\n      target: data.target,\n      coordinates: data.coordinates ? { ...data.coordinates } : undefined,\n      targetSize: { ...data.targetSize },\n      source: data.source,\n      sourceSize: { ...data.sourceSize },\n    };\n  }\n\n  public static startSize(\n    target: string,\n    coordinates: { x: number; y: number },\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ) {\n    const message = `The ${target} (${coordinates.x}x${coordinates.y}:${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data);\n  }\n\n  public static size(\n    target: string,\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ) {\n    const message = `The ${target} (${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates: undefined,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data);\n  }\n}\n","export class TrueCropperOptionsError extends Error {\n  public data: null;\n  public constructor(message: string) {\n    super(message);\n\n    Object.setPrototypeOf(this, TrueCropperOptionsError.prototype);\n\n    this.name = \"TrueCropperOptionsError\";\n    this.data = null;\n  }\n\n  public static aspectRatio(\n    calculatedAspectRatio: number,\n    aspectRatio: number,\n    epsilon: number,\n  ) {\n    const message = `The specified aspect ratio (${aspectRatio}) and calculated minimum dimensions (width/height = ${calculatedAspectRatio}) are greater than (${epsilon}). This might be due to a rounding error on the server side or incorrect minimum sizes.`;\n    return new this(message);\n  }\n\n  public static new(name: string, object: string, positive = true) {\n    const message = positive\n      ? `${name} must be of type ${object}`\n      : `${name} must not be of type ${object}`;\n    return new this(message);\n  }\n}\n","import { CONSTANTS } from \"./constant\";\nimport { TrueCropperHtmlError, TrueCropperImageError } from \"./errors\";\nimport {\n  ActiveHandleDataType,\n  Coordinates,\n  InitQuerySelectorOrHtmlElementType,\n} from \"./types\";\nimport {\n  BoxInitInterface,\n  ContainerToMaxMinSize,\n  Idd2,\n  Size,\n  SizeUnit,\n  SizeWithUnit,\n  StartSize,\n} from \"./types\";\n\n/**\n * Retrieves HTML elements based on the provided element query or type.\n *\n * @param {InitQuerySelectorOrHtmlElementType} element - The element query or type.\n * @returns {[HTMLImageElement, HTMLDivElement]} The retrieved image element and its parent div.\n */\nexport const getHTMLelements = (\n  element: InitQuerySelectorOrHtmlElementType,\n) => {\n  let el = null;\n  if (typeof element === \"string\") {\n    el = document.querySelector(element);\n    if (el === null) {\n      throw new TrueCropperHtmlError(\"elementNotFound\");\n    }\n  } else {\n    el = element;\n  }\n  if (!(el instanceof HTMLImageElement)) {\n    throw new TrueCropperHtmlError(\"srcEmpty\");\n  }\n  // if (el.getAttribute(\"src\") === null) {\n  //   throw new TrueCropperHtmlError(\"srcEmpty\");\n  // }\n  let parent: HTMLDivElement | null = el.parentElement as HTMLDivElement;\n  if (!parent) {\n    throw new TrueCropperHtmlError(\"parentNotContainDiv\");\n  }\n  if (!parent.classList.contains(CONSTANTS.base)) {\n    parent = null;\n  }\n  return [el, parent] as const;\n};\n\n/**\n * Creates a new div element with the specified class name and appends it to a parent element if provided.\n *\n * @param {string} className - The class name for the new div element.\n * @param {HTMLElement | undefined} parent - The optional parent element to append the new div to.\n * @returns {HTMLDivElement} The newly created div element.\n */\nexport const createDiv = (\n  className: string,\n  parent: HTMLElement | undefined = undefined,\n) => {\n  const el = document.createElement(\"div\");\n  el.className = className;\n  if (parent) {\n    parent.appendChild(el);\n  }\n  return el;\n};\n\n/**\n * Calculate point based on mouse position and active handle\n * @param {number} mouse - Current mouse position\n * @param {ActiveHandleDataType} handle - Active handle data\n * @returns {Object} - Object containing flipped flag and data with values and new point\n */\nconst calculatePointBasedOnMouse = (\n  mousePosition: number,\n  activeHandle: ActiveHandleDataType,\n) => {\n  // If handle is not active, return points\n  if (activeHandle.savedCoordinate < 0) {\n    return { flipped: false, coordinate: null, size: null, point: 0.5 };\n  }\n\n  // Determine if mouse is to the left of the saved coordinate\n  const isMouseLeft = mousePosition < activeHandle.savedCoordinate;\n\n  // Check if handle is flipped\n  const flipped = activeHandle.left !== isMouseLeft;\n  const coordinate = activeHandle.savedCoordinate;\n  const size = Math.abs(activeHandle.savedCoordinate - mousePosition);\n  const point = Number(isMouseLeft);\n\n  return {\n    flipped,\n    coordinate,\n    size,\n    point,\n  };\n};\n\n/**\n * Calculates the points based on the mouse coordinates and handles.\n *\n * @param {Coordinates} mouse - The mouse coordinates.\n * @param {ActiveHandleDataType} handleX - The handle for the X coordinate.\n * @param {ActiveHandleDataType} handleY - The handle for the Y coordinate.\n * @returns {Object} The calculated points based on the mouse and handles.\n */\nexport const calculatePointsBasedOnMouse = (\n  mouse: Coordinates,\n  handleX: ActiveHandleDataType,\n  handleY: ActiveHandleDataType,\n) => {\n  const aX = calculatePointBasedOnMouse(mouse.x, handleX);\n  const aY = calculatePointBasedOnMouse(mouse.y, handleY);\n  return {\n    flipped: { x: aX.flipped, y: aY.flipped },\n    newBox: {\n      coordinates: { x: aX.coordinate, y: aY.coordinate },\n      size: { width: aX.size, height: aY.size },\n      points: { x: aX.point, y: aY.point },\n    },\n  };\n};\n\n/**\n * Converts sizes from real or relative or percent units to real pixel values based on provided parameters.\n * @param {StartSize} start The starting size in real or relative or percent units.\n * @param {SizeWithUnit} min The minimum size in real or relative or percent units.\n * @param {SizeWithUnit} max The maximum size in real orrelative or percent units.\n * @param {Size} real The real image size in pixels. Need for percent values.\n * @param {Size} ratio The ratio of conversion from relative to real pixels.\n * @returns Object containing converted sizes.\n */\nexport const convertToRealPx = (\n  start: StartSize,\n  min: SizeWithUnit,\n  max: SizeWithUnit,\n  real: Size,\n  ratio: Size,\n) => {\n  // Function to convert a value from relative or percent units to real pixels\n  const toPx = (val: number, type: keyof Size, unit: SizeUnit) => {\n    if (unit === \"relative\") {\n      return val * ratio[type];\n    }\n    if (unit === \"percent\") {\n      return val >= 1 ? real[type] * (val / 100) : real[type] * val;\n    }\n    // If the unit is already in pixels, return the value as is\n    return val;\n  };\n\n  const newMinSize = {\n    width: toPx(min.width, \"width\", min.unit),\n    height: toPx(min.height, \"height\", min.unit),\n  };\n  const newMaxSize = {\n    width: toPx(max.width, \"width\", max.unit),\n    height: toPx(max.height, \"height\", max.unit),\n  };\n  // Convert starting coordinates to real pixel values\n  const coordinates = {\n    x: toPx(start.x, \"width\", start.unit),\n    y: toPx(start.y, \"height\", start.unit),\n  };\n  // Convert starting size to real pixel values\n  const size = {\n    width: toPx(start.width, \"width\", start.unit),\n    height: toPx(start.height, \"height\", start.unit),\n  };\n  return { coordinates, size, minSize: newMinSize, maxSize: newMaxSize };\n};\n\n/**\n * Processes the initial props for the TrueCropper instance.\n *\n * @param {ReturnType<typeof convertToRealPx>} data - The converted real pixel data.\n * @param {Size} imgProps - The image size.\n * @param {number} aspectRatio - The aspect ratio.\n * @param {boolean} allowChangeStartProps - Flag indicating if start props can be changed.\n * @param {{ x: boolean; y: boolean }} centered - Flag indicating start props coordinates can be changed.\n * @returns {BoxInitInterface} The processed initial props.\n */\nexport const processingInitialProps = (\n  data: ReturnType<typeof convertToRealPx>,\n  imgProps: Size,\n  aspectRatio: number,\n  allowChangeStartProps: boolean,\n  centered: { x: boolean; y: boolean },\n): BoxInitInterface => {\n  const minSize = adjustSizeProps(\n    data.minSize,\n    { width: 1, height: 1 },\n    aspectRatio,\n  );\n  let maxSize = adjustSizeProps(data.maxSize, imgProps, aspectRatio);\n  let size = adjustSizeProps(data.size, imgProps, aspectRatio);\n\n  maxSize = calculateAdjustedMaxSize(maxSize, imgProps, aspectRatio);\n\n  let coordinates = data.coordinates;\n  if (allowChangeStartProps) {\n    const tmp = adjustStartProps(\n      coordinates,\n      size,\n      minSize,\n      maxSize,\n      imgProps,\n      aspectRatio,\n      centered.x,\n      centered.y,\n    );\n    coordinates = tmp.coordinates;\n    size = tmp.size;\n  }\n\n  return { coordinates, size, minSize, maxSize, imgProps, aspectRatio };\n};\n\n/**\n * Validates the image sizes based on various criteria.\n *\n * @param {BoxInitInterface} options - The box initialization interface.\n */\nexport const validateImageSizes = ({\n  coordinates,\n  minSize,\n  maxSize,\n  size,\n  imgProps,\n}: BoxInitInterface) => {\n  const checkDimensions = (\n    first: Size,\n    second: Size,\n    firstName: string,\n    secondName: string,\n  ) => {\n    if (first.width > second.width || first.height > second.height) {\n      throw TrueCropperImageError.size(firstName, first, secondName, second);\n    }\n  };\n\n  // Perform size validations\n  // Check minimum size dimensions\n  checkDimensions(minSize, imgProps, \"minSize\", \"imageSize\");\n  // Validate if the minimum size exceeds the maximum size\n  checkDimensions(minSize, maxSize, \"minSize\", \"maxSize\");\n  // Check start size dimensions\n  checkDimensions(minSize, size, \"minSize\", \"startSize\");\n  if (\n    coordinates.x + size.width > imgProps.width ||\n    coordinates.y + size.height > imgProps.height\n  ) {\n    throw TrueCropperImageError.startSize(\n      \"startSize\",\n      coordinates,\n      size,\n      \"imageSize\",\n      imgProps,\n    );\n  }\n};\n\n/**\n * Converts the container size to the maximum and minimum size.\n *\n * @param {ContainerToMaxMinSize} options - The container size and constraints.\n * @returns {Size} The new size after applying maximum and minimum constraints.\n */\nexport const containerToMaxMinSize = ({\n  size,\n  minSize,\n  maxSize,\n  aspectRatio,\n}: ContainerToMaxMinSize) => {\n  const newSize = { ...size };\n  if (maxSize) {\n    if (newSize.width > maxSize.width) {\n      newSize.width = maxSize.width;\n      newSize.height = aspectRatio\n        ? maxSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height > maxSize.height) {\n      newSize.width = aspectRatio\n        ? maxSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = maxSize.height;\n    }\n  }\n\n  if (minSize) {\n    if (newSize.width < minSize.width) {\n      newSize.width = minSize.width;\n      newSize.height = aspectRatio\n        ? minSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height < minSize.height) {\n      newSize.width = aspectRatio\n        ? minSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = minSize.height;\n    }\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the width of a size nox based on a width adjustment, a point, and an aspect ratio.\n * @param {number} widthAdjustment The amount to adjust the width by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {Size} The adjusted size box.\n */\nconst adjustWidth = (\n  widthAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): Size => {\n  const newWidth = widthAdjustment * point;\n  return { width: newWidth, height: newWidth / aspectRatio };\n};\n\n/**\n * Adjusts the height of a size box based on a height adjustment, a point, and an aspect ratio.\n * @param {number} heightAdjustment The amount to adjust the height by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {Size} The adjusted size box.\n */\nconst adjustHeight = (\n  heightAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): Size => {\n  const newHeight = heightAdjustment * point;\n  return { width: newHeight * aspectRatio, height: newHeight };\n};\n\n/**\n * Adjusts a size box to match a specified aspect ratio.\n * @param {Idd2} data The data box containing the size, coordinates, and points.\n * @param {Size} maxSize The maximum size of the box.\n * @param {number} aspectRatio The aspect ratio to adjust to.\n * @returns The adjusted size box.\n */\nexport const adjustToAspectRatio = (\n  data: Idd2,\n  maxSize: Size,\n  aspectRatio: number,\n): Size => {\n  let newSize = { ...data.size };\n  if (aspectRatio === 0) {\n    return newSize;\n  }\n\n  const vertiacal = data.isMultuAxis\n    ? newSize.height * aspectRatio >= newSize.width\n    : data.isVerticalMovement;\n  const pointX = data.points.x === 1 || data.points.x === 0 ? 1 : 2;\n  const pointY = data.points.y === 1 || data.points.y === 0 ? 1 : 2;\n  if (vertiacal) {\n    newSize = { width: newSize.height * aspectRatio, height: newSize.height };\n  } else {\n    newSize = { width: newSize.width, height: newSize.width / aspectRatio };\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width\n  if (\n    data.coordinates.x + newSize.width * (1 - data.points.x) >\n    maxSize.width\n  ) {\n    newSize = adjustWidth(\n      maxSize.width - data.coordinates.x,\n      pointX,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height\n  if (\n    data.coordinates.y + newSize.height * (1 - data.points.y) >\n    maxSize.height\n  ) {\n    newSize = adjustHeight(\n      maxSize.height - data.coordinates.y,\n      pointY,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width (left)\n  if (data.coordinates.x - newSize.width * data.points.x < 0) {\n    newSize = adjustWidth(data.coordinates.x, pointX, aspectRatio);\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height (top)\n  if (data.coordinates.y - newSize.height * data.points.y < 0) {\n    newSize = adjustHeight(data.coordinates.y, pointY, aspectRatio);\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the size properties by removing empty values and adjusting based on aspect ratio.\n *\n * @param {Size} sizeProps - The size properties to adjust.\n * @param {Size} defaultVal - The default size values.\n * @param {number} aspectRatio - The aspect ratio to consider.\n * @returns {Size} The adjusted size.\n */\nconst adjustSizeProps = (\n  sizeProps: Size,\n  defaultVal: Size,\n  aspectRatio: number,\n): Size => {\n  const size = { ...sizeProps };\n  // Adjust size based on aspect ratio if necessary\n  if (aspectRatio && !size.width && !size.height) {\n    if (aspectRatio > 1) {\n      size.height = defaultVal.height;\n    } else {\n      size.width = defaultVal.width;\n    }\n  }\n\n  if (!size.width) {\n    size.width = aspectRatio ? size.height * aspectRatio : defaultVal.width;\n  }\n\n  if (!size.height) {\n    size.height = aspectRatio ? size.width / aspectRatio : defaultVal.height;\n  }\n\n  return size;\n};\n\n/**\n * Calculates the adjusted maximum size based on image size and aspect ratio.\n *\n * @param {Size} maxSizeProps - The maximum size properties.\n * @param {Size} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @returns {Size} The calculated maximum size.\n */\nconst calculateAdjustedMaxSize = (\n  maxSizeProps: Size,\n  image: Size,\n  aspectRatio: number,\n) => {\n  let maxSize = { ...maxSizeProps };\n  if (aspectRatio) {\n    if (maxSize.width > maxSize.height * aspectRatio) {\n      maxSize.width = maxSize.height * aspectRatio;\n    } else {\n      maxSize.height = maxSize.width / aspectRatio;\n    }\n  }\n  // Adjust maximum size if necessary\n  maxSize = containerToMaxMinSize({\n    size: maxSize,\n    maxSize: image,\n    aspectRatio,\n  });\n  return maxSize;\n};\n\n/**\n * Adjusts the start coordinates and size based on constraints and centering options.\n *\n * @param {Coordinates} coordinates - The initial coordinates.\n * @param {Size} startSize - The initial start size.\n * @param {Size} minSize - The minimum size constraints.\n * @param {Size} maxSize - The maximum size constraints.\n * @param {Size} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @param {boolean} centeredX - Flag for centering horizontally.\n * @param {boolean} centeredY - Flag for centering vertically.\n * @returns {AdjustedStartProps} The adjusted start coordinates and size.\n */\nconst adjustStartProps = (\n  coordinates: Coordinates,\n  startSize: Size,\n  minSize: Size,\n  maxSize: Size,\n  image: Size,\n  aspectRatio: number,\n  centeredX: boolean,\n  centeredY: boolean,\n) => {\n  const startSizeProps = { ...startSize };\n  const newCoordinates = { ...coordinates };\n\n  const maxX = Math.min(maxSize.width, image.width - coordinates.x);\n  const maxY = Math.min(maxSize.height, image.height - coordinates.y);\n  // Adjust maximum size if necessary\n  const newSize = containerToMaxMinSize({\n    size: startSizeProps,\n    maxSize: { width: maxX, height: maxY },\n    minSize,\n    aspectRatio,\n  });\n  startSizeProps.width = newSize.width;\n  startSizeProps.height = newSize.height;\n\n  newCoordinates.x = centeredX\n    ? (image.width - startSizeProps.width) / 2\n    : coordinates.x;\n  newCoordinates.y = centeredY\n    ? (image.height - startSizeProps.height) / 2\n    : coordinates.y;\n\n  return { coordinates: newCoordinates, size: startSizeProps };\n};\n","import {\n  BoxInitInterface,\n  BoxProps,\n  Coordinates,\n  Idd,\n  Idd2,\n  Points,\n  Size,\n} from \"./types\";\nimport { adjustToAspectRatio, containerToMaxMinSize } from \"./helpers\";\n\n/**\n * Box component\n */\nexport default class Box {\n  private coordinates: Coordinates;\n  private size: Size;\n  private minSize: Size;\n  private maxSize: Size;\n  private imgSize: Size;\n  private aspectRatio: number;\n\n  /**\n   * Creates a new Box instance.\n   * @constructor\n   * @param {BoxInitInterface} - Initialization parameters.\n   */\n  public constructor({\n    coordinates,\n    size,\n    minSize,\n    maxSize,\n    imgProps,\n    aspectRatio,\n  }: BoxInitInterface) {\n    this.coordinates = { ...coordinates };\n    this.size = { ...size };\n    this.minSize = { ...minSize };\n    this.maxSize = { ...maxSize };\n    this.imgSize = { ...imgProps };\n    this.aspectRatio = aspectRatio;\n  }\n\n  /**\n   * Sets the value of coordinates and size properties based on the provided BoxProps object.\n   * @param {BoxProps} box - The BoxProps object containing x, y, width, and height properties.\n   * @returns {void}\n   */\n  public setValue(box: BoxProps) {\n    this.coordinates = { x: box.x, y: box.y };\n    this.size = { width: box.width, height: box.height };\n  }\n\n  /**\n   * Moves the box to the specified coordinates within the boundaries of the image.\n   * @param {Coordinates} coordinates - The new x and y coordinates for the box.\n   * @returns {void}\n   */\n  public move(coordinates: Coordinates) {\n    // Ensure box is within the boundaries\n    this.coordinates.x = Math.min(\n      Math.max(coordinates.x, 0),\n      this.imgSize.width - this.size.width,\n    );\n    this.coordinates.y = Math.min(\n      Math.max(coordinates.y, 0),\n      this.imgSize.height - this.size.height,\n    );\n  }\n\n  /**\n   * Resizes the box to a new size.\n   * @param {Size} size - The new size for the box.\n   * @param {Points} points - The relative points for resizing.\n   * @returns {void}\n   */\n  public resize(size: Size, points: Points) {\n    const fromX = this.coordinates.x + this.size.width * points.x;\n    const fromY = this.coordinates.y + this.size.height * points.y;\n\n    this.coordinates = {\n      x: fromX - size.width * points.x,\n      y: fromY - size.height * points.y,\n    };\n    this.size = { width: size.width, height: size.height };\n  }\n\n  /**\n   * Scales the box by a factor and relative points.\n   * @param {number} factor - The scaling factor.\n   * @param {Points} points - The relative points for scaling.\n   * @returns {void}\n   */\n  public scale(factor: number, points: Points) {\n    const width = this.size.width * factor;\n    const height = this.size.height * factor;\n    this.resize({ width, height }, points);\n  }\n\n  /**\n   * Retrieves the current coordinates of the box.\n   * @returns {Coordinates} The current x and y coordinates of the box.\n   */\n  public getCoourdinates(): Coordinates {\n    return { x: this.coordinates.x, y: this.coordinates.y };\n  }\n\n  /**\n   * Retrieves the current box.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValue(): BoxProps {\n    return {\n      x: this.coordinates.x,\n      y: this.coordinates.y,\n      width: this.size.width,\n      height: this.size.height,\n    };\n  }\n\n  /**\n   * Retrieves the current real(natural) value of the box including coordinates, width, and height.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValueReal(): BoxProps {\n    return this.getValue();\n  }\n\n  /**\n   * Retrieves the current value of the box relative to a specified width and height.\n   * @param {Size} size - The width and height for calculating relative values.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box relative to the specified width and height.\n   */\n  public getValueRelative({ width, height }: Size): BoxProps {\n    return {\n      x: this.coordinates.x * width,\n      y: this.coordinates.y * height,\n      width: this.size.width * width,\n      height: this.size.height * height,\n    };\n  }\n\n  /**\n   * Retrieves the current value of the box as a percentage of the image size.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box as a percentage of the image size.\n   */\n  public getValuePercent(): BoxProps {\n    return {\n      x: (this.coordinates.x / this.imgSize.width) * 100,\n      y: (this.coordinates.y / this.imgSize.height) * 100,\n      width: (this.size.width / this.imgSize.width) * 100,\n      height: (this.size.height / this.imgSize.height) * 100,\n    };\n  }\n\n  /**\n   * Calculates the coordinates of the opposite corner of the box based on relative points.\n   * @param {Points} points - The relative points determining the opposite corner.\n   * @returns {Coordinates} The calculated x and y coordinates of the opposite corner.\n   */\n  public getOppositeCornerCoordinates(points: Points): Coordinates {\n    const x =\n      points.x === 0.5\n        ? -1\n        : this.coordinates.x + this.size.width * (1 - points.x);\n    const y =\n      points.y === 0.5\n        ? -1\n        : this.coordinates.y + this.size.height * (1 - points.y);\n    return { x, y };\n  }\n\n  /**\n   * Prepares and applies new size and coordinates for the box based on the provided data.\n   * @param {Idd} newBox - The new box data to apply.\n   * @returns {boolean} Returns true if the new size and coordinates were successfully applied, false otherwise.\n   */\n  public prepareAndApplyNewSizeAndCoordinates(newBox: Idd) {\n    const data = this.prepareSizeAndCoordinates(newBox);\n    if (data.size.width === 0 || data.size.height === 0) {\n      return false;\n    }\n\n    this.size = this.adjustAndCalculateSize(data);\n    this.coordinates = this.adjustAndCalculateCoordinate(\n      data.coordinates,\n      this.size,\n      data.points,\n    );\n\n    return true;\n  }\n\n  /**\n   * Prepares and calculates the size and coordinates for the new box based on the provided data.\n   * @param {Idd} newBox - The new box data to calculate size and coordinates for.\n   * @returns {Idd2} An object containing the calculated size, coordinates, and other relevant properties.\n   */\n  private prepareSizeAndCoordinates(newBox: Idd): Idd2 {\n    const size = {\n      width: newBox.size.width ?? this.size.width,\n      height: newBox.size.height ?? this.size.height,\n    };\n    const coordinates = {\n      x: newBox.coordinates.x ?? this.coordinates.x + this.size.width / 2,\n      y: newBox.coordinates.y ?? this.coordinates.y + this.size.height / 2,\n    };\n    const isVerticalMovement = newBox.coordinates.y !== null;\n    const isMultuAxis = isVerticalMovement && newBox.coordinates.x !== null;\n    return {\n      size,\n      coordinates,\n      isVerticalMovement,\n      isMultuAxis,\n      points: newBox.points,\n    };\n  }\n\n  /**\n   * Adjusts and calculates the size based on aspect ratio and constraints for the new box.\n   * @param {Idd2} data - The data containing coordinates, size, and other parameters for adjustment.\n   * @returns {Size} The adjusted size within the constraints of aspect ratio, min size, and max size.\n   */\n  private adjustAndCalculateSize(data: Idd2): Size {\n    const size = adjustToAspectRatio(data, this.imgSize, this.aspectRatio);\n    return containerToMaxMinSize({\n      size,\n      minSize: this.minSize,\n      maxSize: this.maxSize,\n      aspectRatio: this.aspectRatio,\n    });\n  }\n\n  /**\n   * Adjusts and calculates the new coordinates based on the input coordinates, size, and points.\n   * @param {Coordinates} coordinates - The original coordinates.\n   * @param {Size} size - The size to adjust the coordinates.\n   * @param {Points} points - The points to calculate the adjustment.\n   * @returns {Coordinates} The adjusted coordinates based on the size and points.\n   */\n  private adjustAndCalculateCoordinate(\n    coordinates: Coordinates,\n    size: Size,\n    points: Points,\n  ): Coordinates {\n    return {\n      x: coordinates.x - size.width * points.x,\n      y: coordinates.y - size.height * points.y,\n    };\n  }\n}\n","/**\n * Enables support for touch devices by translating touch events to mouse events.\n */\n\n/**\n * Binds an element's touch events to be simulated as mouse events.\n * @param {HTMLDivElement} element - The element to bind touch events to.\n */\nexport default function enableTouch(element: HTMLDivElement) {\n  element.addEventListener(\"touchstart\", simulateMouseEvent);\n  element.addEventListener(\"touchend\", simulateMouseEvent);\n  element.addEventListener(\"touchmove\", simulateMouseEvent);\n}\n\n/**\n * Translates a touch event to a mouse event.\n * @param {Event} e - The touch event to be translated.\n */\nfunction simulateMouseEvent(e: Event) {\n  e.preventDefault();\n  const event = e as TouchEvent;\n  const touch = event.changedTouches[0];\n\n  touch.target.dispatchEvent(\n    new MouseEvent(touchEventToMouseEvent(event.type), {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      screenX: touch.screenX,\n      screenY: touch.screenY,\n    }),\n  );\n}\n\n/**\n * SubFunction to translates a touch type event to a mouse event\n * @param {string} type - The type of touch event to be translated.\n */\nfunction touchEventToMouseEvent(type: string) {\n  switch (type) {\n    case \"touchstart\":\n      return \"mousedown\";\n    case \"touchmove\":\n      return \"mousemove\";\n    default: // touchend || touchcanceled\n      return \"mouseup\";\n  }\n}\n","/**\n * Background component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps } from \"../types\";\n\nexport default class Background {\n  private nested: HTMLDivElement[] = [];\n\n  public constructor(parent: HTMLDivElement, className: string) {\n    for (let i = 0; i < 4; i++) {\n      const div = createDiv(`${className}-${i}`, parent);\n      this.nested.push(div);\n    }\n  }\n\n  public hide() {\n    for (const el of this.nested) {\n      el.style.display = \"none\";\n    }\n  }\n\n  public show() {\n    for (const el of this.nested) {\n      el.style.display = \"block\";\n    }\n  }\n\n  public destroy() {\n    for (const el of this.nested) {\n      el.remove();\n    }\n  }\n\n  public transform(box: BoxProps) {\n    const x2 = box.x + box.width;\n    const y2 = box.y + box.height;\n    this.nested[0].style.height = `${box.y}px`;\n    this.nested[0].style.left = `${box.x}px`;\n    this.nested[0].style.width = `${box.width}px`;\n\n    this.nested[1].style.left = `${x2}px`;\n    // this.nested[1].style.top = `${box.y}px`;\n\n    this.nested[2].style.left = `${box.x}px`;\n    this.nested[2].style.width = `${box.width}px`;\n    this.nested[2].style.top = `${y2}px`;\n\n    // this.nested[3].style.top = `${box.y}px`;\n    // this.nested[3].style.height = `${box.height + 0.002}px`;\n    this.nested[3].style.width = `${box.x}px`;\n  }\n}\n","/**\n * NewSelection component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperCoreCallbackEventFunction } from \"../types\";\n\nexport default class NewSelection {\n  private eventBus: TrueCropperCoreCallbackEventFunction;\n  private el: HTMLDivElement;\n  private startMouse = { mouseX: 0, mouseY: 0 };\n  private newBoxCreated: boolean = false;\n  private listener?: (e: MouseEvent) => void;\n  /**\n   * Creates a new NewSelection instance.\n   * @constructor\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    this.el = createDiv(className, parent);\n    if (enable) {\n      // Attach initial listener\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n      this.mouseEvent();\n    } else {\n      this.hide();\n    }\n  }\n\n  public hide() {\n    this.el.style.display = \"none\";\n  }\n\n  public show() {\n    this.el.style.display = \"block\";\n  }\n\n  public destroy() {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Save start mouse coordinates\n      this.startMouse = { mouseX: e.clientX, mouseY: e.clientY };\n      this.newBoxCreated = false;\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (this.newBoxCreated) {\n        // Notify parent\n        const data = { x: e.clientX, y: e.clientY };\n        this.eventBus({ type: \"handlemove\", data });\n      } else {\n        this.tryToCreateNewBox(e.clientX, e.clientY);\n      }\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      if (this.newBoxCreated) {\n        this.eventBus({ type: \"handleend\" });\n      }\n    };\n\n    return onMouseDown;\n  }\n\n  private tryToCreateNewBox(mouseX: number, mouseY: number) {\n    if (\n      mouseX === this.startMouse.mouseX ||\n      mouseY === this.startMouse.mouseY\n    ) {\n      return;\n    }\n\n    const leftMovable = mouseX < this.startMouse.mouseX;\n    const topMovable = mouseY < this.startMouse.mouseY;\n    const [x, width] = leftMovable\n      ? [mouseX, this.startMouse.mouseX - mouseX]\n      : [this.startMouse.mouseX, mouseX - this.startMouse.mouseX];\n    const [y, height] = topMovable\n      ? [mouseY, this.startMouse.mouseY - mouseY]\n      : [this.startMouse.mouseY, mouseY - this.startMouse.mouseY];\n    // Notify parent\n    const data = {\n      coordinates: { x, y },\n      size: { width, height },\n      leftMovable,\n      topMovable,\n    };\n    this.newBoxCreated = this.eventBus({ type: \"createnewbox\", data });\n  }\n}\n","/**\n * Selection component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps, TrueCropperCoreCallbackEventFunction } from \"../types\";\n\nexport default class Selection {\n  private eventBus: TrueCropperCoreCallbackEventFunction;\n  private el: HTMLDivElement;\n  private enable: boolean;\n  private listener?: (e: MouseEvent) => void;\n\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    // Create DOM element\n    this.el = createDiv(className, parent);\n\n    this.enable = enable;\n    if (enable) {\n      // Attach initial listener\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.el.style.cursor = \"default\";\n    }\n  }\n\n  public transform(box: BoxProps) {\n    // Calculate handle position\n    this.el.style.transform = `translate(${box.x}px, ${box.y}px)`;\n    this.el.style.width = `${box.width}px`;\n    this.el.style.height = `${box.height}px`;\n  }\n\n  public hide() {\n    this.el.style.display = \"none\";\n    this.el.style.cursor = \"default\";\n  }\n\n  public show() {\n    this.el.style.display = \"block\";\n    this.el.style.cursor = \"move\";\n  }\n\n  public destroy() {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Attach event listeners for the crop selection element.\n   * Enables dragging/moving of the selection element.\n   */\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionstart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionmove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionend\", data });\n    };\n\n    return onMouseDown;\n  }\n}\n","import TrueCropperCore from \"./trueCropper\";\n\nexport type InitQuerySelectorOrHtmlElementType = HTMLImageElement | string;\n\nexport const SIZE_UNIT = [\"real\", \"relative\", \"percent\"] as const;\nexport type SizeUnit = (typeof SIZE_UNIT)[number];\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\nexport interface Points {\n  x: number; // 1 move to left, 0 move to right, 0.5 move from center\n  y: number; // 1 move to top, 0 move to bottom, 0.5 move from center\n}\nexport interface Size {\n  width: number;\n  height: number;\n}\nexport interface UnitProps {\n  unit: SizeUnit;\n}\nexport interface BoxProps extends Coordinates, Size {}\nexport interface SizeWithUnit extends Size, UnitProps {}\n\nexport interface StartSizeProps extends Coordinates, Partial<Size>, UnitProps {}\nexport interface StartSize extends Coordinates, Size, UnitProps {\n  centeredX: boolean;\n  centeredY: boolean;\n  allowChange: boolean;\n}\n\nexport type CallbackType<T, K> = (klass: T, values: K) => void;\nexport type CallbackOnCrop = CallbackType<TrueCropperCore, BoxProps>;\nexport interface ImageError {\n  target: string;\n  source: string;\n  targetSize: Size;\n  sourceSize: Size;\n}\nexport interface CallbackError {\n  type: string;\n  message: string;\n  data: null | ImageError;\n}\nexport type CallbackOnError = CallbackType<TrueCropperCore, CallbackError>;\n\nexport interface OptionsPropsValuesType {\n  aspectRatio: number;\n  maxSize: Partial<SizeWithUnit>;\n  minSize: Partial<SizeWithUnit>;\n  startSize: Partial<StartSizeProps>;\n  defaultSize: Partial<StartSizeProps>;\n  returnMode: SizeUnit;\n  allowFlip: boolean;\n  allowNewSelection: boolean;\n  allowMove: boolean;\n  allowResize: boolean;\n  onInitialize: CallbackOnCrop;\n  onCropStart: CallbackOnCrop;\n  onCropMove: CallbackOnCrop;\n  onCropEnd: CallbackOnCrop;\n  onError: CallbackOnError;\n}\n\nexport interface TrueCropperCoreHandleStartEvent {\n  type: \"handlestart\";\n  data: ActiveHandleType;\n}\n\nexport interface TrueCropperCoreHandleMoveEvent {\n  type: \"handlemove\";\n  data: Coordinates;\n}\n\nexport interface TrueCropperCoreHandleEndEvent {\n  type: \"handleend\";\n  data?: null;\n}\n\nexport interface TrueCropperCoreRegionMoveEvent {\n  type: \"regionstart\" | \"regionmove\" | \"regionend\";\n  data: Coordinates;\n}\n\nexport interface CreateNewBoxTypeEvent {\n  coordinates: Coordinates;\n  size: Size;\n  leftMovable: boolean;\n  topMovable: boolean;\n}\n\nexport interface TrueCropperCoreCreateNewBoxEvent {\n  type: \"createnewbox\";\n  data: CreateNewBoxTypeEvent;\n}\n\nexport interface ActiveHandleDataType {\n  left: boolean;\n  savedCoordinate: number;\n}\nexport interface ActiveHandleType {\n  points: Points;\n}\n\nexport type TrueCropperCoreCallbackEvent =\n  | TrueCropperCoreHandleStartEvent\n  | TrueCropperCoreHandleMoveEvent\n  | TrueCropperCoreHandleEndEvent\n  | TrueCropperCoreRegionMoveEvent\n  | TrueCropperCoreCreateNewBoxEvent;\nexport type TrueCropperCoreCallbackEventFunction = ({\n  type,\n  data,\n}: TrueCropperCoreCallbackEvent) => boolean;\n\nexport enum Status {\n  \"waiting\" = \"waiting\",\n  \"ready\" = \"ready\",\n  \"reloading\" = \"reloading\",\n  \"error\" = \"error\",\n}\n\nexport interface Icallback {\n  onInitialize?: CallbackOnCrop;\n  onCropStart?: CallbackOnCrop;\n  onCropMove?: CallbackOnCrop;\n  onCropEnd?: CallbackOnCrop;\n  onError?: CallbackOnError;\n}\n\nexport interface ContainerToMaxMinSize {\n  size: Size;\n  minSize?: Size;\n  maxSize?: Size;\n  aspectRatio: number;\n}\n\nexport interface IimageErrorData {\n  target: string;\n  coordinates?: Coordinates;\n  targetSize: Size;\n  source: string;\n  sourceSize: Size;\n}\n\nexport interface Idd {\n  coordinates: { x: number | null; y: number | null };\n  size: { width: number | null; height: number | null };\n  points: Points;\n}\nexport interface Idd2 {\n  coordinates: Coordinates;\n  size: Size;\n  points: Points;\n  isVerticalMovement: boolean;\n  isMultuAxis: boolean;\n}\n/**\n * Represents the initialization interface for Box.\n * @interface\n */\nexport interface BoxInitInterface {\n  coordinates: Coordinates;\n  size: Size;\n  minSize: Size;\n  maxSize: Size;\n  imgProps: Size;\n  aspectRatio: number;\n}\n","/**\n * Parse user options\n */\n\n// Tolerance value for floating-point comparison\nconst EPSILON = 0.0001;\n\nimport { CONSTANTS } from \"./constant\";\nimport { TrueCropperOptionsError } from \"./errors\";\nimport { OptionsPropsValuesType, SIZE_UNIT, SizeUnit } from \"./types\";\n\nconst PREFIX = CONSTANTS.base;\n\n/**\n * Capitalizes the first letter of a string.\n * @param {string} str - The input string.\n * @returns {string} The input string with the first letter capitalized.\n */\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Checks if a value is undefined or null.\n * @param {unknown} val - The value to check.\n * @returns {boolean} True if the value is undefined or null, false otherwise.\n */\nfunction isNil(val: unknown) {\n  return val === undefined || val === null;\n}\n\n/**\n * Checks if a value is a valid number.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {number} defaultValue - The default value to return if val is null or undefined.\n * @param {boolean} [allowZero=false] - Whether to allow zero as a valid number.\n * @returns {number} The valid number or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a number, is NaN, or is not positive.\n */\nfunction isNumber(\n  name: string,\n  val: unknown,\n  defaultValue: number,\n  allowZero: boolean = false,\n) {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"number\") {\n    throw TrueCropperOptionsError.new(name, \"number\");\n  }\n  if (Number.isNaN(val)) {\n    throw TrueCropperOptionsError.new(name, \"NaN\", false);\n  }\n  if (allowZero ? val < 0 : val <= 0) {\n    throw TrueCropperOptionsError.new(name, \"positive\");\n  }\n\n  return val;\n}\n\n/**\n * Checks if a value is a valid boolean.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {boolean} defaultVal - The default value to return if val is null or undefined.\n * @returns {boolean} The valid boolean or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a boolean.\n */\nfunction isBoolean(name: string, val: unknown, defaultVal: boolean) {\n  if (isNil(val)) {\n    return defaultVal;\n  }\n  if (typeof val !== \"boolean\") {\n    throw TrueCropperOptionsError.new(name, \"boolean\");\n  }\n  return val;\n}\n\n/**\n * Checks if a value is a valid SizeUnit.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {SizeUnit} defaultValue - The default value to return if val is null or undefined.\n * @returns {SizeUnit} The valid SizeUnit or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a valid SizeUnit.\n */\nfunction isSizeUnit(\n  name: string,\n  val: unknown,\n  defaultValue: SizeUnit,\n): SizeUnit {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"string\" || !SIZE_UNIT.includes(val as SizeUnit)) {\n    throw TrueCropperOptionsError.new(name, \"SizeUnit\");\n  }\n  return val as SizeUnit;\n}\n\n/**\n * Parses the options for the TrueCropper instance.\n * @param {DOMStringMap} dataset - The dataset of the TrueCropper container element.\n * @param {Partial<OptionsPropsValuesType> | undefined} options - The options object passed to the TrueCropper constructor.\n * @returns {OptionsPropsValuesType} The parsed options object.\n * @throws {TrueCropperOptionsError} if the options object is not of type 'object'.\n */\nexport const parseOptions = (\n  dataset: DOMStringMap,\n  options: Partial<OptionsPropsValuesType> | undefined,\n) => {\n  const opts = options || {};\n  if (typeof opts !== \"object\" || opts === null) {\n    throw TrueCropperOptionsError.new(\"options\", \"object\");\n  }\n\n  /**\n   * Retrieves the value for a specific option from the dataset.\n   * @param {string} name - The name of the option.\n   * @param {unknown} val - The value for the options.\n   * @returns {unknown} The parsed value for the options.\n   */\n  const getValue = (name: string, val: unknown) => {\n    // Get the raw value from the dataset\n    const value = dataset[`${PREFIX}${capitalizeFirstLetter(name)}`];\n\n    // If the value is null or undefined, return val\n    if (!value) {\n      return val;\n    }\n\n    const lower = value.toLowerCase();\n    if (lower === \"null\" || lower === \"undefined\" || lower === \"nil\") {\n      return val;\n    }\n\n    // If the value can be parsed as a number, return it as a number\n    const numberValue = Number.parseFloat(value);\n    if (numberValue.toString() === value) {\n      return numberValue;\n    }\n\n    // If the value is \"true\" (case-insensitive), return true\n    if (lower === \"true\") {\n      return true;\n    }\n\n    // If the value is \"false\" (case-insensitive), return false\n    if (lower === \"false\") {\n      return false;\n    }\n\n    // Otherwise, return the value as-is\n    return value;\n  };\n\n  return {\n    aspectRatio: getValue(\"aspectRatio\", opts.aspectRatio),\n    allowFlip: getValue(\"allowFlip\", opts.allowFlip),\n    allowNewSelection: getValue(\"allowNewSelection\", opts.allowNewSelection),\n    allowMove: getValue(\"allowMove\", opts.allowMove),\n    allowResize: getValue(\"allowResize\", opts.allowResize),\n    returnMode: getValue(\"returnMode\", opts.returnMode),\n    minSize: {\n      width: getValue(\"minSizeWidth\", opts.minSize?.width),\n      height: getValue(\"minSizeHeight\", opts.minSize?.height),\n      unit: getValue(\"minSizeUnit\", opts.minSize?.unit),\n    },\n    maxSize: {\n      width: getValue(\"maxSizeWidth\", opts.maxSize?.width),\n      height: getValue(\"maxSizeHeight\", opts.maxSize?.height),\n      unit: getValue(\"maxSizeUnit\", opts.maxSize?.unit),\n    },\n    startSize: {\n      x: getValue(\"startSizeX\", opts.startSize?.x),\n      y: getValue(\"startSizeY\", opts.startSize?.y),\n      width: getValue(\"startSizeWidth\", opts.startSize?.width),\n      height: getValue(\"startSizeHeight\", opts.startSize?.height),\n      unit: getValue(\"startSizeUnit\", opts.startSize?.unit),\n    },\n    defaultSize: {\n      x: getValue(\"defaultSizeX\", opts.defaultSize?.x),\n      y: getValue(\"defaultSizeY\", opts.defaultSize?.y),\n      width: getValue(\"defaultSizeWidth\", opts.defaultSize?.width),\n      height: getValue(\"defaultSizeHeight\", opts.defaultSize?.height),\n      unit: getValue(\"defaultSizeUnit\", opts.defaultSize?.unit),\n    },\n  };\n};\n\n/**\n * Checks if two numbers are approximately equal within a tolerance.\n * @param {number} a - First number.\n * @param {number} b - Second number.\n * @param {number} epsilon - Tolerance value for floating-point comparison.\n * @returns {boolean} True if the numbers are approximately equal, false otherwise.\n */\nconst checkAspectRatio = (a: number, b: number, epsilon: number) =>\n  Math.abs(a - b) < epsilon;\n\n/**\n * Prepares the options for the TrueCropper instance.\n * @param {ReturnType<typeof parseOptions>} options - The parsed options object.\n * @returns {PreparedOptions} The prepared options object.\n * @throws {TrueCropperOptionsError} if there are issues with the options.\n */\nexport const prepareOptions = (options: ReturnType<typeof parseOptions>) => {\n  const aspectRatio = isNumber(\"aspectRatio\", options.aspectRatio, 0);\n  const minSize = {\n    width: isNumber(\"minSizeWidth\", options.minSize.width, 0),\n    height: isNumber(\"minSizeHeight\", options.minSize.height, 0),\n    unit: isSizeUnit(\"minSizeUnit\", options.minSize?.unit, \"real\"),\n  };\n  const maxSize = {\n    width: isNumber(\"maxSizeWidth\", options.maxSize.width, 0),\n    height: isNumber(\"maxSizeHeight\", options.maxSize.height, 0),\n    unit: isSizeUnit(\"maxSizeUnit\", options.maxSize.unit, \"real\"),\n  };\n  const firstInitSize = {\n    x: isNumber(\"startSizeX\", options.startSize.x, 0, true),\n    y: isNumber(\"startSizeY\", options.startSize.y, 0, true),\n    width: isNumber(\"startSizeWidth\", options.startSize.width, 0),\n    height: isNumber(\"startSizeHeight\", options.startSize.height, 0),\n    unit: isSizeUnit(\"startSizeUnit\", options.startSize.unit, \"real\"),\n    centeredX: isNil(options.startSize.x),\n    centeredY: isNil(options.startSize.y),\n    allowChange: false,\n  };\n  firstInitSize.allowChange =\n    firstInitSize.width === 0 && firstInitSize.height === 0;\n\n  const startSize = {\n    x: isNumber(\"defaultSizeX\", options.defaultSize.x, 0, true),\n    y: isNumber(\"defaultSizeY\", options.defaultSize.y, 0, true),\n    width: isNumber(\"defaultSizeWidth\", options.defaultSize.width, 0),\n    height: isNumber(\"defaultSizeHeight\", options.defaultSize.height, 0),\n    unit: isSizeUnit(\"defaultSizeUnit\", options.defaultSize.unit, \"real\"),\n    centeredX: isNil(options.defaultSize.x),\n    centeredY: isNil(options.defaultSize.y),\n    allowChange: false,\n  };\n  startSize.allowChange = startSize.width === 0 && startSize.height === 0;\n\n  if (aspectRatio) {\n    if (minSize.width && minSize.height) {\n      const calculatedAspectRatio = minSize.width / minSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, EPSILON)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          calculatedAspectRatio,\n          aspectRatio,\n          EPSILON,\n        );\n      }\n    }\n    // FixThis change erro message\n    if (firstInitSize.width && firstInitSize.height) {\n      const calculatedAspectRatio = firstInitSize.width / firstInitSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, EPSILON)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          calculatedAspectRatio,\n          aspectRatio,\n          EPSILON,\n        );\n      }\n    }\n  }\n\n  return {\n    aspectRatio,\n    allowFlip: isBoolean(\"allowFlip\", options.allowFlip, true),\n    allowNewSelection: isBoolean(\n      \"allowNewSelection\",\n      options.allowNewSelection,\n      true,\n    ),\n    allowMove: isBoolean(\"allowMove\", options.allowMove, true),\n    allowResize: isBoolean(\"allowResize\", options.allowResize, true),\n    returnMode: isSizeUnit(\"returnMode\", options.returnMode, \"real\"),\n    minSize,\n    maxSize,\n    firstInitSize,\n    startSize,\n  } as const;\n};\n","/**\n * Handle component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps, TrueCropperCoreCallbackEventFunction } from \"../types\";\nimport { HandlesType } from \"./handles\";\n\nexport default class Handle {\n  public position: { x: number; y: number };\n  private eventBus: TrueCropperCoreCallbackEventFunction;\n  public el!: HTMLDivElement;\n  private enable: boolean;\n  private listener?: (e: MouseEvent) => void;\n\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    item: HandlesType,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n  ) {\n    this.position = item.position;\n    this.eventBus = eventBus;\n    this.enable = enable;\n\n    this.el = createDiv(className, parent);\n    this.el.style.cursor = item.cursor;\n\n    if (enable) {\n      // Attach initial listener\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.hide();\n    }\n  }\n\n  public show() {\n    this.el.style.display = \"block\";\n  }\n\n  public hide() {\n    this.el.style.display = \"none\";\n  }\n\n  public destroy() {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  public transform(box: BoxProps) {\n    // Calculate handle position\n    const handleWidth = this.el.offsetWidth;\n    const handleHeight = this.el.offsetHeight;\n    const left = box.x + box.width * this.position.x - handleWidth / 2;\n    const top = box.y + box.height * this.position.y - handleHeight / 2;\n\n    this.el.style.transform = `translate(${left}px, ${top}px)`;\n  }\n\n  public getData() {\n    return {\n      points: { ...this.position },\n    };\n  }\n\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      const data = this.getData();\n      this.eventBus({ type: \"handlestart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"handlemove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      this.eventBus({ type: \"handleend\" });\n    };\n\n    return onMouseDown;\n  }\n}\n","/**\n * Handle component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps, TrueCropperCoreCallbackEventFunction } from \"../types\";\nimport Handle from \"./handle\";\n\n/**\n * Define a list of handles to create.\n *\n * @property {Array} position - The x and y ratio position of the handle within\n *      the crop region. Accepts a value between 0 to 1 in the order of [X, Y].\n * @property {String} cursor - The CSS cursor of this handle.\n */\nconst HANDLES = [\n  { position: { x: 0, y: 0 }, cursor: \"nw-resize\" },\n  { position: { x: 0.5, y: 0 }, cursor: \"n-resize\" },\n  { position: { x: 1, y: 0 }, cursor: \"ne-resize\" },\n  { position: { x: 1, y: 0.5 }, cursor: \"e-resize\" },\n  { position: { x: 1, y: 1 }, cursor: \"se-resize\" },\n  { position: { x: 0.5, y: 1 }, cursor: \"s-resize\" },\n  { position: { x: 0, y: 1 }, cursor: \"sw-resize\" },\n  { position: { x: 0, y: 0.5 }, cursor: \"w-resize\" },\n] as const;\n\nexport type HandlesType = (typeof HANDLES)[number];\n\nexport default class Handles {\n  private el: HTMLDivElement;\n  private handles: Handle[] = [];\n  /**\n   * Creates a new Handle instance.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n    handleClassName: string,\n  ) {\n    this.el = createDiv(className, parent);\n    for (const item of HANDLES) {\n      const handle = new Handle(\n        this.el,\n        handleClassName,\n        item,\n        eventBus,\n        enable,\n      );\n      this.handles.push(handle);\n    }\n  }\n\n  public hide() {\n    for (const handle of this.handles) {\n      handle.hide();\n    }\n  }\n\n  public show() {\n    for (const handle of this.handles) {\n      handle.show();\n    }\n  }\n\n  public destroy() {\n    for (const handle of this.handles) {\n      handle.destroy();\n    }\n    this.el.remove();\n  }\n\n  public transform(box: BoxProps) {\n    for (const handle of this.handles) {\n      handle.transform(box);\n    }\n  }\n\n  public handleByMovableType(leftMovable: boolean, topMovable: boolean) {\n    if (leftMovable) {\n      return topMovable ? this.handles[0] : this.handles[6];\n    } else {\n      return topMovable ? this.handles[2] : this.handles[4];\n    }\n  }\n}\n","/**\n * Here lies the main logic.\n */\n\nimport Box from \"./box\";\nimport enableTouch from \"./touch\";\nimport Background from \"./HTMLelements/background\";\nimport NewSelection from \"./HTMLelements/newSelection\";\nimport Selection from \"./HTMLelements/selection\";\nimport { calculatePointsBasedOnMouse, getHTMLelements } from \"./helpers\";\nimport {\n  BoxProps,\n  Coordinates,\n  TrueCropperCoreCallbackEvent,\n  TrueCropperCoreCreateNewBoxEvent,\n  TrueCropperCoreHandleMoveEvent,\n  TrueCropperCoreHandleStartEvent,\n  TrueCropperCoreRegionMoveEvent,\n  Icallback,\n  OptionsPropsValuesType,\n  Points,\n  Size,\n  SizeUnit,\n  Status,\n} from \"./types\";\nimport { parseOptions, prepareOptions } from \"./options\";\nimport {\n  TrueCropperHtmlError,\n  TrueCropperOptionsError,\n  TrueCropperImageError,\n} from \"./errors\";\nimport Handles from \"./HTMLelements/handles\";\nimport { CONSTANTS } from \"./constant\";\nimport {\n  convertToRealPx,\n  processingInitialProps,\n  validateImageSizes,\n} from \"./helpers\";\n\n/**\n * Core class for TrueCropper containing most of its functional logic.\n */\nconst defaultSize = { width: 0, height: 0 };\nexport default class TrueCropper {\n  private replaceDOM = false;\n  private htmlContainer!: HTMLDivElement;\n  private htmlImg!: HTMLImageElement;\n\n  private options!: ReturnType<typeof prepareOptions>;\n  private newSelection!: NewSelection;\n  private selection!: Selection;\n  private handles!: Handles;\n  private background!: Background;\n\n  private box!: Box;\n\n  private currentMove!: { offsetX: number; offsetY: number };\n  private activeHandle!: {\n    x: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n    y: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n  };\n\n  private real = defaultSize;\n  private relative = defaultSize;\n  private ratio = defaultSize;\n  private firstInit = true;\n  private isDomCreated = false;\n  public status = Status.waiting;\n  public eventBus = this.event.bind(this);\n  private observer!: ResizeObserver;\n\n  private callbacks: Icallback = {\n    onInitialize: undefined,\n    onCropStart: undefined,\n    onCropMove: undefined,\n    onCropEnd: undefined,\n    onError: undefined,\n  };\n\n  public constructor(\n    element: HTMLImageElement | string,\n    optionsProps?: Partial<OptionsPropsValuesType>,\n  ) {\n    try {\n      this.parseCallbackFunctions(optionsProps);\n      const [img, container] = getHTMLelements(element);\n      this.htmlImg = img;\n      if (container) {\n        this.htmlContainer = container;\n      } else {\n        this.replaceDOM = true;\n      }\n      this.changeStatus(Status.waiting);\n\n      // Parse options\n      const rawOptionsData = parseOptions(this.htmlImg.dataset, optionsProps);\n      this.options = prepareOptions(rawOptionsData);\n\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  public getImagePreview() {\n    if (this.status !== \"ready\") {\n      return;\n    }\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"crossorigin\", \"anonymous\");\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      return;\n    }\n    const val = this.getValue(\"real\");\n    canvas.width = val.width;\n    canvas.height = val.height;\n    ctx.drawImage(\n      this.htmlImg,\n      val.x,\n      val.y,\n      val.width,\n      val.height,\n      0,\n      0,\n      val.width,\n      val.height,\n    );\n\n    return canvas;\n  }\n\n  /**\n   * Changes the image src.\n   * @param {String} src\n   */\n  public setImage(src: string) {\n    if (src && src.length !== 0) {\n      this.firstInit = false;\n      this.htmlImg.src = src;\n    }\n  }\n\n  /**\n   * Resets the crop region to the initial settings.\n   */\n  public reset() {\n    try {\n      this.firstInit = false;\n      this.destroy();\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError ||\n        error instanceof TrueCropperImageError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Destroy the TrueCropper instance and replace with the original element.\n   */\n  public destroy() {\n    if (this.isDomCreated) {\n      this.observer.unobserve(this.htmlImg);\n      this.newSelection.destroy();\n      this.handles.destroy();\n      this.selection.destroy();\n      this.background.destroy();\n      if (this.replaceDOM) {\n        if (this.htmlContainer.parentElement) {\n          this.htmlContainer.parentElement.replaceChild(\n            this.htmlImg,\n            this.htmlContainer,\n          );\n        }\n      }\n    }\n    this.isDomCreated = false;\n  }\n\n  /**\n   * Moves the crop region to a specified coordinate.\n   * @param {Coordinates} coordinates\n   */\n  public moveTo(coordinates: Coordinates) {\n    this.box.move(coordinates);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Resizes the crop region to a specified width and height.\n   * @param {Size} size\n   * @param {Points} points\n   */\n  public resizeTo(size: Size, points: Points = { x: 0.5, y: 0.5 }) {\n    this.box.resize(size, points);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Scale the crop region by a factor.\n   * @param {Number} factor\n   * @param {Points} points\n   */\n  public scaleBy(factor: number, points: Points = { x: 0.5, y: 0.5 }) {\n    this.box.scale(factor, points);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Sets the value of a box.\n   * @param {BoxProps} box - The box object containing properties to set.\n   * @public\n   */\n  public setValue(box: BoxProps) {\n    this.box.setValue(box);\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Get the value of the crop region.\n   * @param {SizeUnit | undefined} mode - The mode of return value type. If null, defaults to the return mode set in returnMode options.\n   * @returns {number} - The value of the crop region.\n   */\n  public getValue(mode: SizeUnit | undefined = undefined) {\n    const calculationMode = mode || this.options.returnMode;\n\n    const notRoundedValues = () => {\n      if (calculationMode === \"relative\") {\n        return this.box.getValueRelative(this.ratio);\n      }\n      if (calculationMode === \"percent\") {\n        return this.box.getValuePercent();\n      }\n\n      return this.box.getValueReal();\n    };\n\n    const values = notRoundedValues();\n    return {\n      x: Math.round(values.x),\n      y: Math.round(values.y),\n      width: Math.round(values.width),\n      height: Math.round(values.height),\n    };\n  }\n\n  /**\n   * Retrieves the image properties.\n   * @returns {real: Size, relative: Size} An object containing the real and relative properties.\n   * @public\n   */\n  public getImageProps() {\n    return { real: this.real, relative: this.relative };\n  }\n\n  /**\n   * Retrieves the status of the instance.\n   * @returns {Status} The status of the instance.\n   */\n  public getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Handles the callback when after initialization.\n   */\n  protected onInitializeCallback() {\n    if (this.callbacks.onInitialize) {\n      this.callbacks.onInitialize(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping starts.\n   */\n  protected onCropStartCallback() {\n    if (this.callbacks.onCropStart) {\n      this.callbacks.onCropStart(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping is in progress.\n   */\n  protected onCropMoveCallback() {\n    if (this.callbacks.onCropMove) {\n      this.callbacks.onCropMove(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping ends.\n   */\n  protected onCropEndCallback() {\n    const val = this.getValue();\n    // Set dataset properties for cropping dimensions\n    this.setDatasetCropValues(val);\n\n    if (this.callbacks.onCropEnd) {\n      this.callbacks.onCropEnd(this, val);\n    }\n  }\n\n  /**\n   * Handles errors encountered during operations.\n   * @param {TrueCropperHtmlError | TrueCropperImageError | TrueCropperOptionsError} error - The error object containing information about the error.\n   */\n  protected onErrorCallback(\n    error:\n      | TrueCropperHtmlError\n      | TrueCropperImageError\n      | TrueCropperOptionsError,\n  ) {\n    // Change dataset properties status to error\n    this.changeStatus(Status.error);\n    const value = {\n      type: error.name,\n      message: error.message,\n      data: error.data,\n    };\n    // Destroy instance\n    this.destroy();\n    // If onError callback is provided, invoke it with the error object; otherwise, throw the error\n    if (this.callbacks.onError) {\n      this.callbacks.onError(this, value);\n    } else {\n      throw error;\n    }\n  }\n\n  /** ==============\n   *\n   *\n   *  Private methods\n   *\n   *\n   * ==============\n   */\n\n  private initializeObserver() {\n    this.observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const target = entry.target as HTMLImageElement;\n        if (target === this.htmlImg && target.complete && target.width !== 0) {\n          this.updateRelativeSize();\n          this.redraw();\n        }\n      }\n    });\n  }\n\n  private initializeCropper() {\n    this.initializeObserver();\n    // Wait until image is loaded before proceeding\n    if (this.htmlImg.width !== 0 && this.htmlImg.height !== 0) {\n      this.initialize();\n    }\n\n    this.htmlImg.onload = () => {\n      this.changeStatus(\n        this.status === Status.waiting ? Status.waiting : Status.reloading,\n      );\n      this.observer.unobserve(this.htmlImg);\n      this.initialize();\n    };\n  }\n  private initialize() {\n    try {\n      this.createDOM();\n      this.calcContainerProps();\n      this.updateRelativeSize();\n      this.createNewBox();\n      this.onInitializeCallback();\n      this.observer.observe(this.htmlImg);\n      this.changeStatus(Status.ready);\n      this.onCropEndCallback();\n    } catch (error) {\n      if (error instanceof TrueCropperImageError) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private createDOM() {\n    if (this.isDomCreated) {\n      return;\n    }\n\n    if (this.replaceDOM) {\n      this.htmlContainer = document.createElement(\"div\");\n      this.htmlContainer.classList.add(CONSTANTS.base);\n      if (this.htmlImg.parentElement) {\n        this.htmlImg.parentElement.replaceChild(\n          this.htmlContainer,\n          this.htmlImg,\n        );\n      }\n      this.htmlContainer.appendChild(this.htmlImg);\n    }\n    const base = this.htmlContainer;\n    enableTouch(base);\n\n    this.htmlImg.classList.add(CONSTANTS.img);\n    this.background = new Background(base, CONSTANTS.background);\n    this.newSelection = new NewSelection(\n      base,\n      CONSTANTS.new,\n      this.eventBus,\n      this.options.allowNewSelection,\n    );\n    this.selection = new Selection(\n      base,\n      CONSTANTS.selection,\n      this.eventBus,\n      this.options.allowMove,\n    );\n    this.handles = new Handles(\n      base,\n      CONSTANTS.hanleds,\n      this.eventBus,\n      this.options.allowResize,\n      CONSTANTS.handle,\n    );\n    this.isDomCreated = true;\n  }\n\n  private calcContainerProps() {\n    this.real = {\n      width: this.htmlImg.naturalWidth,\n      height: this.htmlImg.naturalHeight,\n    };\n  }\n\n  protected createNewBox() {\n    let startSizeProps = this.options.startSize;\n    if (this.firstInit) {\n      this.firstInit = false;\n      startSizeProps = this.options.firstInitSize;\n    }\n\n    const centered = {\n      x: startSizeProps.centeredX,\n      y: startSizeProps.centeredX,\n    };\n    const allowChange = startSizeProps.allowChange;\n    const realData = convertToRealPx(\n      startSizeProps,\n      this.options.minSize,\n      this.options.maxSize,\n      this.real,\n      this.ratio,\n    );\n    const props = processingInitialProps(\n      realData,\n      this.real,\n      this.options.aspectRatio,\n      allowChange,\n      centered,\n    );\n\n    validateImageSizes(props);\n\n    this.box = new Box(props);\n  }\n\n  private updateRelativeSize() {\n    const { width, height } = this.htmlImg.getBoundingClientRect();\n    if (this.htmlImg.offsetWidth === 0 || this.htmlImg.offsetHeight === 0) {\n      this.relative = { width: this.real.width, height: this.real.height };\n    } else {\n      this.relative = { width, height };\n    }\n\n    this.ratio = {\n      width: this.relative.width / this.real.width,\n      height: this.relative.height / this.real.height,\n    };\n  }\n\n  private changeStatus(status: Status) {\n    this.status = status;\n    if (this.htmlImg) {\n      this.setDataset(CONSTANTS.valueStatus, status);\n    }\n  }\n\n  /**\n   * Draw visuals (border, handles, etc) for the current box.\n   */\n  private redraw() {\n    const box = this.box.getValueRelative(this.ratio);\n\n    this.selection.transform(box);\n    this.background.transform(box);\n    this.handles.transform(box);\n  }\n\n  private event({ type, data }: TrueCropperCoreCallbackEvent) {\n    switch (type) {\n      case \"handlestart\":\n        this.onHandleMoveStart(data);\n        break;\n      case \"handlemove\":\n        this.onHandleMoveMoving(data);\n        break;\n      case \"handleend\":\n        this.onHandleMoveEnd();\n        break;\n      case \"regionstart\":\n        this.onRegionMoveStart(data);\n        break;\n      case \"regionmove\":\n        this.onRegionMoveMoving(data);\n        break;\n      case \"regionend\":\n        this.onRegionMoveEnd();\n        break;\n      case \"createnewbox\":\n        return this.tryToCreateNewBox(data);\n    }\n    return true;\n  }\n\n  private tryToCreateNewBox({\n    coordinates,\n    size,\n    leftMovable,\n    topMovable,\n  }: TrueCropperCoreCreateNewBoxEvent[\"data\"]) {\n    // Get handle data based on movable types\n    const handleData = this.handles\n      .handleByMovableType(leftMovable, topMovable)\n      .getData();\n\n    // Calculate new mouse coordinates\n    const boxCoordinates = this.mouseCoordinates(coordinates);\n\n    // Define movement coordinates for x and y axes\n    const newBox = {\n      coordinates: boxCoordinates,\n      size,\n      points: handleData.points,\n    };\n\n    // Move the box using the calculated movement, and if unsuccessful, return false\n    if (!this.box.prepareAndApplyNewSizeAndCoordinates(newBox)) {\n      return false;\n    }\n\n    // Redraw the box\n    this.redraw();\n\n    // Trigger handle move start event\n    this.onHandleMoveStart(handleData);\n\n    // Return true to indicate successful box creation\n    return true;\n  }\n\n  /**\n   * Executes when user begins dragging a handle.\n   */\n  private onHandleMoveStart(data: TrueCropperCoreHandleStartEvent[\"data\"]) {\n    const { x, y } = this.box.getOppositeCornerCoordinates(data.points);\n    this.activeHandle = {\n      x: {\n        left: data.points.x === 0,\n        savedCoordinate: x,\n      },\n      y: {\n        left: data.points.y === 0,\n        savedCoordinate: y,\n      },\n    };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes on handle move. Main logic to manage the movement of handles.\n   */\n  private onHandleMoveMoving(absMouse: TrueCropperCoreHandleMoveEvent[\"data\"]) {\n    // Calculate mouse's position in relative to the container\n    const coordinates = this.mouseCoordinates(absMouse);\n\n    // получаем левый угол и длину\n    // point == 1 значит мы меняем левый угол\n    // point == 0 значит мы меняем правый угол\n    // point == 0.5 значит мы меняем и левый и правый угол (относительно центра).\n    // в этом случае значение x == null (берем из текещего box)\n    const newBox = calculatePointsBasedOnMouse(\n      coordinates,\n      this.activeHandle.x,\n      this.activeHandle.y,\n    );\n    // const aY = calculatePointBasedOnMouse(mouseY, this.activeHandle.y);\n\n    // Disable flipped crop\n    if (!this.options.allowFlip && (newBox.flipped.x || newBox.flipped.y)) {\n      return;\n    }\n\n    if (this.box.prepareAndApplyNewSizeAndCoordinates(newBox.newBox)) {\n      this.redraw();\n    }\n\n    // Trigger callback\n    this.onCropMoveCallback();\n  }\n  /**\n   *  Executes when the handle move ends.\n   */\n  private onHandleMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Executes when user starts moving the crop region.\n   * @param {TrueCropperCoreRegionMoveEvent[\"data\"]} data - contains the raw mouseX, mouseY coordinate\n   */\n  private onRegionMoveStart(absMouse: TrueCropperCoreRegionMoveEvent[\"data\"]) {\n    const { x, y } = this.mouseCoordinates(absMouse);\n    const box = this.box.getCoourdinates();\n\n    this.currentMove = { offsetX: x - box.x, offsetY: y - box.y };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes when user moves the crop region.\n   */\n  private onRegionMoveMoving(absMouse: TrueCropperCoreRegionMoveEvent[\"data\"]) {\n    const { offsetX, offsetY } = this.currentMove;\n\n    // Calculate mouse's position in relative to the container\n    const { x, y } = this.mouseCoordinates(absMouse);\n    this.box.move({ x: x - offsetX, y: y - offsetY });\n\n    // Update visuals\n    this.redraw();\n\n    // Trigger callback\n    this.onCropMoveCallback();\n  }\n\n  /**\n   * Executes when user stops moving the crop region (mouse up).\n   */\n  private onRegionMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Get the real(natural) mouse coordinates within the image container.\n   * @param {number} absMouseX - The absolute X coordinate of the mouse.\n   * @param {number} absMouseY - The absolute Y coordinate of the mouse.\n   * @returns {[number, number]} - The real(natural) X and Y coordinates within the image container.\n   */\n  private mouseCoordinates(absMouse: { x: number; y: number }) {\n    const container = this.htmlImg.getBoundingClientRect();\n    let x = absMouse.x - container.left;\n    let y = absMouse.y - container.top;\n    x = Math.min(Math.max(x, 0), this.relative.width) / this.ratio.width;\n    y = Math.min(Math.max(y, 0), this.relative.height) / this.ratio.height;\n    return { x, y };\n  }\n\n  /**\n   * Sets a value to a dataset attribute of an HTML image element.\n   * @param {string} name - The name of the dataset attribute.\n   * @param {string | number} value - The value to set for the dataset attribute.\n   */\n  private setDataset(name: string, value: string | number) {\n    this.htmlImg.dataset[name] = value.toString();\n  }\n\n  // to helpers\n  private parseCallbackFunctions(\n    optionsProps?: Partial<OptionsPropsValuesType>,\n  ) {\n    if (!optionsProps) {\n      return;\n    }\n    if (optionsProps.onError && typeof optionsProps.onError === \"function\") {\n      this.callbacks.onError = optionsProps.onError;\n    }\n    if (\n      optionsProps.onInitialize &&\n      typeof optionsProps.onInitialize === \"function\"\n    ) {\n      this.callbacks.onInitialize = optionsProps.onInitialize;\n    }\n    if (\n      optionsProps.onCropStart &&\n      typeof optionsProps.onCropStart === \"function\"\n    ) {\n      this.callbacks.onCropStart = optionsProps.onCropStart;\n    }\n    if (\n      optionsProps.onCropMove &&\n      typeof optionsProps.onCropMove === \"function\"\n    ) {\n      this.callbacks.onCropMove = optionsProps.onCropMove;\n    }\n    if (\n      optionsProps.onCropEnd &&\n      typeof optionsProps.onCropEnd === \"function\"\n    ) {\n      this.callbacks.onCropEnd = optionsProps.onCropEnd;\n    }\n  }\n\n  private setDatasetCropValues(value?: BoxProps) {\n    const val = value || this.getValue();\n    this.setDataset(CONSTANTS.valueX, val.x);\n    this.setDataset(CONSTANTS.valueY, val.y);\n    this.setDataset(CONSTANTS.valueWidth, val.width);\n    this.setDataset(CONSTANTS.valueHeight, val.height);\n  }\n}\n"],"names":["BASE_CLASSNAME","CONSTANTS","errorMessage","TrueCropperHtmlError","key","message","__publicField","TrueCropperImageError","data","target","coordinates","targetSize","source","sourceSize","TrueCropperOptionsError","calculatedAspectRatio","aspectRatio","epsilon","name","object","positive","getHTMLelements","element","el","parent","createDiv","className","calculatePointBasedOnMouse","mousePosition","activeHandle","isMouseLeft","flipped","coordinate","size","point","calculatePointsBasedOnMouse","mouse","handleX","handleY","aX","aY","convertToRealPx","start","min","max","real","ratio","toPx","val","type","unit","newMinSize","newMaxSize","processingInitialProps","imgProps","allowChangeStartProps","centered","minSize","adjustSizeProps","maxSize","calculateAdjustedMaxSize","tmp","adjustStartProps","validateImageSizes","checkDimensions","first","second","firstName","secondName","containerToMaxMinSize","newSize","adjustWidth","widthAdjustment","newWidth","adjustHeight","heightAdjustment","newHeight","adjustToAspectRatio","vertiacal","pointX","pointY","sizeProps","defaultVal","maxSizeProps","image","startSize","centeredX","centeredY","startSizeProps","newCoordinates","maxX","maxY","Box","box","points","fromX","fromY","factor","width","height","x","y","newBox","isVerticalMovement","isMultuAxis","enableTouch","simulateMouseEvent","e","event","touch","touchEventToMouseEvent","Background","div","x2","y2","NewSelection","eventBus","enable","onMouseDown","onMouseMove","onMouseUp","mouseX","mouseY","leftMovable","topMovable","Selection","SIZE_UNIT","Status","EPSILON","PREFIX","capitalizeFirstLetter","str","isNil","isNumber","defaultValue","allowZero","isBoolean","isSizeUnit","parseOptions","dataset","options","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","opts","getValue","value","lower","numberValue","checkAspectRatio","a","b","prepareOptions","firstInitSize","Handle","item","handleWidth","handleHeight","left","top","HANDLES","Handles","handleClassName","handle","defaultSize","TrueCropper","optionsProps","img","container","rawOptionsData","error","canvas","ctx","src","mode","calculationMode","values","entries","entry","base","allowChange","realData","props","status","handleData","absMouse","offsetX","offsetY"],"mappings":"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"}