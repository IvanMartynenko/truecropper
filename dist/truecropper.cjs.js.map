{"version":3,"file":"truecropper.cjs.js","sources":["../src/constant.ts","../src/errors/trueCropperHtmlError.ts","../src/errors/trueCropperImageError.ts","../src/errors/trueCropperOptionsError.ts","../src/helpers.ts","../src/box.ts","../src/touch.ts","../src/HTMLelements/background.ts","../src/HTMLelements/newSelection.ts","../src/HTMLelements/selection.ts","../src/types.ts","../src/options.ts","../src/HTMLelements/handle.ts","../src/HTMLelements/handles.ts","../src/trueCropper.ts"],"sourcesContent":["const BASE_CLASSNAME = \"truecropper\" as const;\nexport const CONSTANTS = {\n  base: BASE_CLASSNAME,\n  img: `${BASE_CLASSNAME}__image`,\n  background: `${BASE_CLASSNAME}__background`,\n  new: `${BASE_CLASSNAME}__new-selection`,\n  selection: `${BASE_CLASSNAME}__selection`,\n  handle: `${BASE_CLASSNAME}__handle`,\n  hanleds: `${BASE_CLASSNAME}__handles`,\n  valueX: `${BASE_CLASSNAME}X`,\n  valueY: `${BASE_CLASSNAME}Y`,\n  valueWidth: `${BASE_CLASSNAME}Width`,\n  valueHeight: `${BASE_CLASSNAME}Height`,\n  valueStatus: `${BASE_CLASSNAME}Status`,\n  epsilon: 0.05,\n} as const;\n","import { TrueCropperErrorData } from \"types\";\n\n/**\n * Predefined error messages for HTML errors in TrueCropper.\n */\nconst errorMessage = {\n  /**\n   * Error when the target element is not found.\n   */\n  elementNotFound: { text: \"Unable to find element\", id: 0 },\n\n  /**\n   * Error when the image source is not provided.\n   */\n  srcEmpty: { text: \"Image src not provided\", id: 1 },\n\n  /**\n   * Error when the parent element does not contain the required <div> element.\n   */\n  parentNotContainDiv: { text: \"Parent element can be exists\", id: 2 },\n};\n\n/**\n * Represents an HTML error specific to TrueCropper.\n *\n * @extends Error\n */\nexport class TrueCropperHtmlError extends Error {\n  /**\n   * Additional error data.\n   */\n  public data: TrueCropperErrorData;\n  /**\n   * The unique identifier for the error message.\n   */\n  public messageId: number;\n\n  /**\n   * Creates an instance of TrueCropperHtmlError.\n   *\n   * @param key - The key corresponding to a predefined error message.\n   */\n  public constructor(key: keyof typeof errorMessage) {\n    const message = errorMessage[key];\n    super(message.text);\n\n    // Restore prototype chain for custom error subclass.\n    Object.setPrototypeOf(this, TrueCropperHtmlError.prototype);\n\n    this.name = \"TrueCropperHtmlError\";\n    this.data = {};\n    this.messageId = message.id;\n  }\n}","import { TrueCropperErrorData, TrueCropperImageErrorData } from \"../types\";\n\n/**\n * Represents an error related to image processing in TrueCropper.\n *\n * @extends Error\n */\nexport class TrueCropperImageError extends Error {\n  /**\n   * Additional data related to the image error.\n   */\n  public data: TrueCropperErrorData;\n  /**\n   * A unique identifier for the error message.\n   */\n  public messageId: number;\n\n  /**\n   * Creates an instance of TrueCropperImageError.\n   *\n   * @param message - The error message.\n   * @param data - Additional data associated with the image error.\n   * @param messageId - A unique identifier for the error message.\n   */\n  public constructor(\n    message: string,\n    data: TrueCropperImageErrorData,\n    messageId: number,\n  ) {\n    super(message);\n\n    // Restore prototype chain for custom error subclass.\n    Object.setPrototypeOf(this, TrueCropperImageError.prototype);\n\n    this.name = \"TrueCropperImageError\";\n    this.data = {\n      target: data.target,\n      targetCoordinates: data.coordinates ? { ...data.coordinates } : undefined,\n      targetSize: { ...data.targetSize },\n      source: data.source,\n      sourceSize: { ...data.sourceSize },\n    };\n    this.messageId = messageId;\n  }\n\n  /**\n   * Creates a new TrueCropperImageError instance for a start size issue.\n   *\n   * @param target - The target element identifier.\n   * @param coordinates - The coordinates related to the error.\n   * @param targetSize - The dimensions of the target element.\n   * @param source - The source element identifier.\n   * @param sourceSize - The dimensions of the source element.\n   * @returns A new instance of TrueCropperImageError.\n   */\n  public static startSize(\n    target: string,\n    coordinates: { x: number; y: number },\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ): TrueCropperImageError {\n    const message = `The ${target} (${coordinates.x}x${coordinates.y}:${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data, 6);\n  }\n\n  /**\n   * Creates a new TrueCropperImageError instance for a size issue.\n   *\n   * @param target - The target element identifier.\n   * @param targetSize - The dimensions of the target element.\n   * @param source - The source element identifier.\n   * @param sourceSize - The dimensions of the source element.\n   * @returns A new instance of TrueCropperImageError.\n   */\n  public static size(\n    target: string,\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ): TrueCropperImageError {\n    const message = `The ${target} (${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates: undefined,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data, 7);\n  }\n}","import { TrueCropperErrorData } from \"types\";\n\n/**\n * Represents an error related to invalid options in TrueCropper.\n *\n * @extends Error\n */\nexport class TrueCropperOptionsError extends Error {\n  /**\n   * Additional data associated with the options error.\n   */\n  public data: TrueCropperErrorData;\n  /**\n   * A unique identifier for the error message.\n   */\n  public messageId: number;\n\n  /**\n   * Creates an instance of TrueCropperOptionsError.\n   *\n   * @param message - The error message.\n   * @param data - Additional error data.\n   * @param messageId - A unique identifier for the error message.\n   */\n  public constructor(\n    message: string,\n    data: TrueCropperErrorData,\n    messageId: number = 0,\n  ) {\n    super(message);\n\n    // Restore prototype chain for custom error subclass.\n    Object.setPrototypeOf(this, TrueCropperOptionsError.prototype);\n\n    this.name = \"TrueCropperOptionsError\";\n    this.data = data;\n    this.messageId = messageId;\n  }\n\n  /**\n   * Factory method for creating an options error related to aspect ratio mismatch.\n   *\n   * @param name - The name of the property or dimension with the aspect ratio issue.\n   * @param calculatedAspectRatio - The calculated aspect ratio based on dimensions.\n   * @param aspectRatio - The expected aspect ratio.\n   * @param epsilon - The tolerance value for aspect ratio differences.\n   * @returns A new instance of TrueCropperOptionsError with aspect ratio error details.\n   */\n  public static aspectRatio(\n    name: string,\n    calculatedAspectRatio: number,\n    aspectRatio: number,\n    epsilon: number,\n  ): TrueCropperOptionsError {\n    const message = `The specified aspect ratio (${aspectRatio}) and calculated ${name} dimensions (width/height = ${calculatedAspectRatio}) are greater than (${epsilon}). This might be due to a rounding error on the server side or incorrect minimum sizes.`;\n    return new this(message, { name }, 5);\n  }\n\n  public static widthIsNull(name: string): TrueCropperOptionsError {\n    const message = `The width of (${name}) is null`;\n    return new this(message, { name }, 8);\n  }\n\n  public static heightIsNull(name: string): TrueCropperOptionsError {\n    const message = `The height of (${name}) is null`;\n    return new this(message, { name }, 9);\n  }\n\n  public static badSizeOfPercent(name: string): TrueCropperOptionsError {\n    const message = `The percent values of (${name}) > 100`;\n    return new this(message, { name }, 10);\n  }\n\n  /**\n   * Factory method for creating a generic options error.\n   *\n   * @param name - The name of the option.\n   * @param object - The expected or disallowed object description.\n   * @param positive - If true, indicates the option must be the specified object; if false, indicates it must not be.\n   * @returns A new instance of TrueCropperOptionsError with generic error details.\n   */\n  public static new(name: string, object: string, positive = true): TrueCropperOptionsError {\n    const messageId = positive ? 3 : 4;\n    const message = positive\n      ? `${name} must be ${object}`\n      : `${name} must not be ${object}`;\n    return new this(message, { name, object }, messageId);\n  }\n}\n","import { CONSTANTS } from \"./constant\";\nimport { TrueCropperHtmlError, TrueCropperImageError } from \"./errors\";\nimport {\n  TrueCropperActiveHandleData,\n  TrueCropperCoordinates,\n  TrueCropperImageElementOrSelector,\n} from \"./types\";\nimport {\n  TrueCropperBoxInitConfig,\n  TrueCropperContainerSizeConstraints,\n  TrueCropperDragData,\n  TrueCropperSize,\n  TrueCropperSizeUnit,\n  TrueCropperSizeWithUnit,\n  TrueCropperInitialSize,\n} from \"./types\";\n\n/**\n * Retrieves HTML elements based on the provided element query or type.\n *\n * @param {TrueCropperImageElementOrSelector} element - The element query or type.\n * @returns {[HTMLImageElement, HTMLDivElement]} The retrieved image element and its parent div.\n */\nexport const getHTMLelements = (\n  element: TrueCropperImageElementOrSelector,\n) => {\n  let el = null;\n  if (typeof element === \"string\") {\n    el = document.querySelector(element);\n    if (el === null) {\n      throw new TrueCropperHtmlError(\"elementNotFound\");\n    }\n  } else {\n    el = element;\n  }\n  if (!(el instanceof HTMLImageElement)) {\n    throw new TrueCropperHtmlError(\"srcEmpty\");\n  }\n  // if (el.getAttribute(\"src\") === null) {\n  //   throw new TrueCropperHtmlError(\"srcEmpty\");\n  // }\n  let parent: HTMLDivElement | null = el.parentElement as HTMLDivElement;\n  if (!parent) {\n    throw new TrueCropperHtmlError(\"parentNotContainDiv\");\n  }\n  if (!parent.classList.contains(CONSTANTS.base)) {\n    parent = null;\n  }\n  return [el, parent] as const;\n};\n\n/**\n * Creates a new div element with the specified class name and appends it to a parent element if provided.\n *\n * @param {string} className - The class name for the new div element.\n * @param {HTMLElement | undefined} parent - The optional parent element to append the new div to.\n * @returns {HTMLDivElement} The newly created div element.\n */\nexport const createDiv = (\n  className: string,\n  parent: HTMLElement | undefined = undefined,\n) => {\n  const el = document.createElement(\"div\");\n  el.className = className;\n  if (parent) {\n    parent.appendChild(el);\n  }\n  return el;\n};\n\n/**\n * Calculate point based on mouse position and active handle\n * @param {number} mouse - Current mouse position\n * @param {TrueCropperActiveHandleData} handle - Active handle data\n * @returns {Object} - Object containing flipped flag and data with values and new point\n */\nconst calculatePointBasedOnMouse = (\n  mousePosition: number,\n  activeHandle: TrueCropperActiveHandleData,\n) => {\n  // If handle is not active, return points\n  if (activeHandle.savedCoordinate < 0) {\n    return { flipped: false, coordinate: null, size: null, point: 0.5 };\n  }\n\n  // Determine if mouse is to the left of the saved coordinate\n  const isMouseLeft = mousePosition < activeHandle.savedCoordinate;\n\n  // Check if handle is flipped\n  const flipped = activeHandle.left !== isMouseLeft;\n  const coordinate = activeHandle.savedCoordinate;\n  const size = Math.abs(activeHandle.savedCoordinate - mousePosition);\n  const point = Number(isMouseLeft);\n\n  return {\n    flipped,\n    coordinate,\n    size,\n    point,\n  };\n};\n\n/**\n * Calculates the points based on the mouse coordinates and handles.\n *\n * @param {TrueCropperCoordinates} mouse - The mouse coordinates.\n * @param {TrueCropperActiveHandleData} handleX - The handle for the X coordinate.\n * @param {TrueCropperActiveHandleData} handleY - The handle for the Y coordinate.\n * @returns {Object} The calculated points based on the mouse and handles.\n */\nexport const calculatePointsBasedOnMouse = (\n  mouse: TrueCropperCoordinates,\n  handleX: TrueCropperActiveHandleData,\n  handleY: TrueCropperActiveHandleData,\n) => {\n  const aX = calculatePointBasedOnMouse(mouse.x, handleX);\n  const aY = calculatePointBasedOnMouse(mouse.y, handleY);\n  return {\n    flipped: { x: aX.flipped, y: aY.flipped },\n    newBox: {\n      coordinates: { x: aX.coordinate, y: aY.coordinate },\n      size: { width: aX.size, height: aY.size },\n      points: { x: aX.point, y: aY.point },\n    },\n  };\n};\n\n/**\n * Converts sizes from real or relative or percent units to real pixel values based on provided parameters.\n * @param {TrueCropperInitialSize} start The starting size in real or relative or percent units.\n * @param {TrueCropperSizeWithUnit} min The minimum size in real or relative or percent units.\n * @param {TrueCropperSizeWithUnit} max The maximum size in real orrelative or percent units.\n * @param {TrueCropperSize} real The real image size in pixels. Need for percent values.\n * @param {TrueCropperSize} ratio The ratio of conversion from relative to real pixels.\n * @returns Object containing converted sizes.\n */\nexport const convertToRealPx = (\n  start: TrueCropperInitialSize,\n  min: TrueCropperSizeWithUnit,\n  max: TrueCropperSizeWithUnit,\n  real: TrueCropperSize,\n  ratio: TrueCropperSize,\n) => {\n  // Function to convert a value from relative or percent units to real pixels\n  const toPx = (val: number, type: keyof TrueCropperSize, unit: TrueCropperSizeUnit) => {\n    if (unit === \"relative\") {\n      return val * ratio[type];\n    }\n    if (unit === \"percent\") {\n      return val >= 1 ? real[type] * (val / 100) : real[type] * val;\n    }\n    // If the unit is already in pixels, return the value as is\n    return val;\n  };\n\n  const newMinSize = {\n    width: toPx(min.width, \"width\", min.unit),\n    height: toPx(min.height, \"height\", min.unit),\n  };\n  const newMaxSize = {\n    width: toPx(max.width, \"width\", max.unit),\n    height: toPx(max.height, \"height\", max.unit),\n  };\n  // Convert starting coordinates to real pixel values\n  const coordinates = {\n    x: toPx(start.x, \"width\", start.unit),\n    y: toPx(start.y, \"height\", start.unit),\n  };\n  // Convert starting size to real pixel values\n  const size = {\n    width: toPx(start.width, \"width\", start.unit),\n    height: toPx(start.height, \"height\", start.unit),\n  };\n  return { coordinates, size, minSize: newMinSize, maxSize: newMaxSize };\n};\n\n/**\n * Processes the initial props for the TrueCropper instance.\n *\n * @param {ReturnType<typeof convertToRealPx>} data - The converted real pixel data.\n * @param {TrueCropperSize} imgProps - The image size.\n * @param {number} aspectRatio - The aspect ratio.\n * @param {boolean} allowChangeStartProps - Flag indicating if start props can be changed.\n * @param {{ x: boolean; y: boolean }} centered - Flag indicating start props coordinates can be changed.\n * @returns {TrueCropperBoxInitConfig} The processed initial props.\n */\nexport const processingInitialProps = (\n  data: ReturnType<typeof convertToRealPx>,\n  imgProps: TrueCropperSize,\n  aspectRatio: number,\n  epsilon: number,\n  allowChangeStartProps: boolean,\n  centered: { x: boolean; y: boolean },\n): TrueCropperBoxInitConfig => {\n  const minSize = adjustSizeProps(\n    data.minSize,\n    { width: 1, height: 1 },\n    aspectRatio,\n  );\n  let maxSize = adjustSizeProps(data.maxSize, imgProps, aspectRatio);\n  let size = adjustSizeProps(data.size, imgProps, aspectRatio);\n\n  maxSize = calculateAdjustedMaxSize(maxSize, imgProps, aspectRatio);\n\n  let coordinates = data.coordinates;\n  if (allowChangeStartProps) {\n    const tmp = adjustStartProps(\n      coordinates,\n      size,\n      minSize,\n      maxSize,\n      imgProps,\n      aspectRatio,\n      centered.x,\n      centered.y,\n    );\n    coordinates = tmp.coordinates;\n    size = tmp.size;\n  }\n\n  return { coordinates, size, minSize, maxSize, imgProps, aspectRatio, epsilon };\n};\n\n/**\n * Validates the image sizes based on various criteria.\n *\n * @param {TrueCropperBoxInitConfig} options - The box initialization interface.\n */\nexport const validateImageSizes = ({\n  coordinates,\n  minSize,\n  maxSize,\n  size,\n  imgProps,\n}: TrueCropperBoxInitConfig) => {\n  const checkDimensions = (\n    first: TrueCropperSize,\n    second: TrueCropperSize,\n    firstName: string,\n    secondName: string,\n  ) => {\n    if (first.width > second.width || first.height > second.height) {\n      throw TrueCropperImageError.size(firstName, first, secondName, second);\n    }\n  };\n\n  // Perform size validations\n  // Check minimum size dimensions\n  checkDimensions(minSize, imgProps, \"minSize\", \"imageSize\");\n  // Validate if the minimum size exceeds the maximum size\n  checkDimensions(minSize, maxSize, \"minSize\", \"maxSize\");\n  // Check start size dimensions\n  checkDimensions(minSize, size, \"minSize\", \"startSize\");\n  if (\n    coordinates.x + size.width > imgProps.width ||\n    coordinates.y + size.height > imgProps.height\n  ) {\n    throw TrueCropperImageError.startSize(\n      \"startSize\",\n      coordinates,\n      size,\n      \"imageSize\",\n      imgProps,\n    );\n  }\n};\n\n/**\n * Converts the container size to the maximum and minimum size.\n *\n * @param {TrueCropperContainerSizeConstraints} options - The container size and constraints.\n * @returns {TrueCropperSize} The new size after applying maximum and minimum constraints.\n */\nexport const containerToMaxMinSize = ({\n  size,\n  minSize,\n  maxSize,\n  aspectRatio,\n}: TrueCropperContainerSizeConstraints) => {\n  const newSize = { ...size };\n  if (maxSize) {\n    if (newSize.width > maxSize.width) {\n      newSize.width = maxSize.width;\n      newSize.height = aspectRatio\n        ? maxSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height > maxSize.height) {\n      newSize.width = aspectRatio\n        ? maxSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = maxSize.height;\n    }\n  }\n\n  if (minSize) {\n    if (newSize.width < minSize.width) {\n      newSize.width = minSize.width;\n      newSize.height = aspectRatio\n        ? minSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height < minSize.height) {\n      newSize.width = aspectRatio\n        ? minSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = minSize.height;\n    }\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the width of a size nox based on a width adjustment, a point, and an aspect ratio.\n * @param {number} widthAdjustment The amount to adjust the width by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {TrueCropperSize} The adjusted size box.\n */\nconst adjustWidth = (\n  widthAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): TrueCropperSize => {\n  const newWidth = widthAdjustment * point;\n  return { width: newWidth, height: newWidth / aspectRatio };\n};\n\n/**\n * Adjusts the height of a size box based on a height adjustment, a point, and an aspect ratio.\n * @param {number} heightAdjustment The amount to adjust the height by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {Size} The adjusted size box.\n */\nconst adjustHeight = (\n  heightAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): TrueCropperSize => {\n  const newHeight = heightAdjustment * point;\n  return { width: newHeight * aspectRatio, height: newHeight };\n};\n\n/**\n * Adjusts a size box to match a specified aspect ratio.\n * @param {TrueCropperDragData} data The data box containing the size, coordinates, and points.\n * @param {TrueCropperSize} maxSize The maximum size of the box.\n * @param {TrueCropperSize} minSize\n * @param {number} aspectRatio The aspect ratio to adjust to.\n * @returns The adjusted size box.\n */\nexport const adjustToAspectRatio = (\n  data: TrueCropperDragData,\n  maxSize: TrueCropperSize,\n  aspectRatio: number,\n): TrueCropperSize => {\n  let newSize = { ...data.size };\n  if (aspectRatio === 0) {\n    return newSize;\n  }\n\n  const vertiacal = data.isMultiAxis\n    ? newSize.height * aspectRatio >= newSize.width\n    : data.isVerticalMovement;\n  const pointX = data.points.x === 1 || data.points.x === 0 ? 1 : 2;\n  const pointY = data.points.y === 1 || data.points.y === 0 ? 1 : 2;\n  if (vertiacal) {\n    const height = newSize.height;\n    newSize = { width: height * aspectRatio, height: height };\n  } else {\n    const width = newSize.width;\n    newSize = { width: width, height: width / aspectRatio };\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width\n  if (\n    data.coordinates.x + newSize.width * (1 - data.points.x) >\n    maxSize.width\n  ) {\n    newSize = adjustWidth(\n      maxSize.width - data.coordinates.x,\n      pointX,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height\n  if (\n    data.coordinates.y + newSize.height * (1 - data.points.y) >\n    maxSize.height\n  ) {\n    newSize = adjustHeight(\n      maxSize.height - data.coordinates.y,\n      pointY,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width (left)\n  if (data.coordinates.x - newSize.width * data.points.x < 0) {\n    newSize = adjustWidth(data.coordinates.x, pointX, aspectRatio);\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height (top)\n  if (data.coordinates.y - newSize.height * data.points.y < 0) {\n    newSize = adjustHeight(data.coordinates.y, pointY, aspectRatio);\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the size properties by removing empty values and adjusting based on aspect ratio.\n *\n * @param {TrueCropperSize} sizeProps - The size properties to adjust.\n * @param {TrueCropperSize} defaultVal - The default size values.\n * @param {number} aspectRatio - The aspect ratio to consider.\n * @returns {TrueCropperSize} The adjusted size.\n */\nconst adjustSizeProps = (\n  sizeProps: TrueCropperSize,\n  defaultVal: TrueCropperSize,\n  aspectRatio: number,\n): TrueCropperSize => {\n  const size = { ...sizeProps };\n  // Adjust size based on aspect ratio if necessary\n  if (aspectRatio && !size.width && !size.height) {\n    if (aspectRatio > 1) {\n      size.height = defaultVal.height;\n    } else {\n      size.width = defaultVal.width;\n    }\n  }\n\n  if (!size.width) {\n    size.width = aspectRatio ? size.height * aspectRatio : defaultVal.width;\n  }\n\n  if (!size.height) {\n    size.height = aspectRatio ? size.width / aspectRatio : defaultVal.height;\n  }\n\n  return size;\n};\n\n/**\n * Calculates the adjusted maximum size based on image size and aspect ratio.\n *\n * @param {TrueCropperSize} maxSizeProps - The maximum size properties.\n * @param {TrueCropperSize} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @returns {TrueCropperSize} The calculated maximum size.\n */\nconst calculateAdjustedMaxSize = (\n  maxSizeProps: TrueCropperSize,\n  image: TrueCropperSize,\n  aspectRatio: number,\n) => {\n  let maxSize = { ...maxSizeProps };\n  if (aspectRatio) {\n    if (maxSize.width > maxSize.height * aspectRatio) {\n      maxSize.width = maxSize.height * aspectRatio;\n    } else {\n      maxSize.height = maxSize.width / aspectRatio;\n    }\n  }\n  // Adjust maximum size if necessary\n  maxSize = containerToMaxMinSize({\n    size: maxSize,\n    maxSize: image,\n    aspectRatio,\n  });\n  return maxSize;\n};\n\n/**\n * Adjusts the start coordinates and size based on constraints and centering options.\n *\n * @param {TrueCropperCoordinates} coordinates - The initial coordinates.\n * @param {TrueCropperSize} startSize - The initial start size.\n * @param {TrueCropperSize} minSize - The minimum size constraints.\n * @param {TrueCropperSize} maxSize - The maximum size constraints.\n * @param {TrueCropperSize} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @param {boolean} centeredX - Flag for centering horizontally.\n * @param {boolean} centeredY - Flag for centering vertically.\n * @returns {AdjustedStartProps} The adjusted start coordinates and size.\n */\nconst adjustStartProps = (\n  coordinates: TrueCropperCoordinates,\n  startSize: TrueCropperSize,\n  minSize: TrueCropperSize,\n  maxSize: TrueCropperSize,\n  image: TrueCropperSize,\n  aspectRatio: number,\n  centeredX: boolean,\n  centeredY: boolean,\n) => {\n  const startSizeProps = { ...startSize };\n  const newCoordinates = { ...coordinates };\n\n  const maxX = Math.min(maxSize.width, image.width - coordinates.x);\n  const maxY = Math.min(maxSize.height, image.height - coordinates.y);\n  // Adjust maximum size if necessary\n  const newSize = containerToMaxMinSize({\n    size: startSizeProps,\n    maxSize: { width: maxX, height: maxY },\n    minSize,\n    aspectRatio,\n  });\n  startSizeProps.width = newSize.width;\n  startSizeProps.height = newSize.height;\n\n  newCoordinates.x = centeredX\n    ? (image.width - startSizeProps.width) / 2\n    : coordinates.x;\n  newCoordinates.y = centeredY\n    ? (image.height - startSizeProps.height) / 2\n    : coordinates.y;\n\n  return { coordinates: newCoordinates, size: startSizeProps };\n};\n","import {\n  TrueCropperBoxInitConfig,\n  TrueCropperBoxProps,\n  TrueCropperCoordinates,\n  TrueCropperNullableBoxData,\n  TrueCropperDragData,\n  TrueCropperPoints,\n  TrueCropperSize,\n} from \"./types\";\nimport { adjustToAspectRatio, containerToMaxMinSize } from \"./helpers\";\n\n/**\n * Box component\n */\nexport default class Box {\n  private coordinates: TrueCropperCoordinates;\n  private size: TrueCropperSize;\n  private minSize: TrueCropperSize;\n  private maxSize: TrueCropperSize;\n  private imgSize: TrueCropperSize;\n  private aspectRatio: number;\n  private epsilon: number;\n\n  /**\n   * Creates a new Box instance.\n   * @constructor\n   * @param {TrueCropperBoxInitConfig} - Initialization parameters.\n   */\n  public constructor({\n    coordinates,\n    size,\n    minSize,\n    maxSize,\n    imgProps,\n    aspectRatio,\n    epsilon,\n  }: TrueCropperBoxInitConfig) {\n    this.coordinates = { ...coordinates };\n    this.size = { ...size };\n    this.minSize = { ...minSize };\n    this.maxSize = { ...maxSize };\n    this.imgSize = { ...imgProps };\n    this.aspectRatio = aspectRatio;\n    this.epsilon = epsilon;\n  }\n\n  /**\n   * Sets the value of coordinates and size properties based on the provided BoxProps object.\n   * @param {TrueCropperBoxProps} box - The BoxProps object containing x, y, width, and height properties.\n   * @returns {void}\n   */\n  public setValue(box: TrueCropperBoxProps) {\n    if (box.width < this.minSize.width || box.height < this.minSize.height) {\n      return { ok: false, message: 'Crop region is smaller than the minimum allowed size.' };\n    }\n    if (box.width > this.maxSize.width || box.height > this.maxSize.height) {\n      return { ok: false, message: 'Crop region exceeds the maximum allowed size.' };\n    }\n    if (this.aspectRatio && box.width / box.height - this.aspectRatio > this.epsilon) {\n      return { ok: false, message: 'Crop region does not match the required aspect ratio.' };\n    }\n    if (box.x < 0 || box.x > this.imgSize.width || box.y < 0 || box.y > this.imgSize.height) {\n      return { ok: false, message: 'Crop region is positioned outside the image boundaries.' };\n    }\n    if (box.x + box.width > this.imgSize.width || box.y + box.height > this.imgSize.height) {\n      return { ok: false, message: 'Crop region extends beyond the image boundaries.' };\n    }\n\n    this.coordinates = { x: box.x, y: box.y };\n    this.size = { width: box.width, height: box.height };\n    return { ok: true, message: 'success' };\n  }\n\n  /**\n   * Moves the box to the specified coordinates within the boundaries of the image.\n   * @param {TrueCropperCoordinates} coordinates - The new x and y coordinates for the box.\n   * @returns {void}\n   */\n  public move(coordinates: TrueCropperCoordinates) {\n    // Ensure box is within the boundaries\n    this.coordinates.x = Math.min(\n      Math.max(coordinates.x, 0),\n      this.imgSize.width - this.size.width,\n    );\n    this.coordinates.y = Math.min(\n      Math.max(coordinates.y, 0),\n      this.imgSize.height - this.size.height,\n    );\n  }\n\n  /**\n   * Resizes the box to a new size.\n   * @param {TrueCropperSize} size - The new size for the box.\n   * @param {TrueCropperPoints} points - The relative points for resizing.\n   * @returns {void}\n   */\n  public resize(size: TrueCropperSize, points: TrueCropperPoints) {\n    if (points.x < 0 || points.x > 1 || points.y < 0 || points.y > 1) {\n      return { ok: false, message: 'Point coordinates must be within the range of 0 to 1.' };\n    }\n    const fromX = this.coordinates.x + this.size.width * points.x;\n    const fromY = this.coordinates.y + this.size.height * points.y;\n\n\n    const x = fromX - size.width * points.x;\n    const y = fromY - size.height * points.y;\n\n\n    return this.setValue({ x, y, width: size.width, height: size.height });\n  }\n\n  /**\n   * Scales the box by a factor and relative points.\n   * @param {number} factor - The scaling factor.\n   * @param {TrueCropperPoints} points - The relative points for scaling.\n   * @returns {void}\n   */\n  public scale(factor: number, points: TrueCropperPoints) {\n    const width = this.size.width * factor;\n    const height = this.size.height * factor;\n    return this.resize({ width, height }, points);\n  }\n\n  /**\n   * Retrieves the current dimensions of the box.\n   * @returns {TrueCropperSize} The width and height of the box.\n   */\n  public getBoxSize() {\n    return { ...this.imgSize };\n  }\n\n  /**\n   * Retrieves the current coordinates of the box.\n   * @returns {TrueCropperCoordinates} The current x and y coordinates of the box.\n   */\n  public getCoourdinates(): TrueCropperCoordinates {\n    return { x: this.coordinates.x, y: this.coordinates.y };\n  }\n\n  /**\n   * Retrieves the current box.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValue(): TrueCropperBoxProps {\n    return {\n      x: this.coordinates.x,\n      y: this.coordinates.y,\n      width: this.size.width,\n      height: this.size.height,\n    };\n  }\n\n  /**\n   * Retrieves the current real(natural) value of the box including coordinates, width, and height.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValueReal(): TrueCropperBoxProps {\n    return this.getValue();\n  }\n\n  /**\n   * Retrieves the current value of the box relative to a specified width and height.\n   * @param {TrueCropperSize} size - The width and height for calculating relative values.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box relative to the specified width and height.\n   */\n  public getValueRelative({ width, height }: TrueCropperSize): TrueCropperBoxProps {\n    return {\n      x: this.coordinates.x * width,\n      y: this.coordinates.y * height,\n      width: this.size.width * width,\n      height: this.size.height * height,\n    };\n  }\n\n  /**\n   * Retrieves the current value of the box as a percentage of the image size.\n   * @returns {TrueCropperBoxProps} The current x and y coordinates, width, and height of the box as a percentage of the image size.\n   */\n  public getValuePercent(): TrueCropperBoxProps {\n    return {\n      x: (this.coordinates.x / this.imgSize.width) * 100,\n      y: (this.coordinates.y / this.imgSize.height) * 100,\n      width: (this.size.width / this.imgSize.width) * 100,\n      height: (this.size.height / this.imgSize.height) * 100,\n    };\n  }\n\n  /**\n   * Calculates the coordinates of the opposite corner of the box based on relative points.\n   * @param {TrueCropperPoints} points - The relative points determining the opposite corner.\n   * @returns {TrueCropperCoordinates} The calculated x and y coordinates of the opposite corner.\n   */\n  public getOppositeCornerCoordinates(points: TrueCropperPoints): TrueCropperCoordinates {\n    const x =\n      points.x === 0.5\n        ? -1\n        : this.coordinates.x + this.size.width * (1 - points.x);\n    const y =\n      points.y === 0.5\n        ? -1\n        : this.coordinates.y + this.size.height * (1 - points.y);\n    return { x, y };\n  }\n\n  /**\n   * Prepares and applies new size and coordinates for the box based on the provided data.\n   * @param {TrueCropperNullableBoxData} newBox - The new box data to apply.\n   * @returns {boolean} Returns true if the new size and coordinates were successfully applied, false otherwise.\n   */\n  public prepareAndApplyNewSizeAndCoordinates(newBox: TrueCropperNullableBoxData) {\n    const data = this.prepareSizeAndCoordinates(newBox);\n    if (data.size.width === 0 || data.size.height === 0) {\n      return false;\n    }\n\n    const size = this.adjustAndCalculateSize(data);\n    const coordinates = this.adjustAndCalculateCoordinate(\n      data.coordinates,\n      size,\n      data.points,\n    );\n\n    // need for allowFlip combination with minSize\n    if (coordinates.x < 0 || coordinates.x + size.width > this.imgSize.width || coordinates.y < 0 || coordinates.y + size.height > this.imgSize.height) {\n      return false;\n    }\n\n    this.size = size;\n    this.coordinates = coordinates;\n\n    return true;\n  }\n\n  /**\n   * Prepares and calculates the size and coordinates for the new box based on the provided data.\n   * @param {TrueCropperNullableBoxData} newBox - The new box data to calculate size and coordinates for.\n   * @returns {TrueCropperDragData} An object containing the calculated size, coordinates, and other relevant properties.\n   */\n  private prepareSizeAndCoordinates(newBox: TrueCropperNullableBoxData): TrueCropperDragData {\n    const size = {\n      width: newBox.size.width ?? this.size.width,\n      height: newBox.size.height ?? this.size.height,\n    };\n    const coordinates = {\n      x: newBox.coordinates.x ?? this.coordinates.x + this.size.width / 2,\n      y: newBox.coordinates.y ?? this.coordinates.y + this.size.height / 2,\n    };\n    const isVerticalMovement = newBox.coordinates.y !== null;\n    const isMultiAxis = isVerticalMovement && newBox.coordinates.x !== null;\n    return {\n      size,\n      coordinates,\n      isVerticalMovement,\n      isMultiAxis,\n      points: newBox.points,\n    };\n  }\n\n  /**\n   * Adjusts and calculates the size based on aspect ratio and constraints for the new box.\n   * @param {TrueCropperDragData} data - The data containing coordinates, size, and other parameters for adjustment.\n   * @returns {TrueCropperSize} The adjusted size within the constraints of aspect ratio, min size, and max size.\n   */\n  private adjustAndCalculateSize(data: TrueCropperDragData): TrueCropperSize {\n    const size = adjustToAspectRatio(data, this.imgSize, this.aspectRatio);\n    const value = containerToMaxMinSize({\n      size,\n      minSize: this.minSize,\n      maxSize: this.maxSize,\n      aspectRatio: this.aspectRatio,\n    });\n    return value;\n  }\n\n  /**\n   * Adjusts and calculates the new coordinates based on the input coordinates, size, and points.\n   * @param {TrueCropperCoordinates} coordinates - The original coordinates.\n   * @param {TrueCropperSize} size - The size to adjust the coordinates.\n   * @param {TrueCropperPoints} points - The points to calculate the adjustment.\n   * @returns {TrueCropperCoordinates} The adjusted coordinates based on the size and points.\n   */\n  private adjustAndCalculateCoordinate(\n    coordinates: TrueCropperCoordinates,\n    size: TrueCropperSize,\n    points: TrueCropperPoints,\n  ): TrueCropperCoordinates {\n    return {\n      x: coordinates.x - size.width * points.x,\n      y: coordinates.y - size.height * points.y,\n    };\n  }\n}\n","/**\n * Enables support for touch devices by translating touch events to mouse events.\n */\n\n/**\n * Binds an element's touch events to be simulated as mouse events.\n * @param {HTMLDivElement} element - The element to bind touch events to.\n */\nexport default function enableTouch(element: HTMLDivElement) {\n  element.addEventListener(\"touchstart\", simulateMouseEvent);\n  element.addEventListener(\"touchend\", simulateMouseEvent);\n  element.addEventListener(\"touchmove\", simulateMouseEvent);\n}\n\n/**\n * Translates a touch event to a mouse event.\n * @param {Event} e - The touch event to be translated.\n */\nfunction simulateMouseEvent(e: Event) {\n  e.preventDefault();\n  const event = e as TouchEvent;\n  const touch = event.changedTouches[0];\n\n  touch.target.dispatchEvent(\n    new MouseEvent(touchEventToMouseEvent(event.type), {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      screenX: touch.screenX,\n      screenY: touch.screenY,\n    }),\n  );\n}\n\n/**\n * SubFunction to translates a touch type event to a mouse event\n * @param {string} type - The type of touch event to be translated.\n */\nfunction touchEventToMouseEvent(type: string) {\n  switch (type) {\n    case \"touchstart\":\n      return \"mousedown\";\n    case \"touchmove\":\n      return \"mousemove\";\n    default: // touchend || touchcanceled\n      return \"mouseup\";\n  }\n}\n","/**\n * Background component for managing overlay elements.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps } from \"../types\";\n\n/**\n * The Background class manages a set of overlay elements (divs) used as a background\n * for cropping functionality. It provides methods to show, hide, remove, and transform\n * the background elements based on the crop box.\n */\nexport default class Background {\n  private nested: HTMLDivElement[] = [];\n\n  /**\n   * Creates an instance of Background.\n   *\n   * @param parent - The parent HTMLDivElement where the background elements will be appended.\n   * @param className - The base CSS class name for the background elements.\n   */\n  public constructor(parent: HTMLDivElement, className: string) {\n    for (let i = 0; i < 4; i++) {\n      const div = createDiv(`${className}-${i}`, parent);\n      this.nested.push(div);\n    }\n  }\n\n  /**\n   * Hides the background elements by setting their display style to \"none\".\n   */\n  public hide(): void {\n    for (const el of this.nested) {\n      el.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Displays the background elements by setting their display style to \"block\".\n   */\n  public show(): void {\n    for (const el of this.nested) {\n      el.style.display = \"block\";\n    }\n  }\n\n  /**\n   * Removes the background elements from the DOM.\n   */\n  public destroy(): void {\n    for (const el of this.nested) {\n      el.remove();\n    }\n  }\n\n  /**\n   * Transforms the background elements based on the provided crop box.\n   *\n   * @param box - An object representing the crop box, including its x and y coordinates and dimensions.\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    const x2 = box.x + box.width;\n    const y2 = box.y + box.height;\n\n    // Top overlay: positioned above the crop box.\n    this.nested[0].style.height = `${box.y}px`;\n    this.nested[0].style.left = `${box.x}px`;\n    this.nested[0].style.right = `calc(100% - ${box.width}px - ${box.x}px)`;\n\n    // Right overlay: positioned to the right of the crop box.\n    this.nested[1].style.left = `${x2}px`;\n\n    // Bottom overlay: positioned below the crop box.\n    this.nested[2].style.left = `${box.x}px`;\n    this.nested[2].style.right = `calc(100% - ${box.width}px - ${box.x}px)`;\n    this.nested[2].style.top = `${y2}px`;\n\n    // Left overlay: positioned to the left of the crop box.\n    this.nested[3].style.width = `${box.x}px`;\n  }\n}\n","/**\n * NewSelection component\n *\n * This component allows the user to create a new crop box by clicking and dragging\n * within the designated area. It listens for mouse events and notifies the parent\n * via an event bus.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperEventHandler } from \"../types\";\n\nexport default class NewSelection {\n  /**\n   * Callback function to communicate events to the parent.\n   */\n  private eventBus: TrueCropperEventHandler;\n  /**\n   * The container element for the new selection.\n   */\n  private el: HTMLDivElement;\n  /**\n   * The starting mouse coordinates when a new selection is initiated.\n   */\n  private startMouse = { mouseX: 0, mouseY: 0 };\n  /**\n   * Flag indicating whether a new crop box has been created.\n   */\n  private newBoxCreated: boolean = false;\n  /**\n   * Reference to the mousedown event listener.\n   */\n  private listener?: (e: MouseEvent) => void;\n\n  /**\n   * Creates a new NewSelection instance.\n   *\n   * @param parent - The parent HTMLDivElement where the new selection element is appended.\n   * @param className - The CSS class name for styling the new selection element.\n   * @param eventBus - A callback function for communicating events (e.g., creating a new box).\n   * @param enable - Determines whether the new selection functionality is enabled.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    this.el = createDiv(className, parent);\n    if (enable) {\n      // Attach initial mousedown listener to initiate new selection.\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Hides the new selection element.\n   */\n  public hide(): void {\n    this.el.style.display = \"none\";\n  }\n\n  /**\n   * Shows the new selection element.\n   */\n  public show(): void {\n    this.el.style.display = \"block\";\n  }\n\n  /**\n   * Removes the new selection element from the DOM and cleans up event listeners.\n   */\n  public destroy(): void {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Creates and returns a mousedown event handler that initiates the new selection process.\n   *\n   * When the user presses the mouse button down, mousemove and mouseup listeners are attached\n   * to track the selection process.\n   *\n   * @returns A mousedown event handler function.\n   */\n  private mouseEvent(): (e: MouseEvent) => void {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      // Attach mousemove and mouseup listeners to the document.\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Save the starting mouse coordinates.\n      this.startMouse = { mouseX: e.clientX, mouseY: e.clientY };\n      this.newBoxCreated = false;\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (this.newBoxCreated) {\n        // Notify parent that the selection is being adjusted.\n        const data = { x: e.clientX, y: e.clientY };\n        this.eventBus({ type: \"handlemove\", data });\n      } else {\n        // Attempt to create a new crop box if the mouse has moved.\n        this.tryToCreateNewBox(e.clientX, e.clientY);\n      }\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      // Remove the document-level mouse event listeners.\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // If a new box was created, notify parent that the selection process has ended.\n      if (this.newBoxCreated) {\n        this.eventBus({ type: \"handleend\" });\n      }\n    };\n\n    return onMouseDown;\n  }\n\n  /**\n   * Attempts to create a new crop box based on the current mouse coordinates.\n   *\n   * This method calculates the new crop box dimensions from the starting mouse position\n   * and the current mouse position, then notifies the parent via the event bus.\n   *\n   * @param mouseX - The current x-coordinate of the mouse.\n   * @param mouseY - The current y-coordinate of the mouse.\n   */\n  private tryToCreateNewBox(mouseX: number, mouseY: number): void {\n    // Do nothing if the mouse hasn't moved.\n    if (mouseX === this.startMouse.mouseX || mouseY === this.startMouse.mouseY) {\n      return;\n    }\n\n    // Determine if the new box is drawn from the left/top or right/bottom.\n    const leftMovable = mouseX < this.startMouse.mouseX;\n    const topMovable = mouseY < this.startMouse.mouseY;\n\n    // Calculate the top-left coordinates and dimensions of the new crop box.\n    const [x, width] = leftMovable\n      ? [mouseX, this.startMouse.mouseX - mouseX]\n      : [this.startMouse.mouseX, mouseX - this.startMouse.mouseX];\n    const [y, height] = topMovable\n      ? [mouseY, this.startMouse.mouseY - mouseY]\n      : [this.startMouse.mouseY, mouseY - this.startMouse.mouseY];\n\n    // Prepare data for the new crop box.\n    const data = {\n      coordinates: { x, y },\n      size: { width, height },\n      leftMovable,\n      topMovable,\n    };\n\n    // Notify parent to create a new crop box and record the result.\n    this.newBoxCreated = this.eventBus({ type: \"createnewbox\", data });\n  }\n}","/**\n * Selection component for crop region interaction.\n *\n * This component represents the crop selection area that the user can drag to move.\n * It handles mouse events and communicates state changes via an event bus.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps, TrueCropperEventHandler } from \"../types\";\n\nexport default class Selection {\n  /**\n   * Callback function to handle events emitted by the selection component.\n   */\n  private eventBus: TrueCropperEventHandler;\n  /**\n   * The DOM element representing the selection area.\n   */\n  private el: HTMLDivElement;\n  /**\n   * Indicates whether the selection is interactive.\n   */\n  private enable: boolean;\n  /**\n   * Reference to the mousedown event listener.\n   */\n  private listener?: (e: MouseEvent) => void;\n\n  /**\n   * Creates a new Selection instance.\n   *\n   * @param parent - The parent HTMLDivElement to which the selection element is appended.\n   * @param className - The CSS class name assigned to the selection element.\n   * @param eventBus - A callback to emit events related to selection interactions.\n   * @param enable - Determines if the selection element should be interactive.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    // Create the selection DOM element.\n    this.el = createDiv(className, parent);\n    this.enable = enable;\n    if (enable) {\n      // Attach the mousedown listener if interaction is enabled.\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.el.style.cursor = \"default\";\n    }\n  }\n\n  /**\n   * Transforms the selection element to match the specified crop box dimensions.\n   *\n   * @param box - An object containing the x, y coordinates and width, height dimensions.\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    this.el.style.transform = `translate(${box.x}px, ${box.y}px)`;\n    this.el.style.width = `${box.width}px`;\n    this.el.style.height = `${box.height}px`;\n  }\n\n  /**\n   * Hides the selection element.\n   */\n  public hide(): void {\n    this.el.style.display = \"none\";\n    this.el.style.cursor = \"default\";\n  }\n\n  /**\n   * Shows the selection element.\n   */\n  public show(): void {\n    this.el.style.display = \"block\";\n    this.el.style.cursor = \"move\";\n  }\n\n  /**\n   * Destroys the selection element by removing it from the DOM and cleaning up event listeners.\n   */\n  public destroy(): void {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Creates and returns a mousedown event handler for the selection element.\n   *\n   * This handler attaches mousemove and mouseup listeners to the document to enable\n   * dragging of the selection element. It emits corresponding events via the event bus.\n   *\n   * @returns A mousedown event handler function.\n   */\n  private mouseEvent(): (e: MouseEvent) => void {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify that the dragging (region start) has begun.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionstart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify that the selection region is being moved.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionmove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify that the dragging (region end) has finished.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionend\", data });\n    };\n\n    return onMouseDown;\n  }\n}","import TrueCropperCore from \"./trueCropper\";\n\n/**\n * Represents an HTMLImageElement or a CSS selector string.\n */\nexport type TrueCropperImageElementOrSelector = HTMLImageElement | string;\n\n/**\n * Array of allowed size units.\n */\nexport const TRUECROPPER_SIZE_UNITS = [\"real\", \"relative\", \"percent\"] as const;\n\n/**\n * A union type representing allowed units for sizing.\n */\nexport type TrueCropperSizeUnit = (typeof TRUECROPPER_SIZE_UNITS)[number];\n\n/**\n * Represents a point in 2D space.\n */\nexport interface TrueCropperCoordinates {\n  /** The x-coordinate. */\n  x: number;\n  /** The y-coordinate. */\n  y: number;\n}\n\n/**\n * Represents directional points used for positioning handles or regions.\n *\n * @remarks\n * - For the x property: use `1` for left, `0` for right, and `0.5` for centered horizontally.\n * - For the y property: use `1` for top, `0` for bottom, and `0.5` for centered vertically.\n */\nexport interface TrueCropperPoints {\n  x: number;\n  y: number;\n}\n\n/**\n * Represents dimensions with width and height.\n */\nexport interface TrueCropperSize {\n  /** The width dimension. */\n  width: number;\n  /** The height dimension. */\n  height: number;\n}\n\n/**\n * Provides a size unit property.\n */\nexport interface TrueCropperUnitProps {\n  /** The unit used for sizing. */\n  unit: TrueCropperSizeUnit;\n}\n\n/**\n * Combines position and size properties.\n */\nexport interface TrueCropperBoxProps extends TrueCropperCoordinates, TrueCropperSize {}\n\n/**\n * Represents a size value along with its associated unit.\n */\nexport interface TrueCropperSizeWithUnit extends TrueCropperSize, TrueCropperUnitProps {}\n\n/**\n * Initial sizing properties used during setup.\n *\n * @remarks\n * The size values (width and height) are optional.\n */\nexport interface TrueCropperInitialSizeProps\n  extends TrueCropperCoordinates,\n    Partial<TrueCropperSize>,\n    TrueCropperUnitProps {}\n\n/**\n * The complete initial size configuration.\n */\nexport interface TrueCropperInitialSize extends TrueCropperCoordinates, TrueCropperSize, TrueCropperUnitProps {\n  /** Whether the crop box is centered horizontally. */\n  centeredX: boolean;\n  /** Whether the crop box is centered vertically. */\n  centeredY: boolean;\n  /** Whether the crop box size can be changed after initialization. */\n  allowChange: boolean;\n}\n\n/**\n * A generic callback type.\n *\n * @param instance - The instance of TrueCropperCore.\n * @param values - The associated values passed to the callback.\n */\nexport type TrueCropperCallback<T, K> = (instance: T, values: K) => void;\n\n/**\n * Callback invoked during cropping events.\n *\n * @see {@link TrueCropperCallback}\n */\nexport type TrueCropperCropCallback = TrueCropperCallback<TrueCropperCore, TrueCropperBoxProps>;\n\n/**\n * Data structure for details about an error during cropping.\n */\nexport interface TrueCropperErrorData {\n  /** The target element identifier (if applicable). */\n  target?: string;\n  /** The size of the target element (if applicable). */\n  targetSize?: TrueCropperSize;\n  /** The coordinates of the target element (if applicable). */\n  targetCoordinates?: TrueCropperCoordinates;\n  /** The source element identifier (if applicable). */\n  source?: string;\n  /** The size of the source element (if applicable). */\n  sourceSize?: TrueCropperSize;\n  /** An optional error name. */\n  name?: string;\n  /** An optional object identifier related to the error. */\n  object?: string;\n}\n\n/**\n * Represents an error that occurred during the cropping process.\n */\nexport interface TrueCropperError {\n  /** The error name. */\n  name: string;\n  /** The error message. */\n  message: string;\n  /** An error message identifier. */\n  messageId: number;\n  /** Additional data related to the error. */\n  data: TrueCropperErrorData;\n}\n\n/**\n * Callback invoked when an error occurs during cropping.\n *\n * @see {@link TrueCropperCallback}\n */\nexport type TrueCropperErrorCallback = TrueCropperCallback<TrueCropperCore, TrueCropperError>;\n\n/**\n * Options to configure the TrueCropper instance.\n */\nexport interface TrueCropperOptions {\n  /** The desired aspect ratio for the crop box. */\n  aspectRatio: number; // [0,1]\n  /** The epsilon value used for calculations (tolerance). */\n  epsilon: number; // > 0\n  /** Maximum allowed size for the crop box. */\n  maxSize: Partial<TrueCropperSizeWithUnit>; // x,y,width,height\n  /** Minimum allowed size for the crop box. */\n  minSize: Partial<TrueCropperSizeWithUnit>; // x,y,width,height\n  /** The starting size properties for the crop box. */\n  startSize: Partial<TrueCropperInitialSizeProps>; // x,y,width,height\n  /** The default size properties for the crop box. */\n  defaultSize: Partial<TrueCropperInitialSizeProps>; // x,y,width,height\n  /** The unit mode to use when returning size values. */\n  returnMode: TrueCropperSizeUnit; // real,persent,relative\n  /** Whether the crop box can be flipped. */\n  allowFlip: boolean;\n  /** Whether a new selection (crop box) can be created. */\n  allowNewSelection: boolean;\n  /** Whether the crop box is movable. */\n  allowMove: boolean;\n  /** Whether the crop box is resizable. */\n  allowResize: boolean;\n  /** Callback invoked upon initialization. */\n  onInitialize: TrueCropperCropCallback;\n  /** Callback invoked when cropping starts. */\n  onCropStart: TrueCropperCropCallback;\n  /** Callback invoked during cropping movement. */\n  onCropChange: TrueCropperCropCallback;\n  /** Callback invoked when cropping ends. */\n  onCropEnd: TrueCropperCropCallback;\n  /** Callback invoked when an error occurs. */\n  onError: TrueCropperErrorCallback;\n}\n\n/* ────── Event Types ────── */\n\n/**\n * Event fired when a handle starts moving.\n */\nexport interface TrueCropperHandleStartEvent {\n  /** The event type identifier. */\n  type: \"handlestart\";\n  /** Data associated with the active handle. */\n  data: TrueCropperActiveHandle;\n}\n\n/**\n * Event fired during handle movement.\n */\nexport interface TrueCropperHandleMoveEvent {\n  /** The event type identifier. */\n  type: \"handlemove\";\n  /** The current coordinates of the handle. */\n  data: TrueCropperCoordinates;\n}\n\n/**\n * Event fired when a handle movement ends.\n */\nexport interface TrueCropperHandleEndEvent {\n  /** The event type identifier. */\n  type: \"handleend\";\n  /** No additional data is provided on handle end. */\n  data?: null;\n}\n\n/**\n * Event fired during region movement (start, move, or end).\n */\nexport interface TrueCropperRegionMoveEvent {\n  /** The event type identifier; can be 'regionstart', 'regionmove', or 'regionend'. */\n  type: \"regionstart\" | \"regionmove\" | \"regionend\";\n  /** The current coordinates of the region. */\n  data: TrueCropperCoordinates;\n}\n\n/**\n * Data structure for creating a new crop box.\n */\nexport interface TrueCropperNewBoxEventData {\n  /** The starting coordinates for the new crop box. */\n  coordinates: TrueCropperCoordinates;\n  /** The initial size for the new crop box. */\n  size: TrueCropperSize;\n  /** Indicates if the left side of the crop box can be moved. */\n  leftMovable: boolean;\n  /** Indicates if the top side of the crop box can be moved. */\n  topMovable: boolean;\n}\n\n/**\n * Event fired when a new crop box is created.\n */\nexport interface TrueCropperNewBoxEvent {\n  /** The event type identifier. */\n  type: \"createnewbox\";\n  /** Data associated with the new crop box. */\n  data: TrueCropperNewBoxEventData;\n}\n\n/**\n * Additional data for active handles.\n */\nexport interface TrueCropperActiveHandleData {\n  /** Indicates if the left side is active. */\n  left: boolean;\n  /** The saved coordinate value used during the handle's movement. */\n  savedCoordinate: number;\n}\n\n/**\n * Represents an active handle with its directional points.\n */\nexport interface TrueCropperActiveHandle {\n  /** The directional points for the active handle. */\n  points: TrueCropperPoints;\n}\n\n/**\n * Union type for all TrueCropper events.\n */\nexport type TrueCropperEvent =\n  | TrueCropperHandleStartEvent\n  | TrueCropperHandleMoveEvent\n  | TrueCropperHandleEndEvent\n  | TrueCropperRegionMoveEvent\n  | TrueCropperNewBoxEvent;\n\n/**\n * The event handler function type for TrueCropper events.\n *\n * @param event - The event object.\n * @returns A boolean indicating whether the event was handled.\n */\nexport type TrueCropperEventHandler = (event: TrueCropperEvent) => boolean;\n\n/* ────── Enums & Callback Collections ────── */\n\n/**\n * The possible statuses of the TrueCropper.\n */\nexport enum TrueCropperStatus {\n  /** The cropper is waiting for initialization. */\n  Waiting = \"waiting\",\n  /** The cropper is ready for user interaction. */\n  Ready = \"ready\",\n  /** The cropper is in the process of reloading. */\n  Reloading = \"reloading\",\n  /** An error has occurred in the cropper. */\n  Error = \"error\",\n}\n\n/**\n * Collection of optional callback handlers for TrueCropper events.\n */\nexport interface TrueCropperCallbacks {\n  /** Callback invoked upon initialization. */\n  onInitialize?: TrueCropperCropCallback;\n  /** Callback invoked when cropping starts. */\n  onCropStart?: TrueCropperCropCallback;\n  /** Callback invoked during cropping changes. */\n  onCropChange?: TrueCropperCropCallback;\n  /** Callback invoked when cropping ends. */\n  onCropEnd?: TrueCropperCropCallback;\n  /** Callback invoked when an error occurs. */\n  onError?: TrueCropperErrorCallback;\n}\n\n/* ────── Additional Data Structures ────── */\n\n/**\n * Defines container size constraints along with its aspect ratio.\n */\nexport interface TrueCropperContainerSizeConstraints {\n  /** The container size. */\n  size: TrueCropperSize;\n  /** The minimum allowed container size (if applicable). */\n  minSize?: TrueCropperSize;\n  /** The maximum allowed container size (if applicable). */\n  maxSize?: TrueCropperSize;\n  /** The aspect ratio of the container. */\n  aspectRatio: number;\n}\n\n/**\n * Error data specific to image issues.\n */\nexport interface TrueCropperImageErrorData {\n  /** The target image identifier. */\n  target: string;\n  /** The coordinates related to the error (if applicable). */\n  coordinates?: TrueCropperCoordinates;\n  /** The size of the target image. */\n  targetSize: TrueCropperSize;\n  /** The source image identifier. */\n  source: string;\n  /** The size of the source image. */\n  sourceSize: TrueCropperSize;\n}\n\n/**\n * Box data that may contain nullable values.\n */\nexport interface TrueCropperNullableBoxData {\n  coordinates: { x: number | null; y: number | null };\n  size: { width: number | null; height: number | null };\n  points: TrueCropperPoints;\n}\n\n/**\n * Data related to dragging or resizing operations.\n */\nexport interface TrueCropperDragData {\n  /** The current coordinates during the drag or resize operation. */\n  coordinates: TrueCropperCoordinates;\n  /** The current size during the drag or resize operation. */\n  size: TrueCropperSize;\n  /** The directional points associated with the operation. */\n  points: TrueCropperPoints;\n  /** Whether the movement is primarily vertical. */\n  isVerticalMovement: boolean;\n  /** Whether the movement affects multiple axes. */\n  isMultiAxis: boolean;\n}\n\n/**\n * Represents the initialization configuration for a crop box.\n */\nexport interface TrueCropperBoxInitConfig {\n  /** The starting coordinates of the crop box. */\n  coordinates: TrueCropperCoordinates;\n  /** The initial size of the crop box. */\n  size: TrueCropperSize;\n  /** The minimum allowed size for the crop box. */\n  minSize: TrueCropperSize;\n  /** The maximum allowed size for the crop box. */\n  maxSize: TrueCropperSize;\n  /** The properties of the image (dimensions) being cropped. */\n  imgProps: TrueCropperSize;\n  /** The desired aspect ratio for the crop box. */\n  aspectRatio: number;\n  /** The epsilon value used for calculations (tolerance). */\n  epsilon: number;\n}\n","/**\n * Parse user options\n */\n\n// Tolerance value for floating-point comparison\n// const EPSILON = 0.05;\n\nimport { CONSTANTS } from \"./constant\";\nimport { TrueCropperOptionsError } from \"./errors\";\nimport { TrueCropperOptions, TRUECROPPER_SIZE_UNITS, TrueCropperSizeUnit } from \"./types\";\n\nconst PREFIX = CONSTANTS.base;\n\n/**\n * Capitalizes the first letter of a string.\n * @param {string} str - The input string.\n * @returns {string} The input string with the first letter capitalized.\n */\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Checks if a value is undefined or null.\n * @param {unknown} val - The value to check.\n * @returns {boolean} True if the value is undefined or null, false otherwise.\n */\nfunction isNil(val: unknown) {\n  return val === undefined || val === null;\n}\n\n/**\n * Checks if a value is a valid number.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {number} defaultValue - The default value to return if val is null or undefined.\n * @param {boolean} [allowZero=false] - Whether to allow zero as a valid number.\n * @returns {number} The valid number or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a number, is NaN, or is not positive.\n */\nfunction isNumber(\n  name: string,\n  val: unknown,\n  defaultValue: number,\n  allowZero: boolean = false,\n  allowFractional: boolean = false,\n) {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"number\") {\n    throw TrueCropperOptionsError.new(name, \"number\");\n  }\n  if (Number.isNaN(val)) {\n    throw TrueCropperOptionsError.new(name, \"NaN\", false);\n  }\n  if (allowZero ? val < 0 : val <= 0) {\n    throw TrueCropperOptionsError.new(name, \"positive\");\n  }\n  if (!allowFractional && val > 0 && val < 1) {\n    throw TrueCropperOptionsError.new(name, \"fractional\");\n  }\n\n  return val;\n}\n\n/**\n * Checks if a value is a valid boolean.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {boolean} defaultVal - The default value to return if val is null or undefined.\n * @returns {boolean} The valid boolean or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a boolean.\n */\nfunction isBoolean(name: string, val: unknown, defaultVal: boolean) {\n  if (isNil(val)) {\n    return defaultVal;\n  }\n  if (typeof val !== \"boolean\") {\n    throw TrueCropperOptionsError.new(name, \"boolean\");\n  }\n  return val;\n}\n\n/**\n * Checks if a value is a valid SizeUnit.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {TrueCropperSizeUnit} defaultValue - The default value to return if val is null or undefined.\n * @returns {TrueCropperSizeUnit} The valid SizeUnit or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a valid SizeUnit.\n */\nfunction isSizeUnit(\n  name: string,\n  val: unknown,\n  defaultValue: TrueCropperSizeUnit,\n): TrueCropperSizeUnit {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"string\" || !TRUECROPPER_SIZE_UNITS.includes(val as TrueCropperSizeUnit)) {\n    throw TrueCropperOptionsError.new(name, \"SizeUnit\");\n  }\n  return val as TrueCropperSizeUnit;\n}\n\n/**\n * Parses the options for the TrueCropper instance.\n * @param {DOMStringMap} dataset - The dataset of the TrueCropper container element.\n * @param {Partial<TrueCropperOptions> | undefined} options - The options object passed to the TrueCropper constructor.\n * @returns {TrueCropperOptions} The parsed options object.\n * @throws {TrueCropperOptionsError} if the options object is not of type 'object'.\n */\nexport const parseOptions = (\n  dataset: DOMStringMap,\n  options: Partial<TrueCropperOptions> | undefined,\n) => {\n  const opts = options || {};\n  if (typeof opts !== \"object\" || opts === null) {\n    throw TrueCropperOptionsError.new(\"options\", \"object\");\n  }\n\n  /**\n   * Retrieves the value for a specific option from the dataset.\n   * @param {string} name - The name of the option.\n   * @param {unknown} val - The value for the options.\n   * @returns {unknown} The parsed value for the options.\n   */\n  const getValue = (name: string, val: unknown) => {\n    // Get the raw value from the dataset\n    const value = dataset[`${PREFIX}${capitalizeFirstLetter(name)}`];\n\n    // If the value is null or undefined, return val\n    if (!value) {\n      return val;\n    }\n\n    const lower = value.toLowerCase();\n    if (lower === \"null\" || lower === \"undefined\" || lower === \"nil\") {\n      return val;\n    }\n\n    // If the value can be parsed as a number, return it as a number\n    // const numberValue = Number.parseFloat(value);\n    // if (numberValue.toString() === value) {\n    //   return numberValue;\n    // }\n    if (value.trim().length !== 0 && !Number.isNaN(Number(value))) {\n      return Number(value);\n    }\n\n    // If the value is \"true\" (case-insensitive), return true\n    if (lower === \"true\") {\n      return true;\n    }\n\n    // If the value is \"false\" (case-insensitive), return false\n    if (lower === \"false\") {\n      return false;\n    }\n\n    // Otherwise, return the value as-is\n    return value;\n  };\n\n  const returnValue = {\n    aspectRatio: getValue(\"aspectRatio\", opts.aspectRatio),\n    epsilon: getValue(\"epsilon\", opts.epsilon),\n    allowFlip: getValue(\"allowFlip\", opts.allowFlip),\n    allowNewSelection: getValue(\"allowNewSelection\", opts.allowNewSelection),\n    allowMove: getValue(\"allowMove\", opts.allowMove),\n    allowResize: getValue(\"allowResize\", opts.allowResize),\n    returnMode: getValue(\"returnMode\", opts.returnMode),\n    minSize: {\n      width: getValue(\"minSizeWidth\", opts.minSize?.width),\n      height: getValue(\"minSizeHeight\", opts.minSize?.height),\n      unit: getValue(\"minSizeUnit\", opts.minSize?.unit),\n    },\n    maxSize: {\n      width: getValue(\"maxSizeWidth\", opts.maxSize?.width),\n      height: getValue(\"maxSizeHeight\", opts.maxSize?.height),\n      unit: getValue(\"maxSizeUnit\", opts.maxSize?.unit),\n    },\n    startSize: {\n      x: getValue(\"startSizeX\", opts.startSize?.x),\n      y: getValue(\"startSizeY\", opts.startSize?.y),\n      width: getValue(\"startSizeWidth\", opts.startSize?.width),\n      height: getValue(\"startSizeHeight\", opts.startSize?.height),\n      unit: getValue(\"startSizeUnit\", opts.startSize?.unit),\n    },\n    defaultSize: {\n      x: getValue(\"defaultSizeX\", opts.defaultSize?.x),\n      y: getValue(\"defaultSizeY\", opts.defaultSize?.y),\n      width: getValue(\"defaultSizeWidth\", opts.defaultSize?.width),\n      height: getValue(\"defaultSizeHeight\", opts.defaultSize?.height),\n      unit: getValue(\"defaultSizeUnit\", opts.defaultSize?.unit),\n    },\n  };\n  if (isNil(returnValue.startSize.x) && isNil(returnValue.startSize.y) && isNil(returnValue.startSize.width) && isNil(returnValue.startSize.height)) {\n    returnValue.startSize = returnValue.defaultSize;\n  }\n  return returnValue;\n};\n\n/**\n * Checks if two numbers are approximately equal within a tolerance.\n * @param {number} a - First number.\n * @param {number} b - Second number.\n * @param {number} epsilon - Tolerance value for floating-point comparison.\n * @returns {boolean} True if the numbers are approximately equal, false otherwise.\n */\nconst checkAspectRatio = (a: number, b: number, epsilon: number) =>\n  Math.abs(a - b) < epsilon;\n\n/**\n * Prepares the options for the TrueCropper instance.\n * @param {ReturnType<typeof parseOptions>} options - The parsed options object.\n * @returns {PreparedOptions} The prepared options object.\n * @throws {TrueCropperOptionsError} if there are issues with the options.\n */\nexport const prepareOptions = (options: ReturnType<typeof parseOptions>) => {\n  const aspectRatio = isNumber(\"aspectRatio\", options.aspectRatio, 0, false, true);\n  const epsilon = isNumber(\"epsilon\", options.epsilon, CONSTANTS.epsilon, true, true);\n  const minSize = {\n    width: isNumber(\"minSizeWidth\", options.minSize.width, 0),\n    height: isNumber(\"minSizeHeight\", options.minSize.height, 0),\n    unit: isSizeUnit(\"minSizeUnit\", options.minSize?.unit, \"real\"),\n  };\n  const maxSize = {\n    width: isNumber(\"maxSizeWidth\", options.maxSize.width, 0),\n    height: isNumber(\"maxSizeHeight\", options.maxSize.height, 0),\n    unit: isSizeUnit(\"maxSizeUnit\", options.maxSize.unit, \"real\"),\n  };\n  const firstInitSize = {\n    x: isNumber(\"startSizeX\", options.startSize.x, 0, true),\n    y: isNumber(\"startSizeY\", options.startSize.y, 0, true),\n    width: isNumber(\"startSizeWidth\", options.startSize.width, 0),\n    height: isNumber(\"startSizeHeight\", options.startSize.height, 0),\n    unit: isSizeUnit(\"startSizeUnit\", options.startSize.unit, \"real\"),\n    centeredX: isNil(options.startSize.x),\n    centeredY: isNil(options.startSize.y),\n    allowChange: false,\n  };\n  firstInitSize.allowChange =\n    firstInitSize.width === 0 && firstInitSize.height === 0;\n\n  const startSize = {\n    x: isNumber(\"defaultSizeX\", options.defaultSize.x, 0, true),\n    y: isNumber(\"defaultSizeY\", options.defaultSize.y, 0, true),\n    width: isNumber(\"defaultSizeWidth\", options.defaultSize.width, 0),\n    height: isNumber(\"defaultSizeHeight\", options.defaultSize.height, 0),\n    unit: isSizeUnit(\"defaultSizeUnit\", options.defaultSize.unit, \"real\"),\n    centeredX: isNil(options.defaultSize.x),\n    centeredY: isNil(options.defaultSize.y),\n    allowChange: false,\n  };\n  startSize.allowChange = startSize.width === 0 && startSize.height === 0;\n\n  if (aspectRatio) {\n    if (minSize.width && minSize.height) {\n      const calculatedAspectRatio = minSize.width / minSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, epsilon)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          \"minimum\",\n          calculatedAspectRatio,\n          aspectRatio,\n          epsilon,\n        );\n      }\n    }\n    if (startSize.width && startSize.height) {\n      const calculatedAspectRatio = startSize.width / startSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, epsilon)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          \"defaultSize\",\n          calculatedAspectRatio,\n          aspectRatio,\n          epsilon,\n        );\n      }\n    }\n    if (firstInitSize.width && firstInitSize.height) {\n      const calculatedAspectRatio = firstInitSize.width / firstInitSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, epsilon)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          \"startSize\",\n          calculatedAspectRatio,\n          aspectRatio,\n          epsilon,\n        );\n      }\n    }\n  }\n\n  if (!firstInitSize.centeredX && firstInitSize.width === 0) {\n    throw TrueCropperOptionsError.widthIsNull(\"firstInitSize\");\n  }\n  if (!firstInitSize.centeredY && firstInitSize.height === 0) {\n    throw TrueCropperOptionsError.heightIsNull(\"firstInitSize\");\n  }\n\n  if (!startSize.centeredX && startSize.width === 0) {\n    throw TrueCropperOptionsError.widthIsNull(\"startSize\");\n  }\n  if (!startSize.centeredY && startSize.height === 0) {\n    throw TrueCropperOptionsError.heightIsNull(\"startSize\");\n  }\n\n  if (startSize.unit === 'percent' && (startSize.x + startSize.width > 100 || startSize.y + startSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"startSize\");\n  }\n  if (firstInitSize.unit === 'percent' && (firstInitSize.x + firstInitSize.width > 100 || firstInitSize.y + firstInitSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"firstInitSize\");\n  }\n\n  if (minSize.unit === 'percent' && (minSize.width > 100 || minSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"minSize\");\n  }\n\n  if (maxSize.unit === 'percent' && (maxSize.width > 100 || maxSize.height > 100)) {\n    throw TrueCropperOptionsError.badSizeOfPercent(\"maxSize\");\n  }\n\n  return {\n    aspectRatio,\n    epsilon,\n    allowFlip: isBoolean(\"allowFlip\", options.allowFlip, true),\n    allowNewSelection: isBoolean(\"allowNewSelection\", options.allowNewSelection, true,),\n    allowMove: isBoolean(\"allowMove\", options.allowMove, true),\n    allowResize: isBoolean(\"allowResize\", options.allowResize, true),\n    returnMode: isSizeUnit(\"returnMode\", options.returnMode, \"real\"),\n    minSize,\n    maxSize,\n    firstInitSize,\n    startSize,\n  } as const;\n};\n","/**\n * Handle component for cropping operations.\n *\n * This class represents an interactive handle used to adjust the crop boundaries.\n */\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps, TrueCropperEventHandler } from \"../types\";\nimport { HandlesType } from \"./handles\";\n\nexport default class Handle {\n  /**\n   * The normalized position of the handle (values between 0 and 1).\n   */\n  public position: { x: number; y: number };\n\n  /**\n   * Event bus function used to emit handle events.\n   */\n  private eventBus: TrueCropperEventHandler;\n\n  /**\n   * The HTML element representing the handle.\n   */\n  public el!: HTMLDivElement;\n\n  /**\n   * Flag indicating whether the handle is enabled.\n   */\n  private enable: boolean;\n\n  /**\n   * The event listener function for handling mouse events.\n   */\n  private listener?: (e: MouseEvent) => void;\n\n  /**\n   * Creates an instance of the Handle.\n   *\n   * @param parent - The parent HTMLDivElement to which the handle element is appended.\n   * @param className - The CSS class name to assign to the handle element.\n   * @param item - The handle configuration object, including its position and cursor style.\n   * @param eventBus - A callback function to handle events emitted by the handle.\n   * @param enable - Determines whether the handle is enabled.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    item: HandlesType,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n  ) {\n    this.position = item.position;\n    this.eventBus = eventBus;\n    this.enable = enable;\n\n    this.el = createDiv(className, parent);\n    this.el.style.cursor = item.cursor;\n\n    if (enable) {\n      // Attach initial mouse down listener.\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Displays the handle element.\n   */\n  public show(): void {\n    this.el.style.display = \"block\";\n  }\n\n  /**\n   * Hides the handle element.\n   */\n  public hide(): void {\n    this.el.style.display = \"none\";\n  }\n\n  /**\n   * Destroys the handle by removing event listeners and detaching it from the DOM.\n   */\n  public destroy(): void {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Transforms the handle's position based on the provided crop box properties.\n   *\n   * @param box - The crop box properties (x, y, width, height).\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    const handleWidth = this.el.offsetWidth;\n    const handleHeight = this.el.offsetHeight;\n    const left = box.x + box.width * this.position.x - handleWidth / 2;\n    const top = box.y + box.height * this.position.y - handleHeight / 2;\n\n    this.el.style.transform = `translate(${left}px, ${top}px)`;\n  }\n\n  /**\n   * Retrieves data associated with the handle.\n   *\n   * @returns An object containing the handle's normalized position.\n   */\n  public getData() {\n    return {\n      points: { ...this.position },\n    };\n  }\n\n  /**\n   * Creates and returns a mouse event handler for the handle.\n   *\n   * This function attaches mousemove and mouseup listeners to the document when a mousedown event is detected.\n   *\n   * @returns The mousedown event handler function.\n   */\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent that handle interaction has started.\n      const data = this.getData();\n      this.eventBus({ type: \"handlestart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify parent of handle movement.\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"handlemove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent that handle interaction has ended.\n      this.eventBus({ type: \"handleend\" });\n    };\n\n    return onMouseDown;\n  }\n}","/**\n * Handles component\n *\n * This module defines a collection of resize handles used in the cropping interface.\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperBoxProps, TrueCropperEventHandler } from \"../types\";\nimport Handle from \"./handle\";\n\n/**\n * Defines the configuration for each resize handle.\n *\n * @property {object} position - The normalized (x, y) position of the handle within\n *      the crop region. Values are between 0 and 1.\n * @property {string} cursor - The CSS cursor style for this handle.\n */\nconst HANDLES = [\n  { position: { x: 0, y: 0 }, cursor: \"nw-resize\" },\n  { position: { x: 0.5, y: 0 }, cursor: \"n-resize\" },\n  { position: { x: 1, y: 0 }, cursor: \"ne-resize\" },\n  { position: { x: 1, y: 0.5 }, cursor: \"e-resize\" },\n  { position: { x: 1, y: 1 }, cursor: \"se-resize\" },\n  { position: { x: 0.5, y: 1 }, cursor: \"s-resize\" },\n  { position: { x: 0, y: 1 }, cursor: \"sw-resize\" },\n  { position: { x: 0, y: 0.5 }, cursor: \"w-resize\" },\n] as const;\n\n/**\n * Type definition for a single handle configuration.\n */\nexport type HandlesType = (typeof HANDLES)[number];\n\n/**\n * Represents a collection of resize handles used in the cropping interface.\n */\nexport default class Handles {\n  /**\n   * The container element for the handles.\n   */\n  private el: HTMLDivElement;\n  /**\n   * Array of individual handle instances.\n   */\n  private handles: Handle[] = [];\n\n  /**\n   * Creates a new instance of the Handles collection.\n   *\n   * @param parent - The parent HTMLDivElement to which the handles container is appended.\n   * @param className - The CSS class name for the handles container.\n   * @param eventBus - A callback function to handle events emitted by the handles.\n   * @param enable - Determines whether the handles are enabled for user interaction.\n   * @param handleClassName - The CSS class name for individual handle elements.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperEventHandler,\n    enable: boolean,\n    handleClassName: string,\n  ) {\n    this.el = createDiv(className, parent);\n    for (const item of HANDLES) {\n      const handle = new Handle(\n        this.el,\n        handleClassName,\n        item,\n        eventBus,\n        enable,\n      );\n      this.handles.push(handle);\n    }\n  }\n\n  /**\n   * Hides all the handles by setting their display style to \"none\".\n   */\n  public hide(): void {\n    for (const handle of this.handles) {\n      handle.hide();\n    }\n  }\n\n  /**\n   * Shows all the handles by setting their display style to \"block\".\n   */\n  public show(): void {\n    for (const handle of this.handles) {\n      handle.show();\n    }\n  }\n\n  /**\n   * Destroys all handles by removing them from the DOM.\n   */\n  public destroy(): void {\n    for (const handle of this.handles) {\n      handle.destroy();\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Transforms (repositions) all handles based on the provided crop box dimensions.\n   *\n   * @param box - An object representing the crop box properties (x, y, width, height).\n   */\n  public transform(box: TrueCropperBoxProps): void {\n    for (const handle of this.handles) {\n      handle.transform(box);\n    }\n  }\n\n  /**\n   * Retrieves a handle based on the movability of the crop box edges.\n   *\n   * @param leftMovable - Indicates whether the left edge of the crop box is movable.\n   * @param topMovable - Indicates whether the top edge of the crop box is movable.\n   * @returns The handle corresponding to the specified movability configuration.\n   */\n  public handleByMovableType(leftMovable: boolean, topMovable: boolean): Handle {\n    if (leftMovable) {\n      return topMovable ? this.handles[0] : this.handles[6];\n    } else {\n      return topMovable ? this.handles[2] : this.handles[4];\n    }\n  }\n}\n","/**\n * Here lies the main logic.\n */\n\nimport Box from \"./box\";\nimport enableTouch from \"./touch\";\nimport Background from \"./HTMLelements/background\";\nimport NewSelection from \"./HTMLelements/newSelection\";\nimport Selection from \"./HTMLelements/selection\";\nimport { calculatePointsBasedOnMouse, getHTMLelements } from \"./helpers\";\nimport {\n  TrueCropperBoxProps,\n  TrueCropperCoordinates,\n  TrueCropperEvent,\n  TrueCropperNewBoxEvent,\n  TrueCropperHandleMoveEvent,\n  TrueCropperHandleStartEvent,\n  TrueCropperRegionMoveEvent,\n  TrueCropperCallbacks,\n  TrueCropperBoxInitConfig,\n  TrueCropperPoints,\n  TrueCropperSize,\n  TrueCropperSizeUnit,\n  TrueCropperStatus,\n  TrueCropperOptions\n} from \"./types\";\nimport { parseOptions, prepareOptions } from \"./options\";\nimport {\n  TrueCropperHtmlError,\n  TrueCropperOptionsError,\n  TrueCropperImageError,\n} from \"./errors\";\nimport Handles from \"./HTMLelements/handles\";\nimport { CONSTANTS } from \"./constant\";\nimport {\n  convertToRealPx,\n  processingInitialProps,\n  validateImageSizes,\n} from \"./helpers\";\n\n/**\n * Core class for TrueCropper containing most of its functional logic.\n */\nconst defaultSize = { width: 0, height: 0 };\nexport default class TrueCropper {\n  private replaceDOM = false;\n  private htmlContainer!: HTMLDivElement;\n  private htmlImg!: HTMLImageElement;\n\n  private options!: ReturnType<typeof prepareOptions>;\n  private newSelection!: NewSelection;\n  private selection!: Selection;\n  private handles!: Handles;\n  private background!: Background;\n\n  private box!: Box;\n\n  private currentMove!: { offsetX: number; offsetY: number };\n  private activeHandle!: {\n    x: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n    y: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n  };\n\n  private real = defaultSize;\n  private relative = defaultSize;\n  private ratio = defaultSize;\n  private firstInit = true;\n  private isDomCreated = false;\n  public status = TrueCropperStatus.Waiting;\n  public eventBus = this.event.bind(this);\n  private observer!: ResizeObserver;\n  private preventDoubleLoad?: string;\n\n  private callbacks: TrueCropperCallbacks = {\n    onInitialize: undefined,\n    onCropStart: undefined,\n    onCropChange: undefined,\n    onCropEnd: undefined,\n    onError: undefined,\n  };\n\n  public constructor(\n    element: HTMLImageElement | string,\n    optionsProps?: Partial<TrueCropperOptions>,\n  ) {\n    try {\n      this.parseCallbackFunctions(optionsProps);\n      const [img, container] = getHTMLelements(element);\n      this.htmlImg = img;\n      if (container) {\n        this.htmlContainer = container;\n      } else {\n        this.replaceDOM = true;\n      }\n      this.changeStatus(TrueCropperStatus.Waiting);\n\n      // Parse options\n      const rawOptionsData = parseOptions(this.htmlImg.dataset, optionsProps);\n      this.options = prepareOptions(rawOptionsData);\n\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  public getImagePreview(): HTMLCanvasElement | null {\n    if (this.status !== \"ready\") {\n      return null;\n    }\n\n    if (!this.htmlImg.complete) {\n      return null;\n    }\n    if (this.htmlImg.naturalWidth === 0 || this.htmlImg.naturalHeight === 0) {\n      return null;\n    }\n\n    const val = this.getValue(\"real\");\n    if (!val) {\n      return null;\n    }\n\n    if (\n      val.width <= 0 ||\n      val.height <= 0 ||\n      val.x < 0 ||\n      val.y < 0 ||\n      val.x + val.width > this.htmlImg.naturalWidth ||\n      val.y + val.height > this.htmlImg.naturalHeight\n    ) {\n      return null;\n    }\n\n    const canvas = document.createElement(\"canvas\");\n    const dpr = window.devicePixelRatio || 1;\n\n    canvas.width  = val.width * dpr;\n    canvas.height = val.height * dpr;\n\n    canvas.style.width  = `${val.width}px`;\n    canvas.style.height = `${val.height}px`;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      return null;\n    }\n\n    ctx.scale(dpr, dpr);\n\n    ctx.drawImage(\n      this.htmlImg,\n      val.x,\n      val.y,\n      val.width,\n      val.height,\n      0,\n      0,\n      val.width,\n      val.height\n    );\n\n    return canvas;\n  }\n\n\n  /**\n   * Changes the image src.\n   * @param {String} src\n   */\n  public setImage(src: string) {\n    if (src && src.length !== 0) {\n      this.firstInit = false;\n      this.htmlImg.src = src;\n    }\n  }\n\n  /**\n   * Resets the crop region to the initial settings.\n   */\n  public reset() {\n    try {\n      this.firstInit = false;\n      this.destroy();\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError ||\n        error instanceof TrueCropperImageError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Destroy the TrueCropper instance and replace with the original element.\n   */\n  public destroy() {\n    if (this.isDomCreated) {\n      this.observer.unobserve(this.htmlImg);\n      this.newSelection.destroy();\n      this.handles.destroy();\n      this.selection.destroy();\n      this.background.destroy();\n      if (this.replaceDOM) {\n        if (this.htmlContainer.parentElement) {\n          this.htmlContainer.parentElement.replaceChild(\n            this.htmlImg,\n            this.htmlContainer,\n          );\n        }\n      }\n    }\n    this.isDomCreated = false;\n  }\n\n  /**\n   * Moves the crop region to a specified coordinate.\n   * @param {TrueCropperCoordinates} coordinates\n   */\n  public moveTo(coordinates: TrueCropperCoordinates, mode: TrueCropperSizeUnit | undefined = undefined) {\n    if (typeof coordinates !== \"object\") {\n      return;\n    }\n    if (!coordinates\n      || typeof coordinates.x !== \"number\"\n      || typeof coordinates.y !== \"number\") {\n      return;\n    }\n\n    const realCoordinates = this.coordinatesToReal(coordinates, mode);\n\n    this.box.move(realCoordinates);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Resizes the crop region to a specified width and height.\n   * @param {SiTrueCropperSizeze} size\n   * @param {TrueCropperPoints} points\n   */\n  public resizeTo(size: TrueCropperSize, points: TrueCropperPoints = { x: 0.5, y: 0.5 }, mode: TrueCropperSizeUnit | undefined = undefined) {\n    if (typeof size !== \"object\") {\n      return { ok: false, message: \"Size must be provided as an Size object.\" };\n    }\n    if (!size\n      || typeof size.width !== \"number\"\n      || typeof size.height !== \"number\") {\n      return { ok: false, message: \"Size object must have numeric 'width' and 'height' properties.\" };\n    }\n    if (typeof points !== \"object\") {\n      return { ok: false, message: \"Points must be provided as an Points object.\" };\n    }\n    if (!points\n      || typeof points.x !== \"number\"\n      || typeof points.y !== \"number\") {\n      return { ok: false, message: \"Points object must have numeric 'x' and 'y' properties.\" };\n    }\n\n    const realSize = this.sizeToReal(size, mode);\n\n    this.box.resize(realSize, points);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Scale the crop region by a factor.\n   * @param {Number} factor\n   * @param {TrueCropperPoints} points\n   */\n  public scaleBy(factor: number, points: TrueCropperPoints = { x: 0.5, y: 0.5 }) {\n    if (typeof factor !== \"number\") {\n      return { ok: false, message: \"factor must be provided as numeric.\" };\n    }\n    const status = this.box.scale(factor, points);\n    if (status.ok) {\n      this.redraw();\n\n      // Call the callback\n      this.onCropEndCallback();\n    }\n    return status;\n  }\n\n  /**\n   * Sets the value of a box.\n   * @param {TrueCropperBoxProps} box - The box object containing properties to set.\n   * @public\n   */\n  public setValue(box: TrueCropperBoxProps, mode: TrueCropperSizeUnit | undefined = undefined) {\n    if (typeof box !== \"object\") {\n      return { ok: false, message: \"Size must be provided as an BoxProps object.\" };\n    }\n    if (!box\n      || typeof box.x !== \"number\"\n      || typeof box.y !== \"number\"\n      || typeof box.width !== \"number\"\n      || typeof box.height !== \"number\") {\n        return { ok: false, message: \"BoxProps object must have numeric 'x', 'y', 'width' and 'height' properties.\" };\n    }\n    const realSize = this.boxToReal(box, mode);\n    const status = this.box.setValue(realSize);\n\n    if (status.ok) {\n      this.redraw();\n      // Call the callback\n      this.onCropEndCallback();\n    }\n    return status;\n  }\n\n  /**\n   * Get the value of the crop region.\n   * @param {TrueCropperSizeUnit | undefined} mode - The mode of return value type. If null, defaults to the return mode set in returnMode options.\n   * @returns {number} - The value of the crop region.\n   */\n  public getValue(mode: TrueCropperSizeUnit | undefined = undefined) {\n    const calculationMode = mode || this.options.returnMode;\n\n    const notRoundedValues = () => {\n      if (calculationMode === \"relative\") {\n        return this.box.getValueRelative(this.ratio);\n      }\n      if (calculationMode === \"percent\") {\n        return this.box.getValuePercent();\n      }\n\n      return this.box.getValueReal();\n    };\n\n    const values = notRoundedValues();\n    return {\n      x: Math.round(values.x),\n      y: Math.round(values.y),\n      width: Math.round(values.width),\n      height: Math.round(values.height),\n    };\n  }\n\n  /**\n   * Retrieves the image properties.\n   * @returns {real: TrueCropperSize, relative: TrueCropperSize} An object containing the real and relative properties.\n   * @public\n   */\n  public getImageProps() {\n    return { real: this.real, relative: this.relative };\n  }\n\n  /**\n   * Retrieves the status of the instance.\n   * @returns {TrueCropperStatus} The status of the instance.\n   */\n  public getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Handles the callback when after initialization.\n   */\n  protected onInitializeCallback() {\n    if (this.callbacks.onInitialize) {\n      this.callbacks.onInitialize(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping starts.\n   */\n  protected onCropStartCallback() {\n    if (this.callbacks.onCropStart) {\n      this.callbacks.onCropStart(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping is in progress.\n   */\n  protected onCropChangeCallback() {\n    if (this.callbacks.onCropChange) {\n      this.callbacks.onCropChange(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping ends.\n   */\n  protected onCropEndCallback() {\n    const val = this.getValue();\n    // Set dataset properties for cropping dimensions\n    this.setDatasetCropValues(val);\n\n    if (this.callbacks.onCropEnd) {\n      this.callbacks.onCropEnd(this, val);\n    }\n  }\n\n  /**\n   * Handles errors encountered during operations.\n   * @param {TrueCropperHtmlError | TrueCropperImageError | TrueCropperOptionsError} error - The error object containing information about the error.\n   */\n  protected onErrorCallback(\n    error:\n      | TrueCropperHtmlError\n      | TrueCropperImageError\n      | TrueCropperOptionsError,\n  ) {\n    // Change dataset properties status to error\n    this.changeStatus(TrueCropperStatus.Error);\n    const value = {\n      name: error.name,\n      message: error.message,\n      messageId: error.messageId,\n      data: error.data,\n    };\n    // Destroy instance\n    this.destroy();\n    // If onError callback is provided, invoke it with the error object; otherwise, throw the error\n    if (this.callbacks.onError) {\n      this.callbacks.onError(this, value);\n    } else {\n      throw error;\n    }\n  }\n\n  /** ==============\n   *\n   *\n   *  Private methods\n   *\n   *\n   * ==============\n   */\n\n  private initializeObserver() {\n    this.observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const target = entry.target as HTMLImageElement;\n        if (target === this.htmlImg && target.complete && target.width !== 0) {\n          this.updateRelativeSize();\n          this.redraw();\n        }\n      }\n    });\n  }\n\n  private initializeCropper() {\n    this.initializeObserver();\n    // Wait until image is loaded before proceeding\n    if (\n      this.htmlImg.src &&\n      this.htmlImg.complete &&\n      this.htmlImg.width !== 0 &&\n      this.htmlImg.height !== 0\n    ) {\n      this.preventDoubleLoad = this.htmlImg.src;\n      this.initialize();\n    }\n    this.htmlImg.onload = () => {\n      if (!this.htmlImg.src || this.preventDoubleLoad === this.htmlImg.src) {\n        return;\n      } else {\n        this.preventDoubleLoad = undefined;\n      }\n      this.changeStatus(\n        this.status === TrueCropperStatus.Waiting ? TrueCropperStatus.Waiting : TrueCropperStatus.Reloading,\n      );\n      this.observer.unobserve(this.htmlImg);\n      this.initialize();\n    };\n  }\n  private initialize() {\n    try {\n      this.createDOM();\n      this.calcContainerProps();\n      this.updateRelativeSize();\n      this.createNewBox();\n      this.onInitializeCallback();\n      this.observer.observe(this.htmlImg);\n      this.changeStatus(TrueCropperStatus.Ready);\n      this.onCropEndCallback();\n    } catch (error) {\n      if (error instanceof TrueCropperImageError) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private createDOM() {\n    if (this.isDomCreated) {\n      return;\n    }\n\n    if (this.replaceDOM) {\n      this.htmlContainer = document.createElement(\"div\");\n      this.htmlContainer.classList.add(CONSTANTS.base);\n      if (this.htmlImg.parentElement) {\n        this.htmlImg.parentElement.replaceChild(\n          this.htmlContainer,\n          this.htmlImg,\n        );\n      }\n      this.htmlContainer.appendChild(this.htmlImg);\n    }\n    const base = this.htmlContainer;\n    enableTouch(base);\n\n    this.htmlImg.classList.add(CONSTANTS.img);\n    this.background = new Background(base, CONSTANTS.background);\n    this.newSelection = new NewSelection(\n      base,\n      CONSTANTS.new,\n      this.eventBus,\n      this.options.allowNewSelection,\n    );\n    this.selection = new Selection(\n      base,\n      CONSTANTS.selection,\n      this.eventBus,\n      this.options.allowMove,\n    );\n    this.handles = new Handles(\n      base,\n      CONSTANTS.hanleds,\n      this.eventBus,\n      this.options.allowResize,\n      CONSTANTS.handle,\n    );\n    this.isDomCreated = true;\n  }\n\n  private calcContainerProps() {\n    this.real = {\n      width: this.htmlImg.naturalWidth,\n      height: this.htmlImg.naturalHeight,\n    };\n  }\n\n  protected createNewBox() {\n    let startSizeProps = this.options.startSize;\n    if (this.firstInit) {\n      this.firstInit = false;\n      startSizeProps = this.options.firstInitSize;\n    }\n\n    const centered = {\n      x: startSizeProps.centeredX,\n      y: startSizeProps.centeredX,\n    };\n    const allowChange = startSizeProps.allowChange;\n    const realData = convertToRealPx(\n      startSizeProps,\n      this.options.minSize,\n      this.options.maxSize,\n      this.real,\n      this.ratio,\n    );\n    const props = processingInitialProps(\n      realData,\n      this.real,\n      this.options.aspectRatio,\n      this.options.epsilon,\n      allowChange,\n      centered,\n    );\n\n    validateImageSizes(props);\n\n    this.box = new Box(props);\n  }\n\n  private updateRelativeSize() {\n    const { width, height } = this.htmlImg.getBoundingClientRect();\n    if (this.htmlImg.offsetWidth === 0 || this.htmlImg.offsetHeight === 0) {\n      this.relative = { width: this.real.width, height: this.real.height };\n    } else {\n      this.relative = { width, height };\n    }\n\n    this.ratio = {\n      width: this.relative.width / this.real.width,\n      height: this.relative.height / this.real.height,\n    };\n  }\n\n  private changeStatus(status: TrueCropperStatus) {\n    this.status = status;\n    if (this.htmlImg) {\n      this.setDataset(CONSTANTS.valueStatus, status);\n    }\n  }\n\n  /**\n   * Draw visuals (border, handles, etc) for the current box.\n   */\n  private redraw() {\n    const box = this.box.getValueRelative(this.ratio);\n\n    this.selection.transform(box);\n    this.background.transform(box);\n    this.handles.transform(box);\n  }\n\n  private event({ type, data }: TrueCropperEvent) {\n    switch (type) {\n      case \"handlestart\":\n        this.onHandleMoveStart(data);\n        break;\n      case \"handlemove\":\n        this.onHandleMoveMoving(data);\n        break;\n      case \"handleend\":\n        this.onHandleMoveEnd();\n        break;\n      case \"regionstart\":\n        this.onRegionMoveStart(data);\n        break;\n      case \"regionmove\":\n        this.onRegionMoveMoving(data);\n        break;\n      case \"regionend\":\n        this.onRegionMoveEnd();\n        break;\n      case \"createnewbox\":\n        return this.tryToCreateNewBox(data);\n    }\n    return true;\n  }\n\n  private tryToCreateNewBox({\n    coordinates,\n    size,\n    leftMovable,\n    topMovable,\n  }: TrueCropperNewBoxEvent[\"data\"]) {\n    // Get handle data based on movable types\n    const handleData = this.handles\n      .handleByMovableType(leftMovable, topMovable)\n      .getData();\n\n    // Calculate new mouse coordinates\n    const boxCoordinates = this.mouseCoordinates(coordinates);\n\n    // Define movement coordinates for x and y axes\n    const newBox = {\n      coordinates: boxCoordinates,\n      size,\n      points: handleData.points,\n    };\n\n    // Move the box using the calculated movement, and if unsuccessful, return false\n    if (!this.box.prepareAndApplyNewSizeAndCoordinates(newBox)) {\n      return false;\n    }\n\n    // Redraw the box\n    this.redraw();\n\n    // Trigger handle move start event\n    this.onHandleMoveStart(handleData);\n\n    // Return true to indicate successful box creation\n    return true;\n  }\n\n  /**\n   * Executes when user begins dragging a handle.\n   */\n  private onHandleMoveStart(data: TrueCropperHandleStartEvent[\"data\"]) {\n    const { x, y } = this.box.getOppositeCornerCoordinates(data.points);\n    this.activeHandle = {\n      x: {\n        left: data.points.x === 0,\n        savedCoordinate: x,\n      },\n      y: {\n        left: data.points.y === 0,\n        savedCoordinate: y,\n      },\n    };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes on handle move. Main logic to manage the movement of handles.\n   */\n  private onHandleMoveMoving(absMouse: TrueCropperHandleMoveEvent[\"data\"]) {\n    // Calculate mouse's position in relative to the container\n    const coordinates = this.mouseCoordinates(absMouse);\n\n    // получаем левый угол и длину\n    // point == 1 значит мы меняем левый угол\n    // point == 0 значит мы меняем правый угол\n    // point == 0.5 значит мы меняем и левый и правый угол (относительно центра).\n    // в этом случае значение x == null (берем из текещего box)\n    const newBox = calculatePointsBasedOnMouse(\n      coordinates,\n      this.activeHandle.x,\n      this.activeHandle.y,\n    );\n    // const aY = calculatePointBasedOnMouse(mouseY, this.activeHandle.y);\n\n    // Disable flipped crop\n    if (!this.options.allowFlip && (newBox.flipped.x || newBox.flipped.y)) {\n      return;\n    }\n\n    if (this.box.prepareAndApplyNewSizeAndCoordinates(newBox.newBox)) {\n      this.redraw();\n    }\n\n    // Trigger callback\n    this.onCropChangeCallback();\n  }\n  /**\n   *  Executes when the handle move ends.\n   */\n  private onHandleMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Executes when user starts moving the crop region.\n   * @param {TrueCropperRegionMoveEvent[\"data\"]} data - contains the raw mouseX, mouseY coordinate\n   */\n  private onRegionMoveStart(absMouse: TrueCropperRegionMoveEvent[\"data\"]) {\n    const { x, y } = this.mouseCoordinates(absMouse);\n    const box = this.box.getCoourdinates();\n\n    this.currentMove = { offsetX: x - box.x, offsetY: y - box.y };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes when user moves the crop region.\n   */\n  private onRegionMoveMoving(absMouse: TrueCropperRegionMoveEvent[\"data\"]) {\n    const { offsetX, offsetY } = this.currentMove;\n\n    // Calculate mouse's position in relative to the container\n    const { x, y } = this.mouseCoordinates(absMouse);\n    this.box.move({ x: x - offsetX, y: y - offsetY });\n\n    // Update visuals\n    this.redraw();\n\n    // Trigger callback\n    this.onCropChangeCallback();\n  }\n\n  /**\n   * Executes when user stops moving the crop region (mouse up).\n   */\n  private onRegionMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Get the real(natural) mouse coordinates within the image container.\n   * @param {number} absMouseX - The absolute X coordinate of the mouse.\n   * @param {number} absMouseY - The absolute Y coordinate of the mouse.\n   * @returns {[number, number]} - The real(natural) X and Y coordinates within the image container.\n   */\n  private mouseCoordinates(absMouse: { x: number; y: number }) {\n    const container = this.htmlImg.getBoundingClientRect();\n    let x = absMouse.x - container.left;\n    let y = absMouse.y - container.top;\n    x = Math.min(Math.max(x, 0), this.relative.width) / this.ratio.width;\n    y = Math.min(Math.max(y, 0), this.relative.height) / this.ratio.height;\n    return { x, y };\n  }\n\n  /**\n   * Sets a value to a dataset attribute of an HTML image element.\n   * @param {string} name - The name of the dataset attribute.\n   * @param {string | number} value - The value to set for the dataset attribute.\n   */\n  private setDataset(name: string, value: string | number) {\n    this.htmlImg.dataset[name] = value.toString();\n  }\n\n  // to helpers\n  private parseCallbackFunctions(\n    optionsProps?: Partial<TrueCropperOptions>,\n  ) {\n    if (!optionsProps) {\n      return;\n    }\n    if (optionsProps.onError && typeof optionsProps.onError === \"function\") {\n      this.callbacks.onError = optionsProps.onError;\n    }\n    if (\n      optionsProps.onInitialize &&\n      typeof optionsProps.onInitialize === \"function\"\n    ) {\n      this.callbacks.onInitialize = optionsProps.onInitialize;\n    }\n    if (\n      optionsProps.onCropStart &&\n      typeof optionsProps.onCropStart === \"function\"\n    ) {\n      this.callbacks.onCropStart = optionsProps.onCropStart;\n    }\n    if (\n      optionsProps.onCropChange &&\n      typeof optionsProps.onCropChange === \"function\"\n    ) {\n      this.callbacks.onCropChange = optionsProps.onCropChange;\n    }\n    if (\n      optionsProps.onCropEnd &&\n      typeof optionsProps.onCropEnd === \"function\"\n    ) {\n      this.callbacks.onCropEnd = optionsProps.onCropEnd;\n    }\n  }\n\n  private setDatasetCropValues(value?: TrueCropperBoxProps) {\n    const val = value || this.getValue();\n    this.setDataset(CONSTANTS.valueX, val.x);\n    this.setDataset(CONSTANTS.valueY, val.y);\n    this.setDataset(CONSTANTS.valueWidth, val.width);\n    this.setDataset(CONSTANTS.valueHeight, val.height);\n  }\n\n  /**\n   * Converts a single numeric value from a given mode (\"relative\", \"percent\", or \"real\")\n   * into its corresponding real value.\n   *\n   * @param value - The original value to convert.\n   * @param ratio - The reference ratio (e.g., this.ratio.width or this.ratio.height) used for relative conversion.\n   * @param total - The total dimension (from the image size) used for percent conversion.\n   * @param mode - The conversion mode.\n   * @returns The converted value.\n   */\n  private getConvertedValue(value: number, ratio: number, total: number, mode: TrueCropperSizeUnit): number {\n    if (mode === \"relative\") {\n      return value / ratio;\n    }\n    if (mode === \"percent\") {\n      return (total * value) / 100;\n    }\n    // For \"real\" or any unrecognized mode, return the original value.\n    return value;\n  }\n\n  /**\n   * Converts coordinate values (x and y) into their real equivalents based on the specified mode.\n   *\n   * @param coordinates - The coordinates to convert.\n   * @param mode - The conversion mode (\"relative\", \"percent\", or \"real\").\n   *               Defaults to `this.options.returnMode` if not provided.\n   * @returns The converted coordinates.\n   */\n  private coordinatesToReal(coordinates: TrueCropperCoordinates, mode: TrueCropperSizeUnit | undefined = undefined): TrueCropperCoordinates {\n    const calculationMode = mode || this.options.returnMode;\n\n    // If the mode is \"real\", return the original coordinates.\n    if (calculationMode === \"real\") {\n      return { ...coordinates };\n    }\n\n    const imgSize = this.box.getBoxSize();\n    return {\n      x: this.getConvertedValue(\n        coordinates.x,\n        this.ratio.width,\n        imgSize.width,\n        calculationMode\n      ),\n      y: this.getConvertedValue(\n        coordinates.y,\n        this.ratio.height,\n        imgSize.height,\n        calculationMode\n      ),\n    };\n  }\n\n  /**\n   * Converts size values (width and height) into their real equivalents based on the specified mode.\n   *\n   * @param size - The size object to convert.\n   * @param mode - The conversion mode (\"relative\", \"percent\", or \"real\").\n   *               Defaults to `this.options.returnMode` if not provided.\n   * @returns The converted size object.\n   */\n  private sizeToReal(size: TrueCropperSize, mode: TrueCropperSizeUnit | undefined = undefined): TrueCropperSize {\n    const calculationMode = mode || this.options.returnMode;\n\n    // If the mode is \"real\", return the original size.\n    if (calculationMode === \"real\") {\n      return { ...size };\n    }\n\n    const imgSize = this.box.getBoxSize();\n    return {\n      width: this.getConvertedValue(\n        size.width,\n        this.ratio.width,\n        imgSize.width,\n        calculationMode\n      ),\n      height: this.getConvertedValue(\n        size.height,\n        this.ratio.height,\n        imgSize.height,\n        calculationMode\n      ),\n    };\n  }\n\n  /**\n   * Converts a box's properties (both position and size) into their real equivalents\n   * based on the specified mode.\n   *\n   * @param box - The box properties to convert.\n   * @param mode - The conversion mode (\"relative\", \"percent\", or \"real\").\n   *               Defaults to `this.options.returnMode` if not provided.\n   * @returns The converted box properties.\n   */\n  private boxToReal(box: TrueCropperBoxProps, mode: TrueCropperSizeUnit | undefined = undefined): TrueCropperBoxProps {\n    const calculationMode = mode || this.options.returnMode;\n\n    // If the mode is \"real\", no conversion is necessary.\n    if (calculationMode === \"real\") {\n      return box;\n    }\n\n    return {\n      ...this.coordinatesToReal({ x: box.x, y: box.y }, calculationMode),\n      ...this.sizeToReal({ width: box.width, height: box.height }, calculationMode),\n    };\n  }\n}\n"],"names":["BASE_CLASSNAME","CONSTANTS","errorMessage","TrueCropperHtmlError","key","message","__publicField","TrueCropperImageError","data","messageId","target","coordinates","targetSize","source","sourceSize","TrueCropperOptionsError","name","calculatedAspectRatio","aspectRatio","epsilon","object","positive","getHTMLelements","element","el","parent","createDiv","className","calculatePointBasedOnMouse","mousePosition","activeHandle","isMouseLeft","flipped","coordinate","size","point","calculatePointsBasedOnMouse","mouse","handleX","handleY","aX","aY","convertToRealPx","start","min","max","real","ratio","toPx","val","type","unit","newMinSize","newMaxSize","processingInitialProps","imgProps","allowChangeStartProps","centered","minSize","adjustSizeProps","maxSize","calculateAdjustedMaxSize","tmp","adjustStartProps","validateImageSizes","checkDimensions","first","second","firstName","secondName","containerToMaxMinSize","newSize","adjustWidth","widthAdjustment","newWidth","adjustHeight","heightAdjustment","newHeight","adjustToAspectRatio","vertiacal","pointX","pointY","height","width","sizeProps","defaultVal","maxSizeProps","image","startSize","centeredX","centeredY","startSizeProps","newCoordinates","maxX","maxY","Box","box","points","fromX","fromY","x","y","factor","newBox","isVerticalMovement","isMultiAxis","enableTouch","simulateMouseEvent","e","event","touch","touchEventToMouseEvent","Background","div","x2","y2","NewSelection","eventBus","enable","onMouseDown","onMouseMove","onMouseUp","mouseX","mouseY","leftMovable","topMovable","Selection","TRUECROPPER_SIZE_UNITS","TrueCropperStatus","PREFIX","capitalizeFirstLetter","str","isNil","isNumber","defaultValue","allowZero","allowFractional","isBoolean","isSizeUnit","parseOptions","dataset","options","opts","getValue","value","lower","returnValue","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","checkAspectRatio","a","b","prepareOptions","firstInitSize","Handle","item","handleWidth","handleHeight","left","top","HANDLES","Handles","handleClassName","handle","defaultSize","TrueCropper","optionsProps","img","container","rawOptionsData","error","canvas","dpr","ctx","src","mode","realCoordinates","realSize","status","calculationMode","values","entries","entry","base","allowChange","realData","props","handleData","absMouse","offsetX","offsetY","total","imgSize"],"mappings":"iLAAA,MAAMA,EAAiB,cACVC,EAAY,CACvB,KAAMD,EACN,IAAK,GAAGA,CAAc,UACtB,WAAY,GAAGA,CAAc,eAC7B,IAAK,GAAGA,CAAc,kBACtB,UAAW,GAAGA,CAAc,cAC5B,OAAQ,GAAGA,CAAc,WACzB,QAAS,GAAGA,CAAc,YAC1B,OAAQ,GAAGA,CAAc,IACzB,OAAQ,GAAGA,CAAc,IACzB,WAAY,GAAGA,CAAc,QAC7B,YAAa,GAAGA,CAAc,SAC9B,YAAa,GAAGA,CAAc,SAC9B,QAAS,GACX,ECVME,EAAe,CAInB,gBAAiB,CAAE,KAAM,yBAA0B,GAAI,CAAE,EAKzD,SAAU,CAAE,KAAM,yBAA0B,GAAI,CAAE,EAKlD,oBAAqB,CAAE,KAAM,+BAAgC,GAAI,CAAE,CACrE,EAOO,MAAMC,UAA6B,KAAM,CAevC,YAAYC,EAAgC,CAC3C,MAAAC,EAAUH,EAAaE,CAAG,EAChC,MAAMC,EAAQ,IAAI,EAbbC,EAAA,aAIAA,EAAA,kBAYE,OAAA,eAAe,KAAMH,EAAqB,SAAS,EAE1D,KAAK,KAAO,uBACZ,KAAK,KAAO,CAAC,EACb,KAAK,UAAYE,EAAQ,EAAA,CAE7B,CC9CO,MAAME,UAA8B,KAAM,CAiBxC,YACLF,EACAG,EACAC,EACA,CACA,MAAMJ,CAAO,EAlBRC,EAAA,aAIAA,EAAA,kBAiBE,OAAA,eAAe,KAAMC,EAAsB,SAAS,EAE3D,KAAK,KAAO,wBACZ,KAAK,KAAO,CACV,OAAQC,EAAK,OACb,kBAAmBA,EAAK,YAAc,CAAE,GAAGA,EAAK,aAAgB,OAChE,WAAY,CAAE,GAAGA,EAAK,UAAW,EACjC,OAAQA,EAAK,OACb,WAAY,CAAE,GAAGA,EAAK,UAAW,CACnC,EACA,KAAK,UAAYC,CAAA,CAanB,OAAc,UACZC,EACAC,EACAC,EACAC,EACAC,EACuB,CACjB,MAAAT,EAAU,OAAOK,CAAM,KAAKC,EAAY,CAAC,IAAIA,EAAY,CAAC,IAAIC,EAAW,KAAK,IAAIA,EAAW,MAAM,iBAAiBC,CAAM,KAAKC,EAAW,KAAK,IAAIA,EAAW,MAAM,IACpKN,EAAO,CACX,OAAAE,EACA,YAAAC,EACA,WAAAC,EACA,OAAAC,EACA,WAAAC,CACF,EACA,OAAO,IAAI,KAAKT,EAASG,EAAM,CAAC,CAAA,CAYlC,OAAc,KACZE,EACAE,EACAC,EACAC,EACuB,CACvB,MAAMT,EAAU,OAAOK,CAAM,KAAKE,EAAW,KAAK,IAAIA,EAAW,MAAM,iBAAiBC,CAAM,KAAKC,EAAW,KAAK,IAAIA,EAAW,MAAM,IAClIN,EAAO,CACX,OAAAE,EACA,YAAa,OACb,WAAAE,EACA,OAAAC,EACA,WAAAC,CACF,EACA,OAAO,IAAI,KAAKT,EAASG,EAAM,CAAC,CAAA,CAEpC,CC3FO,MAAMO,UAAgC,KAAM,CAiB1C,YACLV,EACAG,EACAC,EAAoB,EACpB,CACA,MAAMJ,CAAO,EAlBRC,EAAA,aAIAA,EAAA,kBAiBE,OAAA,eAAe,KAAMS,EAAwB,SAAS,EAE7D,KAAK,KAAO,0BACZ,KAAK,KAAOP,EACZ,KAAK,UAAYC,CAAA,CAYnB,OAAc,YACZO,EACAC,EACAC,EACAC,EACyB,CACnB,MAAAd,EAAU,+BAA+Ba,CAAW,oBAAoBF,CAAI,+BAA+BC,CAAqB,uBAAuBE,CAAO,0FACpK,OAAO,IAAI,KAAKd,EAAS,CAAE,KAAAW,CAAA,EAAQ,CAAC,CAAA,CAGtC,OAAc,YAAYA,EAAuC,CACzD,MAAAX,EAAU,iBAAiBW,CAAI,YACrC,OAAO,IAAI,KAAKX,EAAS,CAAE,KAAAW,CAAA,EAAQ,CAAC,CAAA,CAGtC,OAAc,aAAaA,EAAuC,CAC1D,MAAAX,EAAU,kBAAkBW,CAAI,YACtC,OAAO,IAAI,KAAKX,EAAS,CAAE,KAAAW,CAAA,EAAQ,CAAC,CAAA,CAGtC,OAAc,iBAAiBA,EAAuC,CAC9D,MAAAX,EAAU,0BAA0BW,CAAI,UAC9C,OAAO,IAAI,KAAKX,EAAS,CAAE,KAAAW,CAAA,EAAQ,EAAE,CAAA,CAWvC,OAAc,IAAIA,EAAcI,EAAgBC,EAAW,GAA+B,CAClF,MAAAZ,EAAYY,EAAW,EAAI,EAC3BhB,EAAUgB,EACZ,GAAGL,CAAI,YAAYI,CAAM,GACzB,GAAGJ,CAAI,gBAAgBI,CAAM,GACjC,OAAO,IAAI,KAAKf,EAAS,CAAE,KAAAW,EAAM,OAAAI,GAAUX,CAAS,CAAA,CAExD,CCjEa,MAAAa,EACXC,GACG,CACH,IAAIC,EAAK,KACL,GAAA,OAAOD,GAAY,UAErB,GADKC,EAAA,SAAS,cAAcD,CAAO,EAC/BC,IAAO,KACH,MAAA,IAAIrB,EAAqB,iBAAiB,OAG7CqB,EAAAD,EAEH,GAAA,EAAEC,aAAc,kBACZ,MAAA,IAAIrB,EAAqB,UAAU,EAK3C,IAAIsB,EAAgCD,EAAG,cACvC,GAAI,CAACC,EACG,MAAA,IAAItB,EAAqB,qBAAqB,EAEtD,OAAKsB,EAAO,UAAU,SAASxB,EAAU,IAAI,IAClCwB,EAAA,MAEJ,CAACD,EAAIC,CAAM,CACpB,EASaC,EAAY,CACvBC,EACAF,EAAkC,SAC/B,CACG,MAAAD,EAAK,SAAS,cAAc,KAAK,EACvC,OAAAA,EAAG,UAAYG,EACXF,GACFA,EAAO,YAAYD,CAAE,EAEhBA,CACT,EAQMI,EAA6B,CACjCC,EACAC,IACG,CAEC,GAAAA,EAAa,gBAAkB,EAC1B,MAAA,CAAE,QAAS,GAAO,WAAY,KAAM,KAAM,KAAM,MAAO,EAAI,EAI9D,MAAAC,EAAcF,EAAgBC,EAAa,gBAG3CE,EAAUF,EAAa,OAASC,EAChCE,EAAaH,EAAa,gBAC1BI,EAAO,KAAK,IAAIJ,EAAa,gBAAkBD,CAAa,EAC5DM,EAAQ,OAAOJ,CAAW,EAEzB,MAAA,CACL,QAAAC,EACA,WAAAC,EACA,KAAAC,EACA,MAAAC,CACF,CACF,EAUaC,EAA8B,CACzCC,EACAC,EACAC,IACG,CACH,MAAMC,EAAKZ,EAA2BS,EAAM,EAAGC,CAAO,EAChDG,EAAKb,EAA2BS,EAAM,EAAGE,CAAO,EAC/C,MAAA,CACL,QAAS,CAAE,EAAGC,EAAG,QAAS,EAAGC,EAAG,OAAQ,EACxC,OAAQ,CACN,YAAa,CAAE,EAAGD,EAAG,WAAY,EAAGC,EAAG,UAAW,EAClD,KAAM,CAAE,MAAOD,EAAG,KAAM,OAAQC,EAAG,IAAK,EACxC,OAAQ,CAAE,EAAGD,EAAG,MAAO,EAAGC,EAAG,KAAM,CAAA,CAEvC,CACF,EAWaC,EAAkB,CAC7BC,EACAC,EACAC,EACAC,EACAC,IACG,CAEH,MAAMC,EAAO,CAACC,EAAaC,EAA6BC,IAClDA,IAAS,WACJF,EAAMF,EAAMG,CAAI,EAErBC,IAAS,UACJF,GAAO,EAAIH,EAAKI,CAAI,GAAKD,EAAM,KAAOH,EAAKI,CAAI,EAAID,EAGrDA,EAGHG,EAAa,CACjB,MAAOJ,EAAKJ,EAAI,MAAO,QAASA,EAAI,IAAI,EACxC,OAAQI,EAAKJ,EAAI,OAAQ,SAAUA,EAAI,IAAI,CAC7C,EACMS,EAAa,CACjB,MAAOL,EAAKH,EAAI,MAAO,QAASA,EAAI,IAAI,EACxC,OAAQG,EAAKH,EAAI,OAAQ,SAAUA,EAAI,IAAI,CAC7C,EAEMlC,EAAc,CAClB,EAAGqC,EAAKL,EAAM,EAAG,QAASA,EAAM,IAAI,EACpC,EAAGK,EAAKL,EAAM,EAAG,SAAUA,EAAM,IAAI,CACvC,EAEMT,EAAO,CACX,MAAOc,EAAKL,EAAM,MAAO,QAASA,EAAM,IAAI,EAC5C,OAAQK,EAAKL,EAAM,OAAQ,SAAUA,EAAM,IAAI,CACjD,EACA,MAAO,CAAE,YAAAhC,EAAa,KAAAuB,EAAM,QAASkB,EAAY,QAASC,CAAW,CACvE,EAYaC,EAAyB,CACpC9C,EACA+C,EACArC,EACAC,EACAqC,EACAC,IAC6B,CAC7B,MAAMC,EAAUC,EACdnD,EAAK,QACL,CAAE,MAAO,EAAG,OAAQ,CAAE,EACtBU,CACF,EACA,IAAI0C,EAAUD,EAAgBnD,EAAK,QAAS+C,EAAUrC,CAAW,EAC7DgB,EAAOyB,EAAgBnD,EAAK,KAAM+C,EAAUrC,CAAW,EAEjD0C,EAAAC,GAAyBD,EAASL,EAAUrC,CAAW,EAEjE,IAAIP,EAAcH,EAAK,YACvB,GAAIgD,EAAuB,CACzB,MAAMM,EAAMC,GACVpD,EACAuB,EACAwB,EACAE,EACAL,EACArC,EACAuC,EAAS,EACTA,EAAS,CACX,EACA9C,EAAcmD,EAAI,YAClB5B,EAAO4B,EAAI,IAAA,CAGb,MAAO,CAAE,YAAAnD,EAAa,KAAAuB,EAAM,QAAAwB,EAAS,QAAAE,EAAS,SAAAL,EAAU,YAAArC,EAAa,QAAAC,CAAQ,CAC/E,EAOa6C,EAAqB,CAAC,CACjC,YAAArD,EACA,QAAA+C,EACA,QAAAE,EACA,KAAA1B,EACA,SAAAqB,CACF,IAAgC,CAC9B,MAAMU,EAAkB,CACtBC,EACAC,EACAC,EACAC,IACG,CACH,GAAIH,EAAM,MAAQC,EAAO,OAASD,EAAM,OAASC,EAAO,OACtD,MAAM5D,EAAsB,KAAK6D,EAAWF,EAAOG,EAAYF,CAAM,CAEzE,EAUE,GANcF,EAAAP,EAASH,EAAU,UAAW,WAAW,EAEzCU,EAAAP,EAASE,EAAS,UAAW,SAAS,EAEtCK,EAAAP,EAASxB,EAAM,UAAW,WAAW,EAEnDvB,EAAY,EAAIuB,EAAK,MAAQqB,EAAS,OACtC5C,EAAY,EAAIuB,EAAK,OAASqB,EAAS,OAEvC,MAAMhD,EAAsB,UAC1B,YACAI,EACAuB,EACA,YACAqB,CACF,CAEJ,EAQae,EAAwB,CAAC,CACpC,KAAApC,EACA,QAAAwB,EACA,QAAAE,EACA,YAAA1C,CACF,IAA2C,CACnC,MAAAqD,EAAU,CAAE,GAAGrC,CAAK,EAC1B,OAAI0B,IACEW,EAAQ,MAAQX,EAAQ,QAC1BW,EAAQ,MAAQX,EAAQ,MACxBW,EAAQ,OAASrD,EACb0C,EAAQ,MAAQ1C,EAChBqD,EAAQ,QAGVA,EAAQ,OAASX,EAAQ,SAC3BW,EAAQ,MAAQrD,EACZ0C,EAAQ,OAAS1C,EACjBqD,EAAQ,MACZA,EAAQ,OAASX,EAAQ,SAIzBF,IACEa,EAAQ,MAAQb,EAAQ,QAC1Ba,EAAQ,MAAQb,EAAQ,MACxBa,EAAQ,OAASrD,EACbwC,EAAQ,MAAQxC,EAChBqD,EAAQ,QAGVA,EAAQ,OAASb,EAAQ,SAC3Ba,EAAQ,MAAQrD,EACZwC,EAAQ,OAASxC,EACjBqD,EAAQ,MACZA,EAAQ,OAASb,EAAQ,SAItBa,CACT,EASMC,EAAc,CAClBC,EACAtC,EACAjB,IACoB,CACpB,MAAMwD,EAAWD,EAAkBtC,EACnC,MAAO,CAAE,MAAOuC,EAAU,OAAQA,EAAWxD,CAAY,CAC3D,EASMyD,EAAe,CACnBC,EACAzC,EACAjB,IACoB,CACpB,MAAM2D,EAAYD,EAAmBzC,EACrC,MAAO,CAAE,MAAO0C,EAAY3D,EAAa,OAAQ2D,CAAU,CAC7D,EAUaC,EAAsB,CACjCtE,EACAoD,EACA1C,IACoB,CACpB,IAAIqD,EAAU,CAAE,GAAG/D,EAAK,IAAK,EAC7B,GAAIU,IAAgB,EACX,OAAAqD,EAGH,MAAAQ,EAAYvE,EAAK,YACnB+D,EAAQ,OAASrD,GAAeqD,EAAQ,MACxC/D,EAAK,mBACHwE,EAASxE,EAAK,OAAO,IAAM,GAAKA,EAAK,OAAO,IAAM,EAAI,EAAI,EAC1DyE,EAASzE,EAAK,OAAO,IAAM,GAAKA,EAAK,OAAO,IAAM,EAAI,EAAI,EAChE,GAAIuE,EAAW,CACb,MAAMG,EAASX,EAAQ,OACvBA,EAAU,CAAE,MAAOW,EAAShE,EAAa,OAAAgE,CAAe,CAAA,KACnD,CACL,MAAMC,EAAQZ,EAAQ,MACtBA,EAAU,CAAE,MAAAY,EAAc,OAAQA,EAAQjE,CAAY,CAAA,CAKtD,OAAAV,EAAK,YAAY,EAAI+D,EAAQ,OAAS,EAAI/D,EAAK,OAAO,GACtDoD,EAAQ,QAEEW,EAAAC,EACRZ,EAAQ,MAAQpD,EAAK,YAAY,EACjCwE,EACA9D,CACF,GAKAV,EAAK,YAAY,EAAI+D,EAAQ,QAAU,EAAI/D,EAAK,OAAO,GACvDoD,EAAQ,SAEEW,EAAAI,EACRf,EAAQ,OAASpD,EAAK,YAAY,EAClCyE,EACA/D,CACF,GAIEV,EAAK,YAAY,EAAI+D,EAAQ,MAAQ/D,EAAK,OAAO,EAAI,IACvD+D,EAAUC,EAAYhE,EAAK,YAAY,EAAGwE,EAAQ9D,CAAW,GAI3DV,EAAK,YAAY,EAAI+D,EAAQ,OAAS/D,EAAK,OAAO,EAAI,IACxD+D,EAAUI,EAAanE,EAAK,YAAY,EAAGyE,EAAQ/D,CAAW,GAGzDqD,CACT,EAUMZ,EAAkB,CACtByB,EACAC,EACAnE,IACoB,CACd,MAAAgB,EAAO,CAAE,GAAGkD,CAAU,EAE5B,OAAIlE,GAAe,CAACgB,EAAK,OAAS,CAACA,EAAK,SAClChB,EAAc,EAChBgB,EAAK,OAASmD,EAAW,OAEzBnD,EAAK,MAAQmD,EAAW,OAIvBnD,EAAK,QACRA,EAAK,MAAQhB,EAAcgB,EAAK,OAAShB,EAAcmE,EAAW,OAG/DnD,EAAK,SACRA,EAAK,OAAShB,EAAcgB,EAAK,MAAQhB,EAAcmE,EAAW,QAG7DnD,CACT,EAUM2B,GAA2B,CAC/ByB,EACAC,EACArE,IACG,CACC,IAAA0C,EAAU,CAAE,GAAG0B,CAAa,EAChC,OAAIpE,IACE0C,EAAQ,MAAQA,EAAQ,OAAS1C,EAC3B0C,EAAA,MAAQA,EAAQ,OAAS1C,EAEzB0C,EAAA,OAASA,EAAQ,MAAQ1C,GAIrC0C,EAAUU,EAAsB,CAC9B,KAAMV,EACN,QAAS2B,EACT,YAAArE,CAAA,CACD,EACM0C,CACT,EAeMG,GAAmB,CACvBpD,EACA6E,EACA9B,EACAE,EACA2B,EACArE,EACAuE,EACAC,IACG,CACG,MAAAC,EAAiB,CAAE,GAAGH,CAAU,EAChCI,EAAiB,CAAE,GAAGjF,CAAY,EAElCkF,EAAO,KAAK,IAAIjC,EAAQ,MAAO2B,EAAM,MAAQ5E,EAAY,CAAC,EAC1DmF,EAAO,KAAK,IAAIlC,EAAQ,OAAQ2B,EAAM,OAAS5E,EAAY,CAAC,EAE5D4D,EAAUD,EAAsB,CACpC,KAAMqB,EACN,QAAS,CAAE,MAAOE,EAAM,OAAQC,CAAK,EACrC,QAAApC,EACA,YAAAxC,CAAA,CACD,EACD,OAAAyE,EAAe,MAAQpB,EAAQ,MAC/BoB,EAAe,OAASpB,EAAQ,OAEhCqB,EAAe,EAAIH,GACdF,EAAM,MAAQI,EAAe,OAAS,EACvChF,EAAY,EAChBiF,EAAe,EAAIF,GACdH,EAAM,OAASI,EAAe,QAAU,EACzChF,EAAY,EAET,CAAE,YAAaiF,EAAgB,KAAMD,CAAe,CAC7D,EC/fA,MAAqBI,EAAI,CAchB,YAAY,CACjB,YAAApF,EACA,KAAAuB,EACA,QAAAwB,EACA,QAAAE,EACA,SAAAL,EACA,YAAArC,EACA,QAAAC,CAAA,EAC2B,CArBrBb,EAAA,oBACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,gBAgBD,KAAA,YAAc,CAAE,GAAGK,CAAY,EAC/B,KAAA,KAAO,CAAE,GAAGuB,CAAK,EACjB,KAAA,QAAU,CAAE,GAAGwB,CAAQ,EACvB,KAAA,QAAU,CAAE,GAAGE,CAAQ,EACvB,KAAA,QAAU,CAAE,GAAGL,CAAS,EAC7B,KAAK,YAAcrC,EACnB,KAAK,QAAUC,CAAA,CAQV,SAAS6E,EAA0B,CACpC,OAAAA,EAAI,MAAQ,KAAK,QAAQ,OAASA,EAAI,OAAS,KAAK,QAAQ,OACvD,CAAE,GAAI,GAAO,QAAS,uDAAwD,EAEnFA,EAAI,MAAQ,KAAK,QAAQ,OAASA,EAAI,OAAS,KAAK,QAAQ,OACvD,CAAE,GAAI,GAAO,QAAS,+CAAgD,EAE3E,KAAK,aAAeA,EAAI,MAAQA,EAAI,OAAS,KAAK,YAAc,KAAK,QAChE,CAAE,GAAI,GAAO,QAAS,uDAAwD,EAEnFA,EAAI,EAAI,GAAKA,EAAI,EAAI,KAAK,QAAQ,OAASA,EAAI,EAAI,GAAKA,EAAI,EAAI,KAAK,QAAQ,OACxE,CAAE,GAAI,GAAO,QAAS,yDAA0D,EAErFA,EAAI,EAAIA,EAAI,MAAQ,KAAK,QAAQ,OAASA,EAAI,EAAIA,EAAI,OAAS,KAAK,QAAQ,OACvE,CAAE,GAAI,GAAO,QAAS,kDAAmD,GAGlF,KAAK,YAAc,CAAE,EAAGA,EAAI,EAAG,EAAGA,EAAI,CAAE,EACxC,KAAK,KAAO,CAAE,MAAOA,EAAI,MAAO,OAAQA,EAAI,MAAO,EAC5C,CAAE,GAAI,GAAM,QAAS,SAAU,EAAA,CAQjC,KAAKrF,EAAqC,CAE1C,KAAA,YAAY,EAAI,KAAK,IACxB,KAAK,IAAIA,EAAY,EAAG,CAAC,EACzB,KAAK,QAAQ,MAAQ,KAAK,KAAK,KACjC,EACK,KAAA,YAAY,EAAI,KAAK,IACxB,KAAK,IAAIA,EAAY,EAAG,CAAC,EACzB,KAAK,QAAQ,OAAS,KAAK,KAAK,MAClC,CAAA,CASK,OAAOuB,EAAuB+D,EAA2B,CAC1D,GAAAA,EAAO,EAAI,GAAKA,EAAO,EAAI,GAAKA,EAAO,EAAI,GAAKA,EAAO,EAAI,EAC7D,MAAO,CAAE,GAAI,GAAO,QAAS,uDAAwD,EAEvF,MAAMC,EAAQ,KAAK,YAAY,EAAI,KAAK,KAAK,MAAQD,EAAO,EACtDE,EAAQ,KAAK,YAAY,EAAI,KAAK,KAAK,OAASF,EAAO,EAGvDG,EAAIF,EAAQhE,EAAK,MAAQ+D,EAAO,EAChCI,EAAIF,EAAQjE,EAAK,OAAS+D,EAAO,EAGhC,OAAA,KAAK,SAAS,CAAE,EAAAG,EAAG,EAAAC,EAAG,MAAOnE,EAAK,MAAO,OAAQA,EAAK,MAAA,CAAQ,CAAA,CAShE,MAAMoE,EAAgBL,EAA2B,CAChD,MAAAd,EAAQ,KAAK,KAAK,MAAQmB,EAC1BpB,EAAS,KAAK,KAAK,OAASoB,EAClC,OAAO,KAAK,OAAO,CAAE,MAAAnB,EAAO,OAAAD,CAAA,EAAUe,CAAM,CAAA,CAOvC,YAAa,CACX,MAAA,CAAE,GAAG,KAAK,OAAQ,CAAA,CAOpB,iBAA0C,CACxC,MAAA,CAAE,EAAG,KAAK,YAAY,EAAG,EAAG,KAAK,YAAY,CAAE,CAAA,CAOjD,UAAgC,CAC9B,MAAA,CACL,EAAG,KAAK,YAAY,EACpB,EAAG,KAAK,YAAY,EACpB,MAAO,KAAK,KAAK,MACjB,OAAQ,KAAK,KAAK,MACpB,CAAA,CAOK,cAAoC,CACzC,OAAO,KAAK,SAAS,CAAA,CAQhB,iBAAiB,CAAE,MAAAd,EAAO,OAAAD,GAAgD,CACxE,MAAA,CACL,EAAG,KAAK,YAAY,EAAIC,EACxB,EAAG,KAAK,YAAY,EAAID,EACxB,MAAO,KAAK,KAAK,MAAQC,EACzB,OAAQ,KAAK,KAAK,OAASD,CAC7B,CAAA,CAOK,iBAAuC,CACrC,MAAA,CACL,EAAI,KAAK,YAAY,EAAI,KAAK,QAAQ,MAAS,IAC/C,EAAI,KAAK,YAAY,EAAI,KAAK,QAAQ,OAAU,IAChD,MAAQ,KAAK,KAAK,MAAQ,KAAK,QAAQ,MAAS,IAChD,OAAS,KAAK,KAAK,OAAS,KAAK,QAAQ,OAAU,GACrD,CAAA,CAQK,6BAA6Be,EAAmD,CACrF,MAAMG,EACJH,EAAO,IAAM,GACT,GACA,KAAK,YAAY,EAAI,KAAK,KAAK,OAAS,EAAIA,EAAO,GACnDI,EACJJ,EAAO,IAAM,GACT,GACA,KAAK,YAAY,EAAI,KAAK,KAAK,QAAU,EAAIA,EAAO,GACnD,MAAA,CAAE,EAAAG,EAAG,EAAAC,CAAE,CAAA,CAQT,qCAAqCE,EAAoC,CACxE,MAAA/F,EAAO,KAAK,0BAA0B+F,CAAM,EAClD,GAAI/F,EAAK,KAAK,QAAU,GAAKA,EAAK,KAAK,SAAW,EACzC,MAAA,GAGH,MAAA0B,EAAO,KAAK,uBAAuB1B,CAAI,EACvCG,EAAc,KAAK,6BACvBH,EAAK,YACL0B,EACA1B,EAAK,MACP,EAGA,OAAIG,EAAY,EAAI,GAAKA,EAAY,EAAIuB,EAAK,MAAQ,KAAK,QAAQ,OAASvB,EAAY,EAAI,GAAKA,EAAY,EAAIuB,EAAK,OAAS,KAAK,QAAQ,OACnI,IAGT,KAAK,KAAOA,EACZ,KAAK,YAAcvB,EAEZ,GAAA,CAQD,0BAA0B4F,EAAyD,CACzF,MAAMrE,EAAO,CACX,MAAOqE,EAAO,KAAK,OAAS,KAAK,KAAK,MACtC,OAAQA,EAAO,KAAK,QAAU,KAAK,KAAK,MAC1C,EACM5F,EAAc,CAClB,EAAG4F,EAAO,YAAY,GAAK,KAAK,YAAY,EAAI,KAAK,KAAK,MAAQ,EAClE,EAAGA,EAAO,YAAY,GAAK,KAAK,YAAY,EAAI,KAAK,KAAK,OAAS,CACrE,EACMC,EAAqBD,EAAO,YAAY,IAAM,KAC9CE,EAAcD,GAAsBD,EAAO,YAAY,IAAM,KAC5D,MAAA,CACL,KAAArE,EACA,YAAAvB,EACA,mBAAA6F,EACA,YAAAC,EACA,OAAQF,EAAO,MACjB,CAAA,CAQM,uBAAuB/F,EAA4C,CACzE,MAAM0B,EAAO4C,EAAoBtE,EAAM,KAAK,QAAS,KAAK,WAAW,EAO9D,OANO8D,EAAsB,CAClC,KAAApC,EACA,QAAS,KAAK,QACd,QAAS,KAAK,QACd,YAAa,KAAK,WAAA,CACnB,CACM,CAUD,6BACNvB,EACAuB,EACA+D,EACwB,CACjB,MAAA,CACL,EAAGtF,EAAY,EAAIuB,EAAK,MAAQ+D,EAAO,EACvC,EAAGtF,EAAY,EAAIuB,EAAK,OAAS+D,EAAO,CAC1C,CAAA,CAEJ,CC3RA,SAAwBS,GAAYnF,EAAyB,CACnDA,EAAA,iBAAiB,aAAcoF,CAAkB,EACjDpF,EAAA,iBAAiB,WAAYoF,CAAkB,EAC/CpF,EAAA,iBAAiB,YAAaoF,CAAkB,CAC1D,CAMA,SAASA,EAAmBC,EAAU,CACpCA,EAAE,eAAe,EACjB,MAAMC,EAAQD,EACRE,EAAQD,EAAM,eAAe,CAAC,EAEpCC,EAAM,OAAO,cACX,IAAI,WAAWC,GAAuBF,EAAM,IAAI,EAAG,CACjD,QAAS,GACT,WAAY,GACZ,KAAM,OACN,QAASC,EAAM,QACf,QAASA,EAAM,QACf,QAASA,EAAM,QACf,QAASA,EAAM,OAChB,CAAA,CACH,CACF,CAMA,SAASC,GAAuB7D,EAAc,CAC5C,OAAQA,EAAM,CACZ,IAAK,aACI,MAAA,YACT,IAAK,YACI,MAAA,YACT,QACS,MAAA,SAAA,CAEb,CCrCA,MAAqB8D,EAAW,CASvB,YAAYvF,EAAwBE,EAAmB,CARtDrB,EAAA,cAA2B,CAAC,GASlC,QAAS,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,MAAM2G,EAAMvF,EAAU,GAAGC,CAAS,IAAI,CAAC,GAAIF,CAAM,EAC5C,KAAA,OAAO,KAAKwF,CAAG,CAAA,CACtB,CAMK,MAAa,CACP,UAAAzF,KAAM,KAAK,OACpBA,EAAG,MAAM,QAAU,MACrB,CAMK,MAAa,CACP,UAAAA,KAAM,KAAK,OACpBA,EAAG,MAAM,QAAU,OACrB,CAMK,SAAgB,CACV,UAAAA,KAAM,KAAK,OACpBA,EAAG,OAAO,CACZ,CAQK,UAAUwE,EAAgC,CACzC,MAAAkB,EAAKlB,EAAI,EAAIA,EAAI,MACjBmB,EAAKnB,EAAI,EAAIA,EAAI,OAGvB,KAAK,OAAO,CAAC,EAAE,MAAM,OAAS,GAAGA,EAAI,CAAC,KACtC,KAAK,OAAO,CAAC,EAAE,MAAM,KAAO,GAAGA,EAAI,CAAC,KAC/B,KAAA,OAAO,CAAC,EAAE,MAAM,MAAQ,eAAeA,EAAI,KAAK,QAAQA,EAAI,CAAC,MAGlE,KAAK,OAAO,CAAC,EAAE,MAAM,KAAO,GAAGkB,CAAE,KAGjC,KAAK,OAAO,CAAC,EAAE,MAAM,KAAO,GAAGlB,EAAI,CAAC,KAC/B,KAAA,OAAO,CAAC,EAAE,MAAM,MAAQ,eAAeA,EAAI,KAAK,QAAQA,EAAI,CAAC,MAClE,KAAK,OAAO,CAAC,EAAE,MAAM,IAAM,GAAGmB,CAAE,KAGhC,KAAK,OAAO,CAAC,EAAE,MAAM,MAAQ,GAAGnB,EAAI,CAAC,IAAA,CAEzC,CCrEA,MAAqBoB,EAAa,CA8BzB,YACL3F,EACAE,EACA0F,EACAC,EACA,CA/BMhH,EAAA,iBAIAA,EAAA,WAIAA,EAAA,kBAAa,CAAE,OAAQ,EAAG,OAAQ,CAAE,GAIpCA,EAAA,qBAAyB,IAIzBA,EAAA,iBAgBN,KAAK,SAAW+G,EACX,KAAA,GAAK3F,EAAUC,EAAWF,CAAM,EACjC6F,GAEG,KAAA,SAAW,KAAK,WAAW,EAChC,KAAK,GAAG,iBAAiB,YAAa,KAAK,QAAQ,GAEnD,KAAK,KAAK,CACZ,CAMK,MAAa,CACb,KAAA,GAAG,MAAM,QAAU,MAAA,CAMnB,MAAa,CACb,KAAA,GAAG,MAAM,QAAU,OAAA,CAMnB,SAAgB,CACjB,KAAK,UACP,KAAK,GAAG,oBAAoB,YAAa,KAAK,QAAQ,EAExD,KAAK,GAAG,OAAO,CAAA,CAWT,YAAsC,CACtC,MAAAC,EAAeX,GAAkB,CACrCA,EAAE,gBAAgB,EAET,SAAA,iBAAiB,YAAaY,CAAW,EACzC,SAAA,iBAAiB,UAAWC,CAAS,EAG9C,KAAK,WAAa,CAAE,OAAQb,EAAE,QAAS,OAAQA,EAAE,OAAQ,EACzD,KAAK,cAAgB,EACvB,EAEMY,EAAeZ,GAAkB,CAErC,GADAA,EAAE,gBAAgB,EACd,KAAK,cAAe,CAEtB,MAAMpG,EAAO,CAAE,EAAGoG,EAAE,QAAS,EAAGA,EAAE,OAAQ,EAC1C,KAAK,SAAS,CAAE,KAAM,aAAc,KAAApG,EAAM,CAAA,MAG1C,KAAK,kBAAkBoG,EAAE,QAASA,EAAE,OAAO,CAE/C,EAEMa,EAAab,GAAkB,CACnCA,EAAE,gBAAgB,EAET,SAAA,oBAAoB,YAAaY,CAAW,EAC5C,SAAA,oBAAoB,UAAWC,CAAS,EAG7C,KAAK,eACP,KAAK,SAAS,CAAE,KAAM,WAAA,CAAa,CAEvC,EAEO,OAAAF,CAAA,CAYD,kBAAkBG,EAAgBC,EAAsB,CAE9D,GAAID,IAAW,KAAK,WAAW,QAAUC,IAAW,KAAK,WAAW,OAClE,OAII,MAAAC,EAAcF,EAAS,KAAK,WAAW,OACvCG,EAAaF,EAAS,KAAK,WAAW,OAGtC,CAACvB,EAAGjB,CAAK,EAAIyC,EACf,CAACF,EAAQ,KAAK,WAAW,OAASA,CAAM,EACxC,CAAC,KAAK,WAAW,OAAQA,EAAS,KAAK,WAAW,MAAM,EACtD,CAACrB,EAAGnB,CAAM,EAAI2C,EAChB,CAACF,EAAQ,KAAK,WAAW,OAASA,CAAM,EACxC,CAAC,KAAK,WAAW,OAAQA,EAAS,KAAK,WAAW,MAAM,EAGtDnH,EAAO,CACX,YAAa,CAAE,EAAA4F,EAAG,EAAAC,CAAE,EACpB,KAAM,CAAE,MAAAlB,EAAO,OAAAD,CAAO,EACtB,YAAA0C,EACA,WAAAC,CACF,EAGA,KAAK,cAAgB,KAAK,SAAS,CAAE,KAAM,eAAgB,KAAArH,EAAM,CAAA,CAErE,CC7JA,MAAqBsH,EAAU,CA0BtB,YACLrG,EACAE,EACA0F,EACAC,EACA,CA3BMhH,EAAA,iBAIAA,EAAA,WAIAA,EAAA,eAIAA,EAAA,iBAgBN,KAAK,SAAW+G,EAEX,KAAA,GAAK3F,EAAUC,EAAWF,CAAM,EACrC,KAAK,OAAS6F,EACVA,GAEG,KAAA,SAAW,KAAK,WAAW,EAChC,KAAK,GAAG,iBAAiB,YAAa,KAAK,QAAQ,GAE9C,KAAA,GAAG,MAAM,OAAS,SACzB,CAQK,UAAUtB,EAAgC,CAC1C,KAAA,GAAG,MAAM,UAAY,aAAaA,EAAI,CAAC,OAAOA,EAAI,CAAC,MACxD,KAAK,GAAG,MAAM,MAAQ,GAAGA,EAAI,KAAK,KAClC,KAAK,GAAG,MAAM,OAAS,GAAGA,EAAI,MAAM,IAAA,CAM/B,MAAa,CACb,KAAA,GAAG,MAAM,QAAU,OACnB,KAAA,GAAG,MAAM,OAAS,SAAA,CAMlB,MAAa,CACb,KAAA,GAAG,MAAM,QAAU,QACnB,KAAA,GAAG,MAAM,OAAS,MAAA,CAMlB,SAAgB,CACjB,KAAK,UACP,KAAK,GAAG,oBAAoB,YAAa,KAAK,QAAQ,EAExD,KAAK,GAAG,OAAO,CAAA,CAWT,YAAsC,CACtC,MAAAuB,EAAeX,GAAkB,CAEjC,GADJA,EAAE,gBAAgB,EACd,CAAC,KAAK,OACR,OAEO,SAAA,iBAAiB,YAAaY,CAAW,EACzC,SAAA,iBAAiB,UAAWC,CAAS,EAG9C,MAAMjH,EAAO,CAAE,EAAGoG,EAAE,QAAS,EAAGA,EAAE,OAAQ,EAC1C,KAAK,SAAS,CAAE,KAAM,cAAe,KAAApG,EAAM,CAC7C,EAEMgH,EAAeZ,GAAkB,CACrCA,EAAE,gBAAgB,EAGlB,MAAMpG,EAAO,CAAE,EAAGoG,EAAE,QAAS,EAAGA,EAAE,OAAQ,EAC1C,KAAK,SAAS,CAAE,KAAM,aAAc,KAAApG,EAAM,CAC5C,EAEMiH,EAAab,GAAkB,CACnCA,EAAE,gBAAgB,EACT,SAAA,oBAAoB,YAAaY,CAAW,EAC5C,SAAA,oBAAoB,UAAWC,CAAS,EAGjD,MAAMjH,EAAO,CAAE,EAAGoG,EAAE,QAAS,EAAGA,EAAE,OAAQ,EAC1C,KAAK,SAAS,CAAE,KAAM,YAAa,KAAApG,EAAM,CAC3C,EAEO,OAAA+G,CAAA,CAEX,CC5HO,MAAMQ,GAAyB,CAAC,OAAQ,WAAY,SAAS,EAyRxD,IAAAC,GAAAA,IAEVA,EAAA,QAAU,UAEVA,EAAA,MAAQ,QAERA,EAAA,UAAY,YAEZA,EAAA,MAAQ,QAREA,IAAAA,GAAA,CAAA,CAAA,ECxRZ,MAAMC,GAAShI,EAAU,KAOzB,SAASiI,GAAsBC,EAAa,CACnC,OAAAA,EAAI,OAAO,CAAC,EAAE,cAAgBA,EAAI,MAAM,CAAC,CAClD,CAOA,SAASC,EAAMnF,EAAc,CACpB,OAAqBA,GAAQ,IACtC,CAWA,SAASoF,EACPrH,EACAiC,EACAqF,EACAC,EAAqB,GACrBC,EAA2B,GAC3B,CACI,GAAAJ,EAAMnF,CAAG,EACJ,OAAAqF,EAEL,GAAA,OAAOrF,GAAQ,SACX,MAAAlC,EAAwB,IAAIC,EAAM,QAAQ,EAE9C,GAAA,OAAO,MAAMiC,CAAG,EAClB,MAAMlC,EAAwB,IAAIC,EAAM,MAAO,EAAK,EAEtD,GAAIuH,EAAYtF,EAAM,EAAIA,GAAO,EACzB,MAAAlC,EAAwB,IAAIC,EAAM,UAAU,EAEpD,GAAI,CAACwH,GAAmBvF,EAAM,GAAKA,EAAM,EACjC,MAAAlC,EAAwB,IAAIC,EAAM,YAAY,EAG/C,OAAAiC,CACT,CAUA,SAASwF,EAAUzH,EAAciC,EAAcoC,EAAqB,CAC9D,GAAA+C,EAAMnF,CAAG,EACJ,OAAAoC,EAEL,GAAA,OAAOpC,GAAQ,UACX,MAAAlC,EAAwB,IAAIC,EAAM,SAAS,EAE5C,OAAAiC,CACT,CAUA,SAASyF,EACP1H,EACAiC,EACAqF,EACqB,CACjB,GAAAF,EAAMnF,CAAG,EACJ,OAAAqF,EAET,GAAI,OAAOrF,GAAQ,UAAY,CAAC8E,GAAuB,SAAS9E,CAA0B,EAClF,MAAAlC,EAAwB,IAAIC,EAAM,UAAU,EAE7C,OAAAiC,CACT,CASa,MAAA0F,GAAe,CAC1BC,EACAC,IACG,qCACG,MAAAC,EAAOD,GAAW,CAAC,EACzB,GAAI,OAAOC,GAAS,UAAYA,IAAS,KACjC,MAAA/H,EAAwB,IAAI,UAAW,QAAQ,EASjD,MAAAgI,EAAW,CAAC/H,EAAciC,IAAiB,CAEzC,MAAA+F,EAAQJ,EAAQ,GAAGX,EAAM,GAAGC,GAAsBlH,CAAI,CAAC,EAAE,EAG/D,GAAI,CAACgI,EACI,OAAA/F,EAGH,MAAAgG,EAAQD,EAAM,YAAY,EAChC,OAAIC,IAAU,QAAUA,IAAU,aAAeA,IAAU,MAClDhG,EAQL+F,EAAM,OAAO,SAAW,GAAK,CAAC,OAAO,MAAM,OAAOA,CAAK,CAAC,EACnD,OAAOA,CAAK,EAIjBC,IAAU,OACL,GAILA,IAAU,QACL,GAIFD,CACT,EAEME,EAAc,CAClB,YAAaH,EAAS,cAAeD,EAAK,WAAW,EACrD,QAASC,EAAS,UAAWD,EAAK,OAAO,EACzC,UAAWC,EAAS,YAAaD,EAAK,SAAS,EAC/C,kBAAmBC,EAAS,oBAAqBD,EAAK,iBAAiB,EACvE,UAAWC,EAAS,YAAaD,EAAK,SAAS,EAC/C,YAAaC,EAAS,cAAeD,EAAK,WAAW,EACrD,WAAYC,EAAS,aAAcD,EAAK,UAAU,EAClD,QAAS,CACP,MAAOC,EAAS,gBAAgBI,EAAAL,EAAK,UAAL,YAAAK,EAAc,KAAK,EACnD,OAAQJ,EAAS,iBAAiBK,EAAAN,EAAK,UAAL,YAAAM,EAAc,MAAM,EACtD,KAAML,EAAS,eAAeM,EAAAP,EAAK,UAAL,YAAAO,EAAc,IAAI,CAClD,EACA,QAAS,CACP,MAAON,EAAS,gBAAgBO,EAAAR,EAAK,UAAL,YAAAQ,EAAc,KAAK,EACnD,OAAQP,EAAS,iBAAiBQ,EAAAT,EAAK,UAAL,YAAAS,EAAc,MAAM,EACtD,KAAMR,EAAS,eAAeS,EAAAV,EAAK,UAAL,YAAAU,EAAc,IAAI,CAClD,EACA,UAAW,CACT,EAAGT,EAAS,cAAcU,EAAAX,EAAK,YAAL,YAAAW,EAAgB,CAAC,EAC3C,EAAGV,EAAS,cAAcW,EAAAZ,EAAK,YAAL,YAAAY,EAAgB,CAAC,EAC3C,MAAOX,EAAS,kBAAkBY,EAAAb,EAAK,YAAL,YAAAa,EAAgB,KAAK,EACvD,OAAQZ,EAAS,mBAAmBa,EAAAd,EAAK,YAAL,YAAAc,EAAgB,MAAM,EAC1D,KAAMb,EAAS,iBAAiBc,EAAAf,EAAK,YAAL,YAAAe,EAAgB,IAAI,CACtD,EACA,YAAa,CACX,EAAGd,EAAS,gBAAgBe,EAAAhB,EAAK,cAAL,YAAAgB,EAAkB,CAAC,EAC/C,EAAGf,EAAS,gBAAgBgB,EAAAjB,EAAK,cAAL,YAAAiB,EAAkB,CAAC,EAC/C,MAAOhB,EAAS,oBAAoBiB,EAAAlB,EAAK,cAAL,YAAAkB,EAAkB,KAAK,EAC3D,OAAQjB,EAAS,qBAAqBkB,EAAAnB,EAAK,cAAL,YAAAmB,EAAkB,MAAM,EAC9D,KAAMlB,EAAS,mBAAmBmB,EAAApB,EAAK,cAAL,YAAAoB,EAAkB,IAAI,CAAA,CAE5D,EACA,OAAI9B,EAAMc,EAAY,UAAU,CAAC,GAAKd,EAAMc,EAAY,UAAU,CAAC,GAAKd,EAAMc,EAAY,UAAU,KAAK,GAAKd,EAAMc,EAAY,UAAU,MAAM,IAC9IA,EAAY,UAAYA,EAAY,aAE/BA,CACT,EASMiB,EAAmB,CAACC,EAAWC,EAAWlJ,IAC9C,KAAK,IAAIiJ,EAAIC,CAAC,EAAIlJ,EAQPmJ,GAAkBzB,GAA6C,OAC1E,MAAM3H,EAAcmH,EAAS,cAAeQ,EAAQ,YAAa,EAAG,GAAO,EAAI,EACzE1H,EAAUkH,EAAS,UAAWQ,EAAQ,QAAS5I,EAAU,QAAS,GAAM,EAAI,EAC5EyD,EAAU,CACd,MAAO2E,EAAS,eAAgBQ,EAAQ,QAAQ,MAAO,CAAC,EACxD,OAAQR,EAAS,gBAAiBQ,EAAQ,QAAQ,OAAQ,CAAC,EAC3D,KAAMH,EAAW,eAAeS,EAAAN,EAAQ,UAAR,YAAAM,EAAiB,KAAM,MAAM,CAC/D,EACMvF,EAAU,CACd,MAAOyE,EAAS,eAAgBQ,EAAQ,QAAQ,MAAO,CAAC,EACxD,OAAQR,EAAS,gBAAiBQ,EAAQ,QAAQ,OAAQ,CAAC,EAC3D,KAAMH,EAAW,cAAeG,EAAQ,QAAQ,KAAM,MAAM,CAC9D,EACM0B,EAAgB,CACpB,EAAGlC,EAAS,aAAcQ,EAAQ,UAAU,EAAG,EAAG,EAAI,EACtD,EAAGR,EAAS,aAAcQ,EAAQ,UAAU,EAAG,EAAG,EAAI,EACtD,MAAOR,EAAS,iBAAkBQ,EAAQ,UAAU,MAAO,CAAC,EAC5D,OAAQR,EAAS,kBAAmBQ,EAAQ,UAAU,OAAQ,CAAC,EAC/D,KAAMH,EAAW,gBAAiBG,EAAQ,UAAU,KAAM,MAAM,EAChE,UAAWT,EAAMS,EAAQ,UAAU,CAAC,EACpC,UAAWT,EAAMS,EAAQ,UAAU,CAAC,EACpC,YAAa,EACf,EACA0B,EAAc,YACZA,EAAc,QAAU,GAAKA,EAAc,SAAW,EAExD,MAAM/E,EAAY,CAChB,EAAG6C,EAAS,eAAgBQ,EAAQ,YAAY,EAAG,EAAG,EAAI,EAC1D,EAAGR,EAAS,eAAgBQ,EAAQ,YAAY,EAAG,EAAG,EAAI,EAC1D,MAAOR,EAAS,mBAAoBQ,EAAQ,YAAY,MAAO,CAAC,EAChE,OAAQR,EAAS,oBAAqBQ,EAAQ,YAAY,OAAQ,CAAC,EACnE,KAAMH,EAAW,kBAAmBG,EAAQ,YAAY,KAAM,MAAM,EACpE,UAAWT,EAAMS,EAAQ,YAAY,CAAC,EACtC,UAAWT,EAAMS,EAAQ,YAAY,CAAC,EACtC,YAAa,EACf,EAGA,GAFArD,EAAU,YAAcA,EAAU,QAAU,GAAKA,EAAU,SAAW,EAElEtE,EAAa,CACX,GAAAwC,EAAQ,OAASA,EAAQ,OAAQ,CAC7B,MAAAzC,EAAwByC,EAAQ,MAAQA,EAAQ,OACtD,GAAI,CAACyG,EAAiBlJ,EAAuBC,EAAaC,CAAO,EAC/D,MAAMJ,EAAwB,YAC5B,UACAE,EACAC,EACAC,CACF,CACF,CAEE,GAAAqE,EAAU,OAASA,EAAU,OAAQ,CACjC,MAAAvE,EAAwBuE,EAAU,MAAQA,EAAU,OAC1D,GAAI,CAAC2E,EAAiBlJ,EAAuBC,EAAaC,CAAO,EAC/D,MAAMJ,EAAwB,YAC5B,cACAE,EACAC,EACAC,CACF,CACF,CAEE,GAAAoJ,EAAc,OAASA,EAAc,OAAQ,CACzC,MAAAtJ,EAAwBsJ,EAAc,MAAQA,EAAc,OAClE,GAAI,CAACJ,EAAiBlJ,EAAuBC,EAAaC,CAAO,EAC/D,MAAMJ,EAAwB,YAC5B,YACAE,EACAC,EACAC,CACF,CACF,CACF,CAGF,GAAI,CAACoJ,EAAc,WAAaA,EAAc,QAAU,EAChD,MAAAxJ,EAAwB,YAAY,eAAe,EAE3D,GAAI,CAACwJ,EAAc,WAAaA,EAAc,SAAW,EACjD,MAAAxJ,EAAwB,aAAa,eAAe,EAG5D,GAAI,CAACyE,EAAU,WAAaA,EAAU,QAAU,EACxC,MAAAzE,EAAwB,YAAY,WAAW,EAEvD,GAAI,CAACyE,EAAU,WAAaA,EAAU,SAAW,EACzC,MAAAzE,EAAwB,aAAa,WAAW,EAGxD,GAAIyE,EAAU,OAAS,YAAcA,EAAU,EAAIA,EAAU,MAAQ,KAAOA,EAAU,EAAIA,EAAU,OAAS,KACrG,MAAAzE,EAAwB,iBAAiB,WAAW,EAE5D,GAAIwJ,EAAc,OAAS,YAAcA,EAAc,EAAIA,EAAc,MAAQ,KAAOA,EAAc,EAAIA,EAAc,OAAS,KACzH,MAAAxJ,EAAwB,iBAAiB,eAAe,EAG5D,GAAA2C,EAAQ,OAAS,YAAcA,EAAQ,MAAQ,KAAOA,EAAQ,OAAS,KACnE,MAAA3C,EAAwB,iBAAiB,SAAS,EAGtD,GAAA6C,EAAQ,OAAS,YAAcA,EAAQ,MAAQ,KAAOA,EAAQ,OAAS,KACnE,MAAA7C,EAAwB,iBAAiB,SAAS,EAGnD,MAAA,CACL,YAAAG,EACA,QAAAC,EACA,UAAWsH,EAAU,YAAaI,EAAQ,UAAW,EAAI,EACzD,kBAAmBJ,EAAU,oBAAqBI,EAAQ,kBAAmB,EAAK,EAClF,UAAWJ,EAAU,YAAaI,EAAQ,UAAW,EAAI,EACzD,YAAaJ,EAAU,cAAeI,EAAQ,YAAa,EAAI,EAC/D,WAAYH,EAAW,aAAcG,EAAQ,WAAY,MAAM,EAC/D,QAAAnF,EACA,QAAAE,EACA,cAAA2G,EACA,UAAA/E,CACF,CACF,ECvUA,MAAqBgF,EAAO,CAmCnB,YACL/I,EACAE,EACA8I,EACApD,EACAC,EACA,CArCKhH,EAAA,iBAKCA,EAAA,iBAKDA,EAAA,WAKCA,EAAA,eAKAA,EAAA,iBAkBN,KAAK,SAAWmK,EAAK,SACrB,KAAK,SAAWpD,EAChB,KAAK,OAASC,EAET,KAAA,GAAK5F,EAAUC,EAAWF,CAAM,EAChC,KAAA,GAAG,MAAM,OAASgJ,EAAK,OAExBnD,GAEG,KAAA,SAAW,KAAK,WAAW,EAChC,KAAK,GAAG,iBAAiB,YAAa,KAAK,QAAQ,GAEnD,KAAK,KAAK,CACZ,CAMK,MAAa,CACb,KAAA,GAAG,MAAM,QAAU,OAAA,CAMnB,MAAa,CACb,KAAA,GAAG,MAAM,QAAU,MAAA,CAMnB,SAAgB,CACjB,KAAK,UACP,KAAK,GAAG,oBAAoB,YAAa,KAAK,QAAQ,EAExD,KAAK,GAAG,OAAO,CAAA,CAQV,UAAUtB,EAAgC,CACzC,MAAA0E,EAAc,KAAK,GAAG,YACtBC,EAAe,KAAK,GAAG,aACvBC,EAAO5E,EAAI,EAAIA,EAAI,MAAQ,KAAK,SAAS,EAAI0E,EAAc,EAC3DG,EAAM7E,EAAI,EAAIA,EAAI,OAAS,KAAK,SAAS,EAAI2E,EAAe,EAElE,KAAK,GAAG,MAAM,UAAY,aAAaC,CAAI,OAAOC,CAAG,KAAA,CAQhD,SAAU,CACR,MAAA,CACL,OAAQ,CAAE,GAAG,KAAK,QAAS,CAC7B,CAAA,CAUM,YAAa,CACb,MAAAtD,EAAeX,GAAkB,CAEjC,GADJA,EAAE,gBAAgB,EACd,CAAC,KAAK,OACR,OAEO,SAAA,iBAAiB,YAAaY,CAAW,EACzC,SAAA,iBAAiB,UAAWC,CAAS,EAGxC,MAAAjH,EAAO,KAAK,QAAQ,EAC1B,KAAK,SAAS,CAAE,KAAM,cAAe,KAAAA,EAAM,CAC7C,EAEMgH,EAAeZ,GAAkB,CACrCA,EAAE,gBAAgB,EAGlB,MAAMpG,EAAO,CAAE,EAAGoG,EAAE,QAAS,EAAGA,EAAE,OAAQ,EAC1C,KAAK,SAAS,CAAE,KAAM,aAAc,KAAApG,EAAM,CAC5C,EAEMiH,EAAab,GAAkB,CACnCA,EAAE,gBAAgB,EACT,SAAA,oBAAoB,YAAaY,CAAW,EAC5C,SAAA,oBAAoB,UAAWC,CAAS,EAGjD,KAAK,SAAS,CAAE,KAAM,WAAA,CAAa,CACrC,EAEO,OAAAF,CAAA,CAEX,CC3IA,MAAMuD,GAAU,CACd,CAAE,SAAU,CAAE,EAAG,EAAG,EAAG,CAAK,EAAA,OAAQ,WAAY,EAChD,CAAE,SAAU,CAAE,EAAG,GAAK,EAAG,CAAK,EAAA,OAAQ,UAAW,EACjD,CAAE,SAAU,CAAE,EAAG,EAAG,EAAG,CAAK,EAAA,OAAQ,WAAY,EAChD,CAAE,SAAU,CAAE,EAAG,EAAG,EAAG,EAAO,EAAA,OAAQ,UAAW,EACjD,CAAE,SAAU,CAAE,EAAG,EAAG,EAAG,CAAK,EAAA,OAAQ,WAAY,EAChD,CAAE,SAAU,CAAE,EAAG,GAAK,EAAG,CAAK,EAAA,OAAQ,UAAW,EACjD,CAAE,SAAU,CAAE,EAAG,EAAG,EAAG,CAAK,EAAA,OAAQ,WAAY,EAChD,CAAE,SAAU,CAAE,EAAG,EAAG,EAAG,EAAA,EAAO,OAAQ,UAAW,CACnD,EAUA,MAAqBC,EAAQ,CAmBpB,YACLtJ,EACAE,EACA0F,EACAC,EACA0D,EACA,CArBM1K,EAAA,WAIAA,EAAA,eAAoB,CAAC,GAkBtB,KAAA,GAAKoB,EAAUC,EAAWF,CAAM,EACrC,UAAWgJ,KAAQK,GAAS,CAC1B,MAAMG,EAAS,IAAIT,GACjB,KAAK,GACLQ,EACAP,EACApD,EACAC,CACF,EACK,KAAA,QAAQ,KAAK2D,CAAM,CAAA,CAC1B,CAMK,MAAa,CACP,UAAAA,KAAU,KAAK,QACxBA,EAAO,KAAK,CACd,CAMK,MAAa,CACP,UAAAA,KAAU,KAAK,QACxBA,EAAO,KAAK,CACd,CAMK,SAAgB,CACV,UAAAA,KAAU,KAAK,QACxBA,EAAO,QAAQ,EAEjB,KAAK,GAAG,OAAO,CAAA,CAQV,UAAUjF,EAAgC,CACpC,UAAAiF,KAAU,KAAK,QACxBA,EAAO,UAAUjF,CAAG,CACtB,CAUK,oBAAoB4B,EAAsBC,EAA6B,CAC5E,OAAID,EACKC,EAAa,KAAK,QAAQ,CAAC,EAAI,KAAK,QAAQ,CAAC,EAE7CA,EAAa,KAAK,QAAQ,CAAC,EAAI,KAAK,QAAQ,CAAC,CACtD,CAEJ,CCrFA,MAAMqD,EAAc,CAAE,MAAO,EAAG,OAAQ,CAAE,EAC1C,MAAqBC,EAAY,CA2CxB,YACL5J,EACA6J,EACA,CA7CM9K,EAAA,kBAAa,IACbA,EAAA,sBACAA,EAAA,gBAEAA,EAAA,gBACAA,EAAA,qBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,mBAEAA,EAAA,YAEAA,EAAA,oBACAA,EAAA,qBAWAA,EAAA,YAAO4K,GACP5K,EAAA,gBAAW4K,GACX5K,EAAA,aAAQ4K,GACR5K,EAAA,iBAAY,IACZA,EAAA,oBAAe,IAChBA,EAAA,cAAS0H,EAAkB,SAC3B1H,EAAA,gBAAW,KAAK,MAAM,KAAK,IAAI,GAC9BA,EAAA,iBACAA,EAAA,0BAEAA,EAAA,iBAAkC,CACxC,aAAc,OACd,YAAa,OACb,aAAc,OACd,UAAW,OACX,QAAS,MACX,GAMM,GAAA,CACF,KAAK,uBAAuB8K,CAAY,EACxC,KAAM,CAACC,EAAKC,CAAS,EAAIhK,EAAgBC,CAAO,EAChD,KAAK,QAAU8J,EACXC,EACF,KAAK,cAAgBA,EAErB,KAAK,WAAa,GAEf,KAAA,aAAatD,EAAkB,OAAO,EAG3C,MAAMuD,EAAiB5C,GAAa,KAAK,QAAQ,QAASyC,CAAY,EACjE,KAAA,QAAUd,GAAeiB,CAAc,EAE5C,KAAK,kBAAkB,QAChBC,EAAO,CAEZ,GAAAA,aAAiBrL,GACjBqL,aAAiBzK,EAEjB,KAAK,gBAAgByK,CAAK,MAEpB,OAAAA,CACR,CACF,CAGK,iBAA4C,CAQjD,GAPI,KAAK,SAAW,SAIhB,CAAC,KAAK,QAAQ,UAGd,KAAK,QAAQ,eAAiB,GAAK,KAAK,QAAQ,gBAAkB,EAC7D,OAAA,KAGH,MAAAvI,EAAM,KAAK,SAAS,MAAM,EAM9B,GALE,CAACA,GAKHA,EAAI,OAAS,GACbA,EAAI,QAAU,GACdA,EAAI,EAAI,GACRA,EAAI,EAAI,GACRA,EAAI,EAAIA,EAAI,MAAQ,KAAK,QAAQ,cACjCA,EAAI,EAAIA,EAAI,OAAS,KAAK,QAAQ,cAE3B,OAAA,KAGH,MAAAwI,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAM,OAAO,kBAAoB,EAEhCD,EAAA,MAASxI,EAAI,MAAQyI,EACrBD,EAAA,OAASxI,EAAI,OAASyI,EAE7BD,EAAO,MAAM,MAAS,GAAGxI,EAAI,KAAK,KAClCwI,EAAO,MAAM,OAAS,GAAGxI,EAAI,MAAM,KAE7B,MAAA0I,EAAMF,EAAO,WAAW,IAAI,EAClC,OAAKE,GAIDA,EAAA,MAAMD,EAAKA,CAAG,EAEdC,EAAA,UACF,KAAK,QACL1I,EAAI,EACJA,EAAI,EACJA,EAAI,MACJA,EAAI,OACJ,EACA,EACAA,EAAI,MACJA,EAAI,MACN,EAEOwI,GAjBE,IAiBF,CAQF,SAASG,EAAa,CACvBA,GAAOA,EAAI,SAAW,IACxB,KAAK,UAAY,GACjB,KAAK,QAAQ,IAAMA,EACrB,CAMK,OAAQ,CACT,GAAA,CACF,KAAK,UAAY,GACjB,KAAK,QAAQ,EACb,KAAK,kBAAkB,QAChBJ,EAAO,CACd,GACEA,aAAiBrL,GACjBqL,aAAiBzK,GACjByK,aAAiBjL,EAEjB,KAAK,gBAAgBiL,CAAK,MAEpB,OAAAA,CACR,CACF,CAMK,SAAU,CACX,KAAK,eACF,KAAA,SAAS,UAAU,KAAK,OAAO,EACpC,KAAK,aAAa,QAAQ,EAC1B,KAAK,QAAQ,QAAQ,EACrB,KAAK,UAAU,QAAQ,EACvB,KAAK,WAAW,QAAQ,EACpB,KAAK,YACH,KAAK,cAAc,eACrB,KAAK,cAAc,cAAc,aAC/B,KAAK,QACL,KAAK,aACP,GAIN,KAAK,aAAe,EAAA,CAOf,OAAO7K,EAAqCkL,EAAwC,OAAW,CAIhG,GAHA,OAAOlL,GAAgB,UAGvB,CAACA,GACA,OAAOA,EAAY,GAAM,UACzB,OAAOA,EAAY,GAAM,SAC5B,OAGF,MAAMmL,EAAkB,KAAK,kBAAkBnL,EAAakL,CAAI,EAE3D,KAAA,IAAI,KAAKC,CAAe,EAC7B,KAAK,OAAO,EAGZ,KAAK,kBAAkB,CAAA,CAQlB,SAAS5J,EAAuB+D,EAA4B,CAAE,EAAG,GAAK,EAAG,EAAA,EAAO4F,EAAwC,OAAW,CACpI,GAAA,OAAO3J,GAAS,SAClB,MAAO,CAAE,GAAI,GAAO,QAAS,0CAA2C,EAEtE,GAAA,CAACA,GACA,OAAOA,EAAK,OAAU,UACtB,OAAOA,EAAK,QAAW,SAC1B,MAAO,CAAE,GAAI,GAAO,QAAS,gEAAiE,EAE5F,GAAA,OAAO+D,GAAW,SACpB,MAAO,CAAE,GAAI,GAAO,QAAS,8CAA+C,EAE1E,GAAA,CAACA,GACA,OAAOA,EAAO,GAAM,UACpB,OAAOA,EAAO,GAAM,SACvB,MAAO,CAAE,GAAI,GAAO,QAAS,yDAA0D,EAGzF,MAAM8F,EAAW,KAAK,WAAW7J,EAAM2J,CAAI,EAEtC,KAAA,IAAI,OAAOE,EAAU9F,CAAM,EAChC,KAAK,OAAO,EAGZ,KAAK,kBAAkB,CAAA,CAQlB,QAAQK,EAAgBL,EAA4B,CAAE,EAAG,GAAK,EAAG,IAAO,CACzE,GAAA,OAAOK,GAAW,SACpB,MAAO,CAAE,GAAI,GAAO,QAAS,qCAAsC,EAErE,MAAM0F,EAAS,KAAK,IAAI,MAAM1F,EAAQL,CAAM,EAC5C,OAAI+F,EAAO,KACT,KAAK,OAAO,EAGZ,KAAK,kBAAkB,GAElBA,CAAA,CAQF,SAAShG,EAA0B6F,EAAwC,OAAW,CACvF,GAAA,OAAO7F,GAAQ,SACjB,MAAO,CAAE,GAAI,GAAO,QAAS,8CAA+C,EAE9E,GAAI,CAACA,GACA,OAAOA,EAAI,GAAM,UACjB,OAAOA,EAAI,GAAM,UACjB,OAAOA,EAAI,OAAU,UACrB,OAAOA,EAAI,QAAW,SACvB,MAAO,CAAE,GAAI,GAAO,QAAS,8EAA+E,EAEhH,MAAM+F,EAAW,KAAK,UAAU/F,EAAK6F,CAAI,EACnCG,EAAS,KAAK,IAAI,SAASD,CAAQ,EAEzC,OAAIC,EAAO,KACT,KAAK,OAAO,EAEZ,KAAK,kBAAkB,GAElBA,CAAA,CAQF,SAASH,EAAwC,OAAW,CAC3D,MAAAI,EAAkBJ,GAAQ,KAAK,QAAQ,WAavCK,EAVAD,IAAoB,WACf,KAAK,IAAI,iBAAiB,KAAK,KAAK,EAEzCA,IAAoB,UACf,KAAK,IAAI,gBAAgB,EAG3B,KAAK,IAAI,aAAa,EAIxB,MAAA,CACL,EAAG,KAAK,MAAMC,EAAO,CAAC,EACtB,EAAG,KAAK,MAAMA,EAAO,CAAC,EACtB,MAAO,KAAK,MAAMA,EAAO,KAAK,EAC9B,OAAQ,KAAK,MAAMA,EAAO,MAAM,CAClC,CAAA,CAQK,eAAgB,CACrB,MAAO,CAAE,KAAM,KAAK,KAAM,SAAU,KAAK,QAAS,CAAA,CAO7C,WAAY,CACjB,OAAO,KAAK,MAAA,CAMJ,sBAAuB,CAC3B,KAAK,UAAU,cACjB,KAAK,UAAU,aAAa,KAAM,KAAK,UAAU,CACnD,CAMQ,qBAAsB,CAC1B,KAAK,UAAU,aACjB,KAAK,UAAU,YAAY,KAAM,KAAK,UAAU,CAClD,CAMQ,sBAAuB,CAC3B,KAAK,UAAU,cACjB,KAAK,UAAU,aAAa,KAAM,KAAK,UAAU,CACnD,CAMQ,mBAAoB,CACtB,MAAAjJ,EAAM,KAAK,SAAS,EAE1B,KAAK,qBAAqBA,CAAG,EAEzB,KAAK,UAAU,WACZ,KAAA,UAAU,UAAU,KAAMA,CAAG,CACpC,CAOQ,gBACRuI,EAIA,CAEK,KAAA,aAAaxD,EAAkB,KAAK,EACzC,MAAMgB,EAAQ,CACZ,KAAMwC,EAAM,KACZ,QAASA,EAAM,QACf,UAAWA,EAAM,UACjB,KAAMA,EAAM,IACd,EAII,GAFJ,KAAK,QAAQ,EAET,KAAK,UAAU,QACZ,KAAA,UAAU,QAAQ,KAAMxC,CAAK,MAE5B,OAAAwC,CACR,CAYM,oBAAqB,CAC3B,KAAK,SAAW,IAAI,eAAgBW,GAAY,CAC9C,UAAWC,KAASD,EAAS,CAC3B,MAAMzL,EAAS0L,EAAM,OACjB1L,IAAW,KAAK,SAAWA,EAAO,UAAYA,EAAO,QAAU,IACjE,KAAK,mBAAmB,EACxB,KAAK,OAAO,EACd,CACF,CACD,CAAA,CAGK,mBAAoB,CAC1B,KAAK,mBAAmB,EAGtB,KAAK,QAAQ,KACb,KAAK,QAAQ,UACb,KAAK,QAAQ,QAAU,GACvB,KAAK,QAAQ,SAAW,IAEnB,KAAA,kBAAoB,KAAK,QAAQ,IACtC,KAAK,WAAW,GAEb,KAAA,QAAQ,OAAS,IAAM,CACtB,CAAC,KAAK,QAAQ,KAAO,KAAK,oBAAsB,KAAK,QAAQ,MAG/D,KAAK,kBAAoB,OAEtB,KAAA,aACH,KAAK,SAAWsH,EAAkB,QAAUA,EAAkB,QAAUA,EAAkB,SAC5F,EACK,KAAA,SAAS,UAAU,KAAK,OAAO,EACpC,KAAK,WAAW,EAClB,CAAA,CAEM,YAAa,CACf,GAAA,CACF,KAAK,UAAU,EACf,KAAK,mBAAmB,EACxB,KAAK,mBAAmB,EACxB,KAAK,aAAa,EAClB,KAAK,qBAAqB,EACrB,KAAA,SAAS,QAAQ,KAAK,OAAO,EAC7B,KAAA,aAAaA,EAAkB,KAAK,EACzC,KAAK,kBAAkB,QAChBwD,EAAO,CACd,GAAIA,aAAiBjL,EACnB,KAAK,gBAAgBiL,CAAK,MAEpB,OAAAA,CACR,CACF,CAGM,WAAY,CAClB,GAAI,KAAK,aACP,OAGE,KAAK,aACF,KAAA,cAAgB,SAAS,cAAc,KAAK,EACjD,KAAK,cAAc,UAAU,IAAIvL,EAAU,IAAI,EAC3C,KAAK,QAAQ,eACf,KAAK,QAAQ,cAAc,aACzB,KAAK,cACL,KAAK,OACP,EAEG,KAAA,cAAc,YAAY,KAAK,OAAO,GAE7C,MAAMoM,EAAO,KAAK,cAClB3F,GAAY2F,CAAI,EAEhB,KAAK,QAAQ,UAAU,IAAIpM,EAAU,GAAG,EACxC,KAAK,WAAa,IAAI+G,GAAWqF,EAAMpM,EAAU,UAAU,EAC3D,KAAK,aAAe,IAAImH,GACtBiF,EACApM,EAAU,IACV,KAAK,SACL,KAAK,QAAQ,iBACf,EACA,KAAK,UAAY,IAAI6H,GACnBuE,EACApM,EAAU,UACV,KAAK,SACL,KAAK,QAAQ,SACf,EACA,KAAK,QAAU,IAAI8K,GACjBsB,EACApM,EAAU,QACV,KAAK,SACL,KAAK,QAAQ,YACbA,EAAU,MACZ,EACA,KAAK,aAAe,EAAA,CAGd,oBAAqB,CAC3B,KAAK,KAAO,CACV,MAAO,KAAK,QAAQ,aACpB,OAAQ,KAAK,QAAQ,aACvB,CAAA,CAGQ,cAAe,CACnB,IAAA0F,EAAiB,KAAK,QAAQ,UAC9B,KAAK,YACP,KAAK,UAAY,GACjBA,EAAiB,KAAK,QAAQ,eAGhC,MAAMlC,EAAW,CACf,EAAGkC,EAAe,UAClB,EAAGA,EAAe,SACpB,EACM2G,EAAc3G,EAAe,YAC7B4G,EAAW7J,EACfiD,EACA,KAAK,QAAQ,QACb,KAAK,QAAQ,QACb,KAAK,KACL,KAAK,KACP,EACM6G,EAAQlJ,EACZiJ,EACA,KAAK,KACL,KAAK,QAAQ,YACb,KAAK,QAAQ,QACbD,EACA7I,CACF,EAEAO,EAAmBwI,CAAK,EAEnB,KAAA,IAAM,IAAIzG,GAAIyG,CAAK,CAAA,CAGlB,oBAAqB,CAC3B,KAAM,CAAE,MAAArH,EAAO,OAAAD,CAAA,EAAW,KAAK,QAAQ,sBAAsB,EACzD,KAAK,QAAQ,cAAgB,GAAK,KAAK,QAAQ,eAAiB,EAC7D,KAAA,SAAW,CAAE,MAAO,KAAK,KAAK,MAAO,OAAQ,KAAK,KAAK,MAAO,EAE9D,KAAA,SAAW,CAAE,MAAAC,EAAO,OAAAD,CAAO,EAGlC,KAAK,MAAQ,CACX,MAAO,KAAK,SAAS,MAAQ,KAAK,KAAK,MACvC,OAAQ,KAAK,SAAS,OAAS,KAAK,KAAK,MAC3C,CAAA,CAGM,aAAa8G,EAA2B,CAC9C,KAAK,OAASA,EACV,KAAK,SACF,KAAA,WAAW/L,EAAU,YAAa+L,CAAM,CAC/C,CAMM,QAAS,CACf,MAAMhG,EAAM,KAAK,IAAI,iBAAiB,KAAK,KAAK,EAE3C,KAAA,UAAU,UAAUA,CAAG,EACvB,KAAA,WAAW,UAAUA,CAAG,EACxB,KAAA,QAAQ,UAAUA,CAAG,CAAA,CAGpB,MAAM,CAAE,KAAA9C,EAAM,KAAA1C,GAA0B,CAC9C,OAAQ0C,EAAM,CACZ,IAAK,cACH,KAAK,kBAAkB1C,CAAI,EAC3B,MACF,IAAK,aACH,KAAK,mBAAmBA,CAAI,EAC5B,MACF,IAAK,YACH,KAAK,gBAAgB,EACrB,MACF,IAAK,cACH,KAAK,kBAAkBA,CAAI,EAC3B,MACF,IAAK,aACH,KAAK,mBAAmBA,CAAI,EAC5B,MACF,IAAK,YACH,KAAK,gBAAgB,EACrB,MACF,IAAK,eACI,OAAA,KAAK,kBAAkBA,CAAI,CAAA,CAE/B,MAAA,EAAA,CAGD,kBAAkB,CACxB,YAAAG,EACA,KAAAuB,EACA,YAAA0F,EACA,WAAAC,CAAA,EACiC,CAEjC,MAAM4E,EAAa,KAAK,QACrB,oBAAoB7E,EAAaC,CAAU,EAC3C,QAAQ,EAMLtB,EAAS,CACb,YAJqB,KAAK,iBAAiB5F,CAAW,EAKtD,KAAAuB,EACA,OAAQuK,EAAW,MACrB,EAGA,OAAK,KAAK,IAAI,qCAAqClG,CAAM,GAKzD,KAAK,OAAO,EAGZ,KAAK,kBAAkBkG,CAAU,EAG1B,IAVE,EAUF,CAMD,kBAAkBjM,EAA2C,CAC7D,KAAA,CAAE,EAAA4F,EAAG,EAAAC,GAAM,KAAK,IAAI,6BAA6B7F,EAAK,MAAM,EAClE,KAAK,aAAe,CAClB,EAAG,CACD,KAAMA,EAAK,OAAO,IAAM,EACxB,gBAAiB4F,CACnB,EACA,EAAG,CACD,KAAM5F,EAAK,OAAO,IAAM,EACxB,gBAAiB6F,CAAA,CAErB,EAGA,KAAK,oBAAoB,CAAA,CAMnB,mBAAmBqG,EAA8C,CAEjE,MAAA/L,EAAc,KAAK,iBAAiB+L,CAAQ,EAO5CnG,EAASnE,EACbzB,EACA,KAAK,aAAa,EAClB,KAAK,aAAa,CACpB,EAII,CAAC,KAAK,QAAQ,YAAc4F,EAAO,QAAQ,GAAKA,EAAO,QAAQ,KAI/D,KAAK,IAAI,qCAAqCA,EAAO,MAAM,GAC7D,KAAK,OAAO,EAId,KAAK,qBAAqB,EAAA,CAKpB,iBAAkB,CACxB,KAAK,kBAAkB,CAAA,CAOjB,kBAAkBmG,EAA8C,CACtE,KAAM,CAAE,EAAAtG,EAAG,EAAAC,CAAA,EAAM,KAAK,iBAAiBqG,CAAQ,EACzC1G,EAAM,KAAK,IAAI,gBAAgB,EAEhC,KAAA,YAAc,CAAE,QAASI,EAAIJ,EAAI,EAAG,QAASK,EAAIL,EAAI,CAAE,EAG5D,KAAK,oBAAoB,CAAA,CAMnB,mBAAmB0G,EAA8C,CACvE,KAAM,CAAE,QAAAC,EAAS,QAAAC,CAAQ,EAAI,KAAK,YAG5B,CAAE,EAAAxG,EAAG,EAAAC,CAAA,EAAM,KAAK,iBAAiBqG,CAAQ,EAC1C,KAAA,IAAI,KAAK,CAAE,EAAGtG,EAAIuG,EAAS,EAAGtG,EAAIuG,EAAS,EAGhD,KAAK,OAAO,EAGZ,KAAK,qBAAqB,CAAA,CAMpB,iBAAkB,CACxB,KAAK,kBAAkB,CAAA,CASjB,iBAAiBF,EAAoC,CACrD,MAAApB,EAAY,KAAK,QAAQ,sBAAsB,EACjD,IAAAlF,EAAIsG,EAAS,EAAIpB,EAAU,KAC3BjF,EAAIqG,EAAS,EAAIpB,EAAU,IAC/B,OAAAlF,EAAI,KAAK,IAAI,KAAK,IAAIA,EAAG,CAAC,EAAG,KAAK,SAAS,KAAK,EAAI,KAAK,MAAM,MAC/DC,EAAI,KAAK,IAAI,KAAK,IAAIA,EAAG,CAAC,EAAG,KAAK,SAAS,MAAM,EAAI,KAAK,MAAM,OACzD,CAAE,EAAAD,EAAG,EAAAC,CAAE,CAAA,CAQR,WAAWrF,EAAcgI,EAAwB,CACvD,KAAK,QAAQ,QAAQhI,CAAI,EAAIgI,EAAM,SAAS,CAAA,CAItC,uBACNoC,EACA,CACKA,IAGDA,EAAa,SAAW,OAAOA,EAAa,SAAY,aACrD,KAAA,UAAU,QAAUA,EAAa,SAGtCA,EAAa,cACb,OAAOA,EAAa,cAAiB,aAEhC,KAAA,UAAU,aAAeA,EAAa,cAG3CA,EAAa,aACb,OAAOA,EAAa,aAAgB,aAE/B,KAAA,UAAU,YAAcA,EAAa,aAG1CA,EAAa,cACb,OAAOA,EAAa,cAAiB,aAEhC,KAAA,UAAU,aAAeA,EAAa,cAG3CA,EAAa,WACb,OAAOA,EAAa,WAAc,aAE7B,KAAA,UAAU,UAAYA,EAAa,WAC1C,CAGM,qBAAqBpC,EAA6B,CAClD,MAAA/F,EAAM+F,GAAS,KAAK,SAAS,EACnC,KAAK,WAAW/I,EAAU,OAAQgD,EAAI,CAAC,EACvC,KAAK,WAAWhD,EAAU,OAAQgD,EAAI,CAAC,EACvC,KAAK,WAAWhD,EAAU,WAAYgD,EAAI,KAAK,EAC/C,KAAK,WAAWhD,EAAU,YAAagD,EAAI,MAAM,CAAA,CAa3C,kBAAkB+F,EAAejG,EAAe8J,EAAehB,EAAmC,CACxG,OAAIA,IAAS,WACJ7C,EAAQjG,EAEb8I,IAAS,UACHgB,EAAQ7D,EAAS,IAGpBA,CAAA,CAWD,kBAAkBrI,EAAqCkL,EAAwC,OAAmC,CAClI,MAAAI,EAAkBJ,GAAQ,KAAK,QAAQ,WAG7C,GAAII,IAAoB,OACf,MAAA,CAAE,GAAGtL,CAAY,EAGpB,MAAAmM,EAAU,KAAK,IAAI,WAAW,EAC7B,MAAA,CACL,EAAG,KAAK,kBACNnM,EAAY,EACZ,KAAK,MAAM,MACXmM,EAAQ,MACRb,CACF,EACA,EAAG,KAAK,kBACNtL,EAAY,EACZ,KAAK,MAAM,OACXmM,EAAQ,OACRb,CAAA,CAEJ,CAAA,CAWM,WAAW/J,EAAuB2J,EAAwC,OAA4B,CACtG,MAAAI,EAAkBJ,GAAQ,KAAK,QAAQ,WAG7C,GAAII,IAAoB,OACf,MAAA,CAAE,GAAG/J,CAAK,EAGb,MAAA4K,EAAU,KAAK,IAAI,WAAW,EAC7B,MAAA,CACL,MAAO,KAAK,kBACV5K,EAAK,MACL,KAAK,MAAM,MACX4K,EAAQ,MACRb,CACF,EACA,OAAQ,KAAK,kBACX/J,EAAK,OACL,KAAK,MAAM,OACX4K,EAAQ,OACRb,CAAA,CAEJ,CAAA,CAYM,UAAUjG,EAA0B6F,EAAwC,OAAgC,CAC5G,MAAAI,EAAkBJ,GAAQ,KAAK,QAAQ,WAG7C,OAAII,IAAoB,OACfjG,EAGF,CACL,GAAG,KAAK,kBAAkB,CAAE,EAAGA,EAAI,EAAG,EAAGA,EAAI,CAAE,EAAGiG,CAAe,EACjE,GAAG,KAAK,WAAW,CAAE,MAAOjG,EAAI,MAAO,OAAQA,EAAI,MAAO,EAAGiG,CAAe,CAC9E,CAAA,CAEJ"}