{"version":3,"file":"trueCropper.iife.js","sources":["../src/constant.ts","../src/errors/trueCropperHtmlError.ts","../src/errors/trueCropperImageError.ts","../src/errors/trueCropperOptionsError.ts","../src/helpers.ts","../src/box.ts","../src/touch.ts","../src/HTMLelements/background.ts","../src/HTMLelements/newSelection.ts","../src/HTMLelements/selection.ts","../src/types.ts","../src/options.ts","../src/HTMLelements/handle.ts","../src/HTMLelements/handles.ts","../src/trueCropper.ts"],"sourcesContent":["const BASE_CLASSNAME = \"truecropper\" as const;\nexport const CONSTANTS = {\n  base: BASE_CLASSNAME,\n  img: `${BASE_CLASSNAME}__image`,\n  background: `${BASE_CLASSNAME}__background`,\n  new: `${BASE_CLASSNAME}__new-selection`,\n  selection: `${BASE_CLASSNAME}__selection`,\n  handle: `${BASE_CLASSNAME}__handle`,\n  hanleds: `${BASE_CLASSNAME}__handles`,\n  valueX: `${BASE_CLASSNAME}X`,\n  valueY: `${BASE_CLASSNAME}Y`,\n  valueWidth: `${BASE_CLASSNAME}Width`,\n  valueHeight: `${BASE_CLASSNAME}Height`,\n  valueStatus: `${BASE_CLASSNAME}Status`,\n} as const;\n","const errorMessage = {\n  srcEmpty: \"Image src not provided\",\n  elementNotFound: \"Unable to find element\",\n  parentNotContainDiv: \"parent element can be exists\",\n};\n\nexport class TrueCropperHtmlError extends Error {\n  public data: null;\n  public constructor(key: keyof typeof errorMessage) {\n    const message = errorMessage[key];\n    super(message);\n\n    Object.setPrototypeOf(this, TrueCropperHtmlError.prototype);\n\n    this.name = \"TrueCropperHtmlError\";\n    this.data = null;\n  }\n}\n","import { IimageErrorData } from \"../types\";\n\nexport class TrueCropperImageError extends Error {\n  public data;\n  public constructor(message: string, data: IimageErrorData) {\n    super(message);\n\n    Object.setPrototypeOf(this, TrueCropperImageError.prototype);\n\n    this.name = \"TrueCropperImageError\";\n    this.data = {\n      target: data.target,\n      coordinates: data.coordinates ? { ...data.coordinates } : undefined,\n      targetSize: { ...data.targetSize },\n      source: data.source,\n      sourceSize: { ...data.sourceSize },\n    };\n  }\n\n  public static startSize(\n    target: string,\n    coordinates: { x: number; y: number },\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ) {\n    const message = `The ${target} (${coordinates.x}x${coordinates.y}:${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data);\n  }\n\n  public static size(\n    target: string,\n    targetSize: { width: number; height: number },\n    source: string,\n    sourceSize: { width: number; height: number },\n  ) {\n    const message = `The ${target} (${targetSize.width}x${targetSize.height}) exceeds the ${source} (${sourceSize.width}x${sourceSize.height})`;\n    const data = {\n      target,\n      coordinates: undefined,\n      targetSize,\n      source,\n      sourceSize,\n    };\n    return new this(message, data);\n  }\n}\n","export class TrueCropperOptionsError extends Error {\n  public data: null;\n  public constructor(message: string) {\n    super(message);\n\n    Object.setPrototypeOf(this, TrueCropperOptionsError.prototype);\n\n    this.name = \"TrueCropperOptionsError\";\n    this.data = null;\n  }\n\n  public static aspectRatio(\n    calculatedAspectRatio: number,\n    aspectRatio: number,\n    epsilon: number,\n  ) {\n    const message = `The specified aspect ratio (${aspectRatio}) and calculated minimum dimensions (width/height = ${calculatedAspectRatio}) are greater than (${epsilon}). This might be due to a rounding error on the server side or incorrect minimum sizes.`;\n    return new this(message);\n  }\n\n  public static new(name: string, object: string, positive = true) {\n    const message = positive\n      ? `${name} must be of type ${object}`\n      : `${name} must not be of type ${object}`;\n    return new this(message);\n  }\n}\n","import { CONSTANTS } from \"./constant\";\nimport { TrueCropperHtmlError, TrueCropperImageError } from \"./errors\";\nimport {\n  ActiveHandleDataType,\n  Coordinates,\n  InitQuerySelectorOrHtmlElementType,\n} from \"./types\";\nimport {\n  BoxInitInterface,\n  ContainerToMaxMinSize,\n  Idd2,\n  Size,\n  SizeUnit,\n  SizeWithUnit,\n  StartSize,\n} from \"./types\";\n\n/**\n * Retrieves HTML elements based on the provided element query or type.\n *\n * @param {InitQuerySelectorOrHtmlElementType} element - The element query or type.\n * @returns {[HTMLImageElement, HTMLDivElement]} The retrieved image element and its parent div.\n */\nexport const getHTMLelements = (\n  element: InitQuerySelectorOrHtmlElementType,\n) => {\n  let el = null;\n  if (typeof element === \"string\") {\n    el = document.querySelector(element);\n    if (el === null) {\n      throw new TrueCropperHtmlError(\"elementNotFound\");\n    }\n  } else {\n    el = element;\n  }\n  if (!(el instanceof HTMLImageElement)) {\n    throw new TrueCropperHtmlError(\"srcEmpty\");\n  }\n  // if (el.getAttribute(\"src\") === null) {\n  //   throw new TrueCropperHtmlError(\"srcEmpty\");\n  // }\n  let parent: HTMLDivElement | null = el.parentElement as HTMLDivElement;\n  if (!parent) {\n    throw new TrueCropperHtmlError(\"parentNotContainDiv\");\n  }\n  if (!parent.classList.contains(CONSTANTS.base)) {\n    parent = null;\n  }\n  return [el, parent] as const;\n};\n\n/**\n * Creates a new div element with the specified class name and appends it to a parent element if provided.\n *\n * @param {string} className - The class name for the new div element.\n * @param {HTMLElement | undefined} parent - The optional parent element to append the new div to.\n * @returns {HTMLDivElement} The newly created div element.\n */\nexport const createDiv = (\n  className: string,\n  parent: HTMLElement | undefined = undefined,\n) => {\n  const el = document.createElement(\"div\");\n  el.className = className;\n  if (parent) {\n    parent.appendChild(el);\n  }\n  return el;\n};\n\n/**\n * Calculate point based on mouse position and active handle\n * @param {number} mouse - Current mouse position\n * @param {ActiveHandleDataType} handle - Active handle data\n * @returns {Object} - Object containing flipped flag and data with values and new point\n */\nconst calculatePointBasedOnMouse = (\n  mousePosition: number,\n  activeHandle: ActiveHandleDataType,\n) => {\n  // If handle is not active, return points\n  if (activeHandle.savedCoordinate < 0) {\n    return { flipped: false, coordinate: null, size: null, point: 0.5 };\n  }\n\n  // Determine if mouse is to the left of the saved coordinate\n  const isMouseLeft = mousePosition < activeHandle.savedCoordinate;\n\n  // Check if handle is flipped\n  const flipped = activeHandle.left !== isMouseLeft;\n  const coordinate = activeHandle.savedCoordinate;\n  const size = Math.abs(activeHandle.savedCoordinate - mousePosition);\n  const point = Number(isMouseLeft);\n\n  return {\n    flipped,\n    coordinate,\n    size,\n    point,\n  };\n};\n\n/**\n * Calculates the points based on the mouse coordinates and handles.\n *\n * @param {Coordinates} mouse - The mouse coordinates.\n * @param {ActiveHandleDataType} handleX - The handle for the X coordinate.\n * @param {ActiveHandleDataType} handleY - The handle for the Y coordinate.\n * @returns {Object} The calculated points based on the mouse and handles.\n */\nexport const calculatePointsBasedOnMouse = (\n  mouse: Coordinates,\n  handleX: ActiveHandleDataType,\n  handleY: ActiveHandleDataType,\n) => {\n  const aX = calculatePointBasedOnMouse(mouse.x, handleX);\n  const aY = calculatePointBasedOnMouse(mouse.y, handleY);\n  return {\n    flipped: { x: aX.flipped, y: aY.flipped },\n    newBox: {\n      coordinates: { x: aX.coordinate, y: aY.coordinate },\n      size: { width: aX.size, height: aY.size },\n      points: { x: aX.point, y: aY.point },\n    },\n  };\n};\n\n/**\n * Converts sizes from real or relative or percent units to real pixel values based on provided parameters.\n * @param {StartSize} start The starting size in real or relative or percent units.\n * @param {SizeWithUnit} min The minimum size in real or relative or percent units.\n * @param {SizeWithUnit} max The maximum size in real orrelative or percent units.\n * @param {Size} real The real image size in pixels. Need for percent values.\n * @param {Size} ratio The ratio of conversion from relative to real pixels.\n * @returns Object containing converted sizes.\n */\nexport const convertToRealPx = (\n  start: StartSize,\n  min: SizeWithUnit,\n  max: SizeWithUnit,\n  real: Size,\n  ratio: Size,\n) => {\n  // Function to convert a value from relative or percent units to real pixels\n  const toPx = (val: number, type: keyof Size, unit: SizeUnit) => {\n    if (unit === \"relative\") {\n      return val * ratio[type];\n    }\n    if (unit === \"percent\") {\n      return val >= 1 ? real[type] * (val / 100) : real[type] * val;\n    }\n    // If the unit is already in pixels, return the value as is\n    return val;\n  };\n\n  const newMinSize = {\n    width: toPx(min.width, \"width\", min.unit),\n    height: toPx(min.height, \"height\", min.unit),\n  };\n  const newMaxSize = {\n    width: toPx(max.width, \"width\", max.unit),\n    height: toPx(max.height, \"height\", max.unit),\n  };\n  // Convert starting coordinates to real pixel values\n  const coordinates = {\n    x: toPx(start.x, \"width\", start.unit),\n    y: toPx(start.y, \"height\", start.unit),\n  };\n  // Convert starting size to real pixel values\n  const size = {\n    width: toPx(start.width, \"width\", start.unit),\n    height: toPx(start.height, \"height\", start.unit),\n  };\n  return { coordinates, size, minSize: newMinSize, maxSize: newMaxSize };\n};\n\n/**\n * Processes the initial props for the TrueCropper instance.\n *\n * @param {ReturnType<typeof convertToRealPx>} data - The converted real pixel data.\n * @param {Size} imgProps - The image size.\n * @param {number} aspectRatio - The aspect ratio.\n * @param {boolean} allowChangeStartProps - Flag indicating if start props can be changed.\n * @param {{ x: boolean; y: boolean }} centered - Flag indicating start props coordinates can be changed.\n * @returns {BoxInitInterface} The processed initial props.\n */\nexport const processingInitialProps = (\n  data: ReturnType<typeof convertToRealPx>,\n  imgProps: Size,\n  aspectRatio: number,\n  allowChangeStartProps: boolean,\n  centered: { x: boolean; y: boolean },\n): BoxInitInterface => {\n  const minSize = adjustSizeProps(\n    data.minSize,\n    { width: 1, height: 1 },\n    aspectRatio,\n  );\n  let maxSize = adjustSizeProps(data.maxSize, imgProps, aspectRatio);\n  let size = adjustSizeProps(data.size, imgProps, aspectRatio);\n\n  maxSize = calculateAdjustedMaxSize(maxSize, imgProps, aspectRatio);\n\n  let coordinates = data.coordinates;\n  if (allowChangeStartProps) {\n    const tmp = adjustStartProps(\n      coordinates,\n      size,\n      minSize,\n      maxSize,\n      imgProps,\n      aspectRatio,\n      centered.x,\n      centered.y,\n    );\n    coordinates = tmp.coordinates;\n    size = tmp.size;\n  }\n\n  return { coordinates, size, minSize, maxSize, imgProps, aspectRatio };\n};\n\n/**\n * Validates the image sizes based on various criteria.\n *\n * @param {BoxInitInterface} options - The box initialization interface.\n */\nexport const validateImageSizes = ({\n  coordinates,\n  minSize,\n  maxSize,\n  size,\n  imgProps,\n}: BoxInitInterface) => {\n  const checkDimensions = (\n    first: Size,\n    second: Size,\n    firstName: string,\n    secondName: string,\n  ) => {\n    if (first.width > second.width || first.height > second.height) {\n      throw TrueCropperImageError.size(firstName, first, secondName, second);\n    }\n  };\n\n  // Perform size validations\n  // Check minimum size dimensions\n  checkDimensions(minSize, imgProps, \"minSize\", \"imageSize\");\n  // Validate if the minimum size exceeds the maximum size\n  checkDimensions(minSize, maxSize, \"minSize\", \"maxSize\");\n  // Check start size dimensions\n  checkDimensions(minSize, size, \"minSize\", \"startSize\");\n  if (\n    coordinates.x + size.width > imgProps.width ||\n    coordinates.y + size.height > imgProps.height\n  ) {\n    throw TrueCropperImageError.startSize(\n      \"startSize\",\n      coordinates,\n      size,\n      \"imageSize\",\n      imgProps,\n    );\n  }\n};\n\n/**\n * Converts the container size to the maximum and minimum size.\n *\n * @param {ContainerToMaxMinSize} options - The container size and constraints.\n * @returns {Size} The new size after applying maximum and minimum constraints.\n */\nexport const containerToMaxMinSize = ({\n  size,\n  minSize,\n  maxSize,\n  aspectRatio,\n}: ContainerToMaxMinSize) => {\n  const newSize = { ...size };\n  if (maxSize) {\n    if (newSize.width > maxSize.width) {\n      newSize.width = maxSize.width;\n      newSize.height = aspectRatio\n        ? maxSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height > maxSize.height) {\n      newSize.width = aspectRatio\n        ? maxSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = maxSize.height;\n    }\n  }\n\n  if (minSize) {\n    if (newSize.width < minSize.width) {\n      newSize.width = minSize.width;\n      newSize.height = aspectRatio\n        ? minSize.width / aspectRatio\n        : newSize.height;\n    }\n\n    if (newSize.height < minSize.height) {\n      newSize.width = aspectRatio\n        ? minSize.height * aspectRatio\n        : newSize.width;\n      newSize.height = minSize.height;\n    }\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the width of a size nox based on a width adjustment, a point, and an aspect ratio.\n * @param {number} widthAdjustment The amount to adjust the width by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {Size} The adjusted size box.\n */\nconst adjustWidth = (\n  widthAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): Size => {\n  const newWidth = widthAdjustment * point;\n  return { width: newWidth, height: newWidth / aspectRatio };\n};\n\n/**\n * Adjusts the height of a size box based on a height adjustment, a point, and an aspect ratio.\n * @param {number} heightAdjustment The amount to adjust the height by.\n * @param {number} point The point to use in the adjustment.\n * @param {number} aspectRatio The aspect ratio to use in the adjustment.\n * @returns {Size} The adjusted size box.\n */\nconst adjustHeight = (\n  heightAdjustment: number,\n  point: number,\n  aspectRatio: number,\n): Size => {\n  const newHeight = heightAdjustment * point;\n  return { width: newHeight * aspectRatio, height: newHeight };\n};\n\n/**\n * Adjusts a size box to match a specified aspect ratio.\n * @param {Idd2} data The data box containing the size, coordinates, and points.\n * @param {Size} maxSize The maximum size of the box.\n * @param {number} aspectRatio The aspect ratio to adjust to.\n * @returns The adjusted size box.\n */\nexport const adjustToAspectRatio = (\n  data: Idd2,\n  maxSize: Size,\n  aspectRatio: number,\n): Size => {\n  let newSize = { ...data.size };\n  if (aspectRatio === 0) {\n    return newSize;\n  }\n\n  const vertiacal = data.isMultuAxis\n    ? newSize.height * aspectRatio >= newSize.width\n    : data.isVerticalMovement;\n  const pointX = data.points.x === 1 || data.points.x === 0 ? 1 : 2;\n  const pointY = data.points.y === 1 || data.points.y === 0 ? 1 : 2;\n  if (vertiacal) {\n    newSize = { width: newSize.height * aspectRatio, height: newSize.height };\n  } else {\n    newSize = { width: newSize.width, height: newSize.width / aspectRatio };\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width\n  if (\n    data.coordinates.x + newSize.width * (1 - data.points.x) >\n    maxSize.width\n  ) {\n    newSize = adjustWidth(\n      maxSize.width - data.coordinates.x,\n      pointX,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height\n  if (\n    data.coordinates.y + newSize.height * (1 - data.points.y) >\n    maxSize.height\n  ) {\n    newSize = adjustHeight(\n      maxSize.height - data.coordinates.y,\n      pointY,\n      aspectRatio,\n    );\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in width (left)\n  if (data.coordinates.x - newSize.width * data.points.x < 0) {\n    newSize = adjustWidth(data.coordinates.x, pointX, aspectRatio);\n  }\n\n  // Check if the coordinates do not exceed the image boundaries in height (top)\n  if (data.coordinates.y - newSize.height * data.points.y < 0) {\n    newSize = adjustHeight(data.coordinates.y, pointY, aspectRatio);\n  }\n\n  return newSize;\n};\n\n/**\n * Adjusts the size properties by removing empty values and adjusting based on aspect ratio.\n *\n * @param {Size} sizeProps - The size properties to adjust.\n * @param {Size} defaultVal - The default size values.\n * @param {number} aspectRatio - The aspect ratio to consider.\n * @returns {Size} The adjusted size.\n */\nconst adjustSizeProps = (\n  sizeProps: Size,\n  defaultVal: Size,\n  aspectRatio: number,\n): Size => {\n  const size = { ...sizeProps };\n  // Adjust size based on aspect ratio if necessary\n  if (aspectRatio && !size.width && !size.height) {\n    if (aspectRatio > 1) {\n      size.height = defaultVal.height;\n    } else {\n      size.width = defaultVal.width;\n    }\n  }\n\n  if (!size.width) {\n    size.width = aspectRatio ? size.height * aspectRatio : defaultVal.width;\n  }\n\n  if (!size.height) {\n    size.height = aspectRatio ? size.width / aspectRatio : defaultVal.height;\n  }\n\n  return size;\n};\n\n/**\n * Calculates the adjusted maximum size based on image size and aspect ratio.\n *\n * @param {Size} maxSizeProps - The maximum size properties.\n * @param {Size} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @returns {Size} The calculated maximum size.\n */\nconst calculateAdjustedMaxSize = (\n  maxSizeProps: Size,\n  image: Size,\n  aspectRatio: number,\n) => {\n  let maxSize = { ...maxSizeProps };\n  if (aspectRatio) {\n    if (maxSize.width > maxSize.height * aspectRatio) {\n      maxSize.width = maxSize.height * aspectRatio;\n    } else {\n      maxSize.height = maxSize.width / aspectRatio;\n    }\n  }\n  // Adjust maximum size if necessary\n  maxSize = containerToMaxMinSize({\n    size: maxSize,\n    maxSize: image,\n    aspectRatio,\n  });\n  return maxSize;\n};\n\n/**\n * Adjusts the start coordinates and size based on constraints and centering options.\n *\n * @param {Coordinates} coordinates - The initial coordinates.\n * @param {Size} startSize - The initial start size.\n * @param {Size} minSize - The minimum size constraints.\n * @param {Size} maxSize - The maximum size constraints.\n * @param {Size} image - The image size to consider.\n * @param {number} aspectRatio - The aspect ratio to apply.\n * @param {boolean} centeredX - Flag for centering horizontally.\n * @param {boolean} centeredY - Flag for centering vertically.\n * @returns {AdjustedStartProps} The adjusted start coordinates and size.\n */\nconst adjustStartProps = (\n  coordinates: Coordinates,\n  startSize: Size,\n  minSize: Size,\n  maxSize: Size,\n  image: Size,\n  aspectRatio: number,\n  centeredX: boolean,\n  centeredY: boolean,\n) => {\n  const startSizeProps = { ...startSize };\n  const newCoordinates = { ...coordinates };\n\n  const maxX = Math.min(maxSize.width, image.width - coordinates.x);\n  const maxY = Math.min(maxSize.height, image.height - coordinates.y);\n  // Adjust maximum size if necessary\n  const newSize = containerToMaxMinSize({\n    size: startSizeProps,\n    maxSize: { width: maxX, height: maxY },\n    minSize,\n    aspectRatio,\n  });\n  startSizeProps.width = newSize.width;\n  startSizeProps.height = newSize.height;\n\n  newCoordinates.x = centeredX\n    ? (image.width - startSizeProps.width) / 2\n    : coordinates.x;\n  newCoordinates.y = centeredY\n    ? (image.height - startSizeProps.height) / 2\n    : coordinates.y;\n\n  return { coordinates: newCoordinates, size: startSizeProps };\n};\n","import {\n  BoxInitInterface,\n  BoxProps,\n  Coordinates,\n  Idd,\n  Idd2,\n  Points,\n  Size,\n} from \"./types\";\nimport { adjustToAspectRatio, containerToMaxMinSize } from \"./helpers\";\n\n/**\n * Box component\n */\nexport default class Box {\n  private coordinates: Coordinates;\n  private size: Size;\n  private minSize: Size;\n  private maxSize: Size;\n  private imgSize: Size;\n  private aspectRatio: number;\n\n  /**\n   * Creates a new Box instance.\n   * @constructor\n   * @param {BoxInitInterface} - Initialization parameters.\n   */\n  public constructor({\n    coordinates,\n    size,\n    minSize,\n    maxSize,\n    imgProps,\n    aspectRatio,\n  }: BoxInitInterface) {\n    this.coordinates = { ...coordinates };\n    this.size = { ...size };\n    this.minSize = { ...minSize };\n    this.maxSize = { ...maxSize };\n    this.imgSize = { ...imgProps };\n    this.aspectRatio = aspectRatio;\n  }\n\n  /**\n   * Moves the box to the specified coordinates within the boundaries of the image.\n   * @param {Coordinates} coordinates - The new x and y coordinates for the box.\n   * @returns {void}\n   */\n  public move(coordinates: Coordinates) {\n    // Ensure box is within the boundaries\n    this.coordinates.x = Math.min(\n      Math.max(coordinates.x, 0),\n      this.imgSize.width - this.size.width,\n    );\n    this.coordinates.y = Math.min(\n      Math.max(coordinates.y, 0),\n      this.imgSize.height - this.size.height,\n    );\n  }\n\n  /**\n   * Resizes the box to a new size.\n   * @param {Size} size - The new size for the box.\n   * @param {Points} points - The relative points for resizing.\n   * @returns {void}\n   */\n  public resize(size: Size, points: Points) {\n    const fromX = this.coordinates.x + this.size.width * points.x;\n    const fromY = this.coordinates.y + this.size.height * points.y;\n\n    this.coordinates = {\n      x: fromX - size.width * points.x,\n      y: fromY - size.height * points.y,\n    };\n    this.size = { width: size.width, height: size.height };\n  }\n\n  /**\n   * Scales the box by a factor and relative points.\n   * @param {number} factor - The scaling factor.\n   * @param {Points} points - The relative points for scaling.\n   * @returns {void}\n   */\n  public scale(factor: number, points: Points) {\n    const width = this.size.width * factor;\n    const height = this.size.height * factor;\n    this.resize({ width, height }, points);\n  }\n\n  /**\n   * Retrieves the current coordinates of the box.\n   * @returns {Coordinates} The current x and y coordinates of the box.\n   */\n  public getCoourdinates(): Coordinates {\n    return { x: this.coordinates.x, y: this.coordinates.y };\n  }\n\n  /**\n   * Retrieves the current box.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValue(): BoxProps {\n    return {\n      x: this.coordinates.x,\n      y: this.coordinates.y,\n      width: this.size.width,\n      height: this.size.height,\n    };\n  }\n\n  /**\n   * Retrieves the current real(natural) value of the box including coordinates, width, and height.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box.\n   */\n  public getValueReal(): BoxProps {\n    return this.getValue();\n  }\n\n  /**\n   * Retrieves the current value of the box relative to a specified width and height.\n   * @param {Size} size - The width and height for calculating relative values.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box relative to the specified width and height.\n   */\n  public getValueRelative({ width, height }: Size): BoxProps {\n    return {\n      x: this.coordinates.x * width,\n      y: this.coordinates.y * height,\n      width: this.size.width * width,\n      height: this.size.height * height,\n    };\n  }\n\n  /**\n   * Retrieves the current value of the box as a percentage of the image size.\n   * @returns {BoxProps} The current x and y coordinates, width, and height of the box as a percentage of the image size.\n   */\n  public getValuePercent(): BoxProps {\n    return {\n      x: (this.coordinates.x / this.imgSize.width) * 100,\n      y: (this.coordinates.y / this.imgSize.height) * 100,\n      width: (this.size.width / this.imgSize.width) * 100,\n      height: (this.size.height / this.imgSize.height) * 100,\n    };\n  }\n\n  /**\n   * Calculates the coordinates of the opposite corner of the box based on relative points.\n   * @param {Points} points - The relative points determining the opposite corner.\n   * @returns {Coordinates} The calculated x and y coordinates of the opposite corner.\n   */\n  public getOppositeCornerCoordinates(points: Points): Coordinates {\n    const x =\n      points.x === 0.5\n        ? -1\n        : this.coordinates.x + this.size.width * (1 - points.x);\n    const y =\n      points.y === 0.5\n        ? -1\n        : this.coordinates.y + this.size.height * (1 - points.y);\n    return { x, y };\n  }\n\n  /**\n   * Prepares and applies new size and coordinates for the box based on the provided data.\n   * @param {Idd} newBox - The new box data to apply.\n   * @returns {boolean} Returns true if the new size and coordinates were successfully applied, false otherwise.\n   */\n  public prepareAndApplyNewSizeAndCoordinates(newBox: Idd) {\n    const data = this.prepareSizeAndCoordinates(newBox);\n    if (data.size.width === 0 || data.size.height === 0) {\n      return false;\n    }\n\n    this.size = this.adjustAndCalculateSize(data);\n    this.coordinates = this.adjustAndCalculateCoordinate(\n      data.coordinates,\n      this.size,\n      data.points,\n    );\n\n    return true;\n  }\n\n  /**\n   * Prepares and calculates the size and coordinates for the new box based on the provided data.\n   * @param {Idd} newBox - The new box data to calculate size and coordinates for.\n   * @returns {Idd2} An object containing the calculated size, coordinates, and other relevant properties.\n   */\n  private prepareSizeAndCoordinates(newBox: Idd): Idd2 {\n    const size = {\n      width: newBox.size.width ?? this.size.width,\n      height: newBox.size.height ?? this.size.height,\n    };\n    const coordinates = {\n      x: newBox.coordinates.x ?? this.coordinates.x + this.size.width / 2,\n      y: newBox.coordinates.y ?? this.coordinates.y + this.size.height / 2,\n    };\n    const isVerticalMovement = newBox.coordinates.y !== null;\n    const isMultuAxis = isVerticalMovement && newBox.coordinates.x !== null;\n    return {\n      size,\n      coordinates,\n      isVerticalMovement,\n      isMultuAxis,\n      points: newBox.points,\n    };\n  }\n\n  /**\n   * Adjusts and calculates the size based on aspect ratio and constraints for the new box.\n   * @param {Idd2} data - The data containing coordinates, size, and other parameters for adjustment.\n   * @returns {Size} The adjusted size within the constraints of aspect ratio, min size, and max size.\n   */\n  private adjustAndCalculateSize(data: Idd2): Size {\n    const size = adjustToAspectRatio(data, this.imgSize, this.aspectRatio);\n    return containerToMaxMinSize({\n      size,\n      minSize: this.minSize,\n      maxSize: this.maxSize,\n      aspectRatio: this.aspectRatio,\n    });\n  }\n\n  /**\n   * Adjusts and calculates the new coordinates based on the input coordinates, size, and points.\n   * @param {Coordinates} coordinates - The original coordinates.\n   * @param {Size} size - The size to adjust the coordinates.\n   * @param {Points} points - The points to calculate the adjustment.\n   * @returns {Coordinates} The adjusted coordinates based on the size and points.\n   */\n  private adjustAndCalculateCoordinate(\n    coordinates: Coordinates,\n    size: Size,\n    points: Points,\n  ): Coordinates {\n    return {\n      x: coordinates.x - size.width * points.x,\n      y: coordinates.y - size.height * points.y,\n    };\n  }\n}\n","/**\n * Enables support for touch devices by translating touch events to mouse events.\n */\n\n/**\n * Binds an element's touch events to be simulated as mouse events.\n * @param {HTMLDivElement} element - The element to bind touch events to.\n */\nexport default function enableTouch(element: HTMLDivElement) {\n  element.addEventListener(\"touchstart\", simulateMouseEvent);\n  element.addEventListener(\"touchend\", simulateMouseEvent);\n  element.addEventListener(\"touchmove\", simulateMouseEvent);\n}\n\n/**\n * Translates a touch event to a mouse event.\n * @param {Event} e - The touch event to be translated.\n */\nfunction simulateMouseEvent(e: Event) {\n  e.preventDefault();\n  const event = e as TouchEvent;\n  const touch = event.changedTouches[0];\n\n  touch.target.dispatchEvent(\n    new MouseEvent(touchEventToMouseEvent(event.type), {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      screenX: touch.screenX,\n      screenY: touch.screenY,\n    }),\n  );\n}\n\n/**\n * SubFunction to translates a touch type event to a mouse event\n * @param {string} type - The type of touch event to be translated.\n */\nfunction touchEventToMouseEvent(type: string) {\n  switch (type) {\n    case \"touchstart\":\n      return \"mousedown\";\n    case \"touchmove\":\n      return \"mousemove\";\n    default: // touchend || touchcanceled\n      return \"mouseup\";\n  }\n}\n","/**\n * Background component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps } from \"../types\";\n\nexport default class Background {\n  private nested: HTMLDivElement[] = [];\n\n  public constructor(parent: HTMLDivElement, className: string) {\n    for (let i = 0; i < 4; i++) {\n      const div = createDiv(`${className}-${i}`, parent);\n      this.nested.push(div);\n    }\n  }\n\n  public hide() {\n    for (const el of this.nested) {\n      el.style.display = \"none\";\n    }\n  }\n\n  public show() {\n    for (const el of this.nested) {\n      el.style.display = \"block\";\n    }\n  }\n\n  public destroy() {\n    for (const el of this.nested) {\n      el.remove();\n    }\n  }\n\n  public transform(box: BoxProps) {\n    const x2 = box.x + box.width;\n    const y2 = box.y + box.height;\n    this.nested[0].style.height = `${box.y}px`;\n    this.nested[0].style.left = `${box.x}px`;\n    this.nested[0].style.width = `${box.width}px`;\n\n    this.nested[1].style.left = `${x2}px`;\n    // this.nested[1].style.top = `${box.y}px`;\n\n    this.nested[2].style.left = `${box.x}px`;\n    this.nested[2].style.width = `${box.width}px`;\n    this.nested[2].style.top = `${y2}px`;\n\n    // this.nested[3].style.top = `${box.y}px`;\n    // this.nested[3].style.height = `${box.height + 0.002}px`;\n    this.nested[3].style.width = `${box.x}px`;\n  }\n}\n","/**\n * NewSelection component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { TrueCropperCoreCallbackEventFunction } from \"../types\";\n\nexport default class NewSelection {\n  private eventBus: TrueCropperCoreCallbackEventFunction;\n  private el: HTMLDivElement;\n  private startMouse = { mouseX: 0, mouseY: 0 };\n  private newBoxCreated: boolean = false;\n  private listener?: (e: MouseEvent) => void;\n  /**\n   * Creates a new NewSelection instance.\n   * @constructor\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    this.el = createDiv(className, parent);\n    if (enable) {\n      // Attach initial listener\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n      this.mouseEvent();\n    } else {\n      this.hide();\n    }\n  }\n\n  public hide() {\n    this.el.style.display = \"none\";\n  }\n\n  public show() {\n    this.el.style.display = \"block\";\n  }\n\n  public destroy() {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Save start mouse coordinates\n      this.startMouse = { mouseX: e.clientX, mouseY: e.clientY };\n      this.newBoxCreated = false;\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (this.newBoxCreated) {\n        // Notify parent\n        const data = { x: e.clientX, y: e.clientY };\n        this.eventBus({ type: \"handlemove\", data });\n      } else {\n        this.tryToCreateNewBox(e.clientX, e.clientY);\n      }\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      if (this.newBoxCreated) {\n        this.eventBus({ type: \"handleend\" });\n      }\n    };\n\n    return onMouseDown;\n  }\n\n  private tryToCreateNewBox(mouseX: number, mouseY: number) {\n    if (\n      mouseX === this.startMouse.mouseX ||\n      mouseY === this.startMouse.mouseY\n    ) {\n      return;\n    }\n\n    const leftMovable = mouseX < this.startMouse.mouseX;\n    const topMovable = mouseY < this.startMouse.mouseY;\n    const [x, width] = leftMovable\n      ? [mouseX, this.startMouse.mouseX - mouseX]\n      : [this.startMouse.mouseX, mouseX - this.startMouse.mouseX];\n    const [y, height] = topMovable\n      ? [mouseY, this.startMouse.mouseY - mouseY]\n      : [this.startMouse.mouseY, mouseY - this.startMouse.mouseY];\n    // Notify parent\n    const data = {\n      coordinates: { x, y },\n      size: { width, height },\n      leftMovable,\n      topMovable,\n    };\n    this.newBoxCreated = this.eventBus({ type: \"createnewbox\", data });\n  }\n}\n","/**\n * Selection component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps, TrueCropperCoreCallbackEventFunction } from \"../types\";\n\nexport default class Selection {\n  private eventBus: TrueCropperCoreCallbackEventFunction;\n  private el: HTMLDivElement;\n  private enable: boolean;\n  private listener?: (e: MouseEvent) => void;\n\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n  ) {\n    this.eventBus = eventBus;\n    // Create DOM element\n    this.el = createDiv(className, parent);\n\n    this.enable = enable;\n    if (enable) {\n      // Attach initial listener\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.el.style.cursor = \"default\";\n    }\n  }\n\n  public transform(box: BoxProps) {\n    // Calculate handle position\n    this.el.style.transform = `translate(${box.x}px, ${box.y}px)`;\n    this.el.style.width = `${box.width}px`;\n    this.el.style.height = `${box.height}px`;\n  }\n\n  public hide() {\n    this.el.style.display = \"none\";\n    this.el.style.cursor = \"default\";\n  }\n\n  public show() {\n    this.el.style.display = \"block\";\n    this.el.style.cursor = \"move\";\n  }\n\n  public destroy() {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  /**\n   * Attach event listeners for the crop selection element.\n   * Enables dragging/moving of the selection element.\n   */\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionstart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionmove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"regionend\", data });\n    };\n\n    return onMouseDown;\n  }\n}\n","import TrueCropperCore from \"./trueCropper\";\n\nexport type InitQuerySelectorOrHtmlElementType = HTMLImageElement | string;\n\nexport const SIZE_UNIT = [\"real\", \"relative\", \"percent\"] as const;\nexport type SizeUnit = (typeof SIZE_UNIT)[number];\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\nexport interface Points {\n  x: number; // 1 move to left, 0 move to right, 0.5 move from center\n  y: number; // 1 move to top, 0 move to bottom, 0.5 move from center\n}\nexport interface Size {\n  width: number;\n  height: number;\n}\nexport interface UnitProps {\n  unit: SizeUnit;\n}\nexport interface BoxProps extends Coordinates, Size {}\nexport interface SizeWithUnit extends Size, UnitProps {}\n\nexport interface StartSizeProps extends Coordinates, Partial<Size>, UnitProps {}\nexport interface StartSize extends Coordinates, Size, UnitProps {\n  centeredX: boolean;\n  centeredY: boolean;\n  allowChange: boolean;\n}\n\nexport type CallbackType<T, K> = (klass: T, values: K) => void;\nexport type CallbackOnCrop = CallbackType<TrueCropperCore, BoxProps>;\nexport interface ImageError {\n  target: string;\n  source: string;\n  targetSize: Size;\n  sourceSize: Size;\n}\nexport interface CallbackError {\n  type: string;\n  message: string;\n  data: null | ImageError;\n}\nexport type CallbackOnError = CallbackType<TrueCropperCore, CallbackError>;\n\nexport interface OptionsPropsValuesType {\n  aspectRatio: number;\n  maxSize: Partial<SizeWithUnit>;\n  minSize: Partial<SizeWithUnit>;\n  startSize: Partial<StartSizeProps>;\n  defaultSize: Partial<StartSizeProps>;\n  returnMode: SizeUnit;\n  allowFlip: boolean;\n  allowNewSelection: boolean;\n  allowMove: boolean;\n  allowResize: boolean;\n  onInitialize: CallbackOnCrop;\n  onCropStart: CallbackOnCrop;\n  onCropMove: CallbackOnCrop;\n  onCropEnd: CallbackOnCrop;\n  onError: CallbackOnError;\n}\n\nexport interface TrueCropperCoreHandleStartEvent {\n  type: \"handlestart\";\n  data: ActiveHandleType;\n}\n\nexport interface TrueCropperCoreHandleMoveEvent {\n  type: \"handlemove\";\n  data: Coordinates;\n}\n\nexport interface TrueCropperCoreHandleEndEvent {\n  type: \"handleend\";\n  data?: null;\n}\n\nexport interface TrueCropperCoreRegionMoveEvent {\n  type: \"regionstart\" | \"regionmove\" | \"regionend\";\n  data: Coordinates;\n}\n\nexport interface CreateNewBoxTypeEvent {\n  coordinates: Coordinates;\n  size: Size;\n  leftMovable: boolean;\n  topMovable: boolean;\n}\n\nexport interface TrueCropperCoreCreateNewBoxEvent {\n  type: \"createnewbox\";\n  data: CreateNewBoxTypeEvent;\n}\n\nexport interface ActiveHandleDataType {\n  left: boolean;\n  savedCoordinate: number;\n}\nexport interface ActiveHandleType {\n  points: Points;\n}\n\nexport type TrueCropperCoreCallbackEvent =\n  | TrueCropperCoreHandleStartEvent\n  | TrueCropperCoreHandleMoveEvent\n  | TrueCropperCoreHandleEndEvent\n  | TrueCropperCoreRegionMoveEvent\n  | TrueCropperCoreCreateNewBoxEvent;\nexport type TrueCropperCoreCallbackEventFunction = ({\n  type,\n  data,\n}: TrueCropperCoreCallbackEvent) => boolean;\n\nexport enum Status {\n  \"waiting\" = \"waiting\",\n  \"ready\" = \"ready\",\n  \"reloading\" = \"reloading\",\n  \"error\" = \"error\",\n}\n\nexport interface Icallback {\n  onInitialize?: CallbackOnCrop;\n  onCropStart?: CallbackOnCrop;\n  onCropMove?: CallbackOnCrop;\n  onCropEnd?: CallbackOnCrop;\n  onError?: CallbackOnError;\n}\n\nexport interface ContainerToMaxMinSize {\n  size: Size;\n  minSize?: Size;\n  maxSize?: Size;\n  aspectRatio: number;\n}\n\nexport interface IimageErrorData {\n  target: string;\n  coordinates?: Coordinates;\n  targetSize: Size;\n  source: string;\n  sourceSize: Size;\n}\n\nexport interface Idd {\n  coordinates: { x: number | null; y: number | null };\n  size: { width: number | null; height: number | null };\n  points: Points;\n}\nexport interface Idd2 {\n  coordinates: Coordinates;\n  size: Size;\n  points: Points;\n  isVerticalMovement: boolean;\n  isMultuAxis: boolean;\n}\n/**\n * Represents the initialization interface for Box.\n * @interface\n */\nexport interface BoxInitInterface {\n  coordinates: Coordinates;\n  size: Size;\n  minSize: Size;\n  maxSize: Size;\n  imgProps: Size;\n  aspectRatio: number;\n}\n","/**\n * Parse user options\n */\n\n// Tolerance value for floating-point comparison\nconst EPSILON = 0.0001;\n\nimport { TrueCropperOptionsError } from \"./errors\";\nimport { OptionsPropsValuesType, SIZE_UNIT, SizeUnit } from \"./types\";\n\nconst PREFIX = \"cropper\" as const;\n\n/**\n * Capitalizes the first letter of a string.\n * @param {string} str - The input string.\n * @returns {string} The input string with the first letter capitalized.\n */\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Checks if a value is undefined or null.\n * @param {unknown} val - The value to check.\n * @returns {boolean} True if the value is undefined or null, false otherwise.\n */\nfunction isNil(val: unknown) {\n  return val === undefined || val === null;\n}\n\n/**\n * Checks if a value is a valid number.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {number} defaultValue - The default value to return if val is null or undefined.\n * @param {boolean} [allowZero=false] - Whether to allow zero as a valid number.\n * @returns {number} The valid number or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a number, is NaN, or is not positive.\n */\nfunction isNumber(\n  name: string,\n  val: unknown,\n  defaultValue: number,\n  allowZero: boolean = false,\n) {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"number\") {\n    throw TrueCropperOptionsError.new(name, \"number\");\n  }\n  if (Number.isNaN(val)) {\n    throw TrueCropperOptionsError.new(name, \"NaN\", false);\n  }\n  if (allowZero ? val < 0 : val <= 0) {\n    throw TrueCropperOptionsError.new(name, \"positive\");\n  }\n\n  return val;\n}\n\n/**\n * Checks if a value is a valid boolean.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {boolean} defaultVal - The default value to return if val is null or undefined.\n * @returns {boolean} The valid boolean or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a boolean.\n */\nfunction isBoolean(name: string, val: unknown, defaultVal: boolean) {\n  if (isNil(val)) {\n    return defaultVal;\n  }\n  if (typeof val !== \"boolean\") {\n    throw TrueCropperOptionsError.new(name, \"boolean\");\n  }\n  return val;\n}\n\n/**\n * Checks if a value is a valid SizeUnit.\n * @param {string} name - The name of the value being checked.\n * @param {unknown} val - The value to check.\n * @param {SizeUnit} defaultValue - The default value to return if val is null or undefined.\n * @returns {SizeUnit} The valid SizeUnit or the default value.\n * @throws {TrueCropperOptionsError} if the value is not a valid SizeUnit.\n */\nfunction isSizeUnit(\n  name: string,\n  val: unknown,\n  defaultValue: SizeUnit,\n): SizeUnit {\n  if (isNil(val)) {\n    return defaultValue;\n  }\n  if (typeof val !== \"string\" || !SIZE_UNIT.includes(val as SizeUnit)) {\n    throw TrueCropperOptionsError.new(name, \"SizeUnit\");\n  }\n  return val as SizeUnit;\n}\n\n/**\n * Parses the options for the TrueCropper instance.\n * @param {DOMStringMap} dataset - The dataset of the TrueCropper container element.\n * @param {Partial<OptionsPropsValuesType> | undefined} options - The options object passed to the TrueCropper constructor.\n * @returns {OptionsPropsValuesType} The parsed options object.\n * @throws {TrueCropperOptionsError} if the options object is not of type 'object'.\n */\nexport const parseOptions = (\n  dataset: DOMStringMap,\n  options: Partial<OptionsPropsValuesType> | undefined,\n) => {\n  const opts = options || {};\n  if (typeof opts !== \"object\" || opts === null) {\n    throw TrueCropperOptionsError.new(\"options\", \"object\");\n  }\n\n  /**\n   * Retrieves the value for a specific option from the dataset.\n   * @param {string} name - The name of the option.\n   * @param {unknown} val - The value for the options.\n   * @returns {unknown} The parsed value for the options.\n   */\n  const getValue = (name: string, val: unknown) => {\n    // Get the raw value from the dataset\n    const value = dataset[`${PREFIX}${capitalizeFirstLetter(name)}`];\n\n    // If the value is null or undefined, return val\n    if (!value) {\n      return val;\n    }\n\n    const lower = value.toLowerCase();\n    if (lower === \"null\" || lower === \"undefined\" || lower === \"nil\") {\n      return val;\n    }\n\n    // If the value can be parsed as a number, return it as a number\n    const numberValue = Number.parseFloat(value);\n    if (numberValue.toString() === value) {\n      return numberValue;\n    }\n\n    // If the value is \"true\" (case-insensitive), return true\n    if (lower === \"true\") {\n      return true;\n    }\n\n    // If the value is \"false\" (case-insensitive), return false\n    if (lower === \"false\") {\n      return false;\n    }\n\n    // Otherwise, return the value as-is\n    return value;\n  };\n\n  return {\n    aspectRatio: getValue(\"aspectRatio\", opts.aspectRatio),\n    allowFlip: getValue(\"allowFlip\", opts.allowFlip),\n    allowNewSelection: getValue(\"allowNewSelection\", opts.allowNewSelection),\n    allowMove: getValue(\"allowMove\", opts.allowMove),\n    allowResize: getValue(\"allowResize\", opts.allowResize),\n    returnMode: getValue(\"returnMode\", opts.returnMode),\n    minSize: {\n      width: getValue(\"minSizeWidth\", opts.minSize?.width),\n      height: getValue(\"minSizeHeight\", opts.minSize?.height),\n      unit: getValue(\"minSizeUnit\", opts.minSize?.unit),\n    },\n    maxSize: {\n      width: getValue(\"maxSizeWidth\", opts.maxSize?.width),\n      height: getValue(\"maxSizeHeight\", opts.maxSize?.height),\n      unit: getValue(\"maxSizeUnit\", opts.maxSize?.unit),\n    },\n    startSize: {\n      x: getValue(\"startSizeX\", opts.startSize?.x),\n      y: getValue(\"startSizeY\", opts.startSize?.y),\n      width: getValue(\"startSizeWidth\", opts.startSize?.width),\n      height: getValue(\"startSizeHeight\", opts.startSize?.height),\n      unit: getValue(\"startSizeUnit\", opts.startSize?.unit),\n    },\n    defaultSize: {\n      x: getValue(\"defaultSizeX\", opts.defaultSize?.x),\n      y: getValue(\"defaultSizeY\", opts.defaultSize?.y),\n      width: getValue(\"defaultSizeWidth\", opts.defaultSize?.width),\n      height: getValue(\"defaultSizeHeight\", opts.defaultSize?.height),\n      unit: getValue(\"defaultSizeUnit\", opts.defaultSize?.unit),\n    },\n  };\n};\n\n/**\n * Checks if two numbers are approximately equal within a tolerance.\n * @param {number} a - First number.\n * @param {number} b - Second number.\n * @param {number} epsilon - Tolerance value for floating-point comparison.\n * @returns {boolean} True if the numbers are approximately equal, false otherwise.\n */\nconst checkAspectRatio = (a: number, b: number, epsilon: number) =>\n  Math.abs(a - b) < epsilon;\n\n/**\n * Prepares the options for the TrueCropper instance.\n * @param {ReturnType<typeof parseOptions>} options - The parsed options object.\n * @returns {PreparedOptions} The prepared options object.\n * @throws {TrueCropperOptionsError} if there are issues with the options.\n */\nexport const prepareOptions = (options: ReturnType<typeof parseOptions>) => {\n  const aspectRatio = isNumber(\"aspectRatio\", options.aspectRatio, 0);\n  const minSize = {\n    width: isNumber(\"minSizeWidth\", options.minSize.width, 0),\n    height: isNumber(\"minSizeHeight\", options.minSize.height, 0),\n    unit: isSizeUnit(\"minSizeUnit\", options.minSize?.unit, \"real\"),\n  };\n  const maxSize = {\n    width: isNumber(\"maxSizeWidth\", options.maxSize.width, 0),\n    height: isNumber(\"maxSizeHeight\", options.maxSize.height, 0),\n    unit: isSizeUnit(\"maxSizeUnit\", options.maxSize.unit, \"real\"),\n  };\n  const firstInitSize = {\n    x: isNumber(\"startSizeX\", options.startSize.x, 0, true),\n    y: isNumber(\"startSizeY\", options.startSize.y, 0, true),\n    width: isNumber(\"startSizeWidth\", options.startSize.width, 0),\n    height: isNumber(\"startSizeHeight\", options.startSize.height, 0),\n    unit: isSizeUnit(\"startSizeUnit\", options.startSize.unit, \"real\"),\n    centeredX: isNil(options.startSize.x),\n    centeredY: isNil(options.startSize.y),\n    allowChange: false,\n  };\n  firstInitSize.allowChange =\n    firstInitSize.width === 0 && firstInitSize.height === 0;\n\n  const startSize = {\n    x: isNumber(\"defaultSizeX\", options.defaultSize.x, 0, true),\n    y: isNumber(\"defaultSizeY\", options.defaultSize.y, 0, true),\n    width: isNumber(\"defaultSizeWidth\", options.defaultSize.width, 0),\n    height: isNumber(\"defaultSizeHeight\", options.defaultSize.height, 0),\n    unit: isSizeUnit(\"defaultSizeUnit\", options.defaultSize.unit, \"real\"),\n    centeredX: isNil(options.defaultSize.x),\n    centeredY: isNil(options.defaultSize.y),\n    allowChange: false,\n  };\n  startSize.allowChange = startSize.width === 0 && startSize.height === 0;\n\n  if (aspectRatio) {\n    if (minSize.width && minSize.height) {\n      const calculatedAspectRatio = minSize.width / minSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, EPSILON)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          calculatedAspectRatio,\n          aspectRatio,\n          EPSILON,\n        );\n      }\n    }\n    // FixThis change erro message\n    if (firstInitSize.width && firstInitSize.height) {\n      const calculatedAspectRatio = firstInitSize.width / firstInitSize.height;\n      if (!checkAspectRatio(calculatedAspectRatio, aspectRatio, EPSILON)) {\n        throw TrueCropperOptionsError.aspectRatio(\n          calculatedAspectRatio,\n          aspectRatio,\n          EPSILON,\n        );\n      }\n    }\n  }\n\n  return {\n    aspectRatio,\n    allowFlip: isBoolean(\"allowFlip\", options.allowFlip, true),\n    allowNewSelection: isBoolean(\n      \"allowNewSelection\",\n      options.allowNewSelection,\n      true,\n    ),\n    allowMove: isBoolean(\"allowMove\", options.allowMove, true),\n    allowResize: isBoolean(\"allowResize\", options.allowResize, true),\n    returnMode: isSizeUnit(\"returnMode\", options.returnMode, \"real\"),\n    minSize,\n    maxSize,\n    firstInitSize,\n    startSize,\n  } as const;\n};\n","/**\n * Handle component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps, TrueCropperCoreCallbackEventFunction } from \"../types\";\nimport { HandlesType } from \"./handles\";\n\nexport default class Handle {\n  public position: { x: number; y: number };\n  private eventBus: TrueCropperCoreCallbackEventFunction;\n  public el!: HTMLDivElement;\n  private enable: boolean;\n  private listener?: (e: MouseEvent) => void;\n\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    item: HandlesType,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n  ) {\n    this.position = item.position;\n    this.eventBus = eventBus;\n    this.enable = enable;\n\n    this.el = createDiv(className, parent);\n    this.el.style.cursor = item.cursor;\n\n    if (enable) {\n      // Attach initial listener\n      this.listener = this.mouseEvent();\n      this.el.addEventListener(\"mousedown\", this.listener);\n    } else {\n      this.hide();\n    }\n  }\n\n  public show() {\n    this.el.style.display = \"block\";\n  }\n\n  public hide() {\n    this.el.style.display = \"none\";\n  }\n\n  public destroy() {\n    if (this.listener) {\n      this.el.removeEventListener(\"mousedown\", this.listener);\n    }\n    this.el.remove();\n  }\n\n  public transform(box: BoxProps) {\n    // Calculate handle position\n    const handleWidth = this.el.offsetWidth;\n    const handleHeight = this.el.offsetHeight;\n    const left = box.x + box.width * this.position.x - handleWidth / 2;\n    const top = box.y + box.height * this.position.y - handleHeight / 2;\n\n    this.el.style.transform = `translate(${left}px, ${top}px)`;\n  }\n\n  public getData() {\n    return {\n      points: { ...this.position },\n    };\n  }\n\n  private mouseEvent() {\n    const onMouseDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      if (!this.enable) {\n        return;\n      }\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      const data = this.getData();\n      this.eventBus({ type: \"handlestart\", data });\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      e.stopPropagation();\n\n      // Notify parent\n      const data = { x: e.clientX, y: e.clientY };\n      this.eventBus({ type: \"handlemove\", data });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      e.stopPropagation();\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n\n      // Notify parent\n      this.eventBus({ type: \"handleend\" });\n    };\n\n    return onMouseDown;\n  }\n}\n","/**\n * Handle component\n */\n\nimport { createDiv } from \"../helpers\";\nimport { BoxProps, TrueCropperCoreCallbackEventFunction } from \"../types\";\nimport Handle from \"./handle\";\n\n/**\n * Define a list of handles to create.\n *\n * @property {Array} position - The x and y ratio position of the handle within\n *      the crop region. Accepts a value between 0 to 1 in the order of [X, Y].\n * @property {String} cursor - The CSS cursor of this handle.\n */\nconst HANDLES = [\n  { position: { x: 0, y: 0 }, cursor: \"nw-resize\" },\n  { position: { x: 0.5, y: 0 }, cursor: \"n-resize\" },\n  { position: { x: 1, y: 0 }, cursor: \"ne-resize\" },\n  { position: { x: 1, y: 0.5 }, cursor: \"e-resize\" },\n  { position: { x: 1, y: 1 }, cursor: \"se-resize\" },\n  { position: { x: 0.5, y: 1 }, cursor: \"s-resize\" },\n  { position: { x: 0, y: 1 }, cursor: \"sw-resize\" },\n  { position: { x: 0, y: 0.5 }, cursor: \"w-resize\" },\n] as const;\n\nexport type HandlesType = (typeof HANDLES)[number];\n\nexport default class Handles {\n  private el: HTMLDivElement;\n  private handles: Handle[] = [];\n  /**\n   * Creates a new Handle instance.\n   */\n  public constructor(\n    parent: HTMLDivElement,\n    className: string,\n    eventBus: TrueCropperCoreCallbackEventFunction,\n    enable: boolean,\n    handleClassName: string,\n  ) {\n    this.el = createDiv(className, parent);\n    for (const item of HANDLES) {\n      const handle = new Handle(\n        this.el,\n        handleClassName,\n        item,\n        eventBus,\n        enable,\n      );\n      this.handles.push(handle);\n    }\n  }\n\n  public hide() {\n    for (const handle of this.handles) {\n      handle.hide();\n    }\n  }\n\n  public show() {\n    for (const handle of this.handles) {\n      handle.show();\n    }\n  }\n\n  public destroy() {\n    for (const handle of this.handles) {\n      handle.destroy();\n    }\n    this.el.remove();\n  }\n\n  public transform(box: BoxProps) {\n    for (const handle of this.handles) {\n      handle.transform(box);\n    }\n  }\n\n  public handleByMovableType(leftMovable: boolean, topMovable: boolean) {\n    if (leftMovable) {\n      return topMovable ? this.handles[0] : this.handles[6];\n    } else {\n      return topMovable ? this.handles[2] : this.handles[4];\n    }\n  }\n}\n","/**\n * Here lies the main logic.\n */\n\nimport Box from \"./box\";\nimport enableTouch from \"./touch\";\nimport Background from \"./HTMLelements/background\";\nimport NewSelection from \"./HTMLelements/newSelection\";\nimport Selection from \"./HTMLelements/selection\";\nimport { calculatePointsBasedOnMouse, getHTMLelements } from \"./helpers\";\nimport {\n  BoxProps,\n  Coordinates,\n  TrueCropperCoreCallbackEvent,\n  TrueCropperCoreCreateNewBoxEvent,\n  TrueCropperCoreHandleMoveEvent,\n  TrueCropperCoreHandleStartEvent,\n  TrueCropperCoreRegionMoveEvent,\n  Icallback,\n  OptionsPropsValuesType,\n  Points,\n  Size,\n  SizeUnit,\n  Status,\n} from \"./types\";\nimport { parseOptions, prepareOptions } from \"./options\";\nimport {\n  TrueCropperHtmlError,\n  TrueCropperOptionsError,\n  TrueCropperImageError,\n} from \"./errors\";\nimport Handles from \"./HTMLelements/handles\";\nimport { CONSTANTS } from \"./constant\";\nimport {\n  convertToRealPx,\n  processingInitialProps,\n  validateImageSizes,\n} from \"./helpers\";\n\n/**\n * Core class for TrueCropper containing most of its functional logic.\n */\nconst defaultSize = { width: 1, height: 1 };\nexport default class TrueCropper {\n  private replaceDOM = false;\n  private htmlContainer!: HTMLDivElement;\n  private htmlImg!: HTMLImageElement;\n\n  private options!: ReturnType<typeof prepareOptions>;\n  private newSelection!: NewSelection;\n  private selection!: Selection;\n  private handles!: Handles;\n  private background!: Background;\n\n  private box!: Box;\n\n  private currentMove!: { offsetX: number; offsetY: number };\n  private activeHandle!: {\n    x: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n    y: {\n      left: boolean;\n      savedCoordinate: number;\n    };\n  };\n\n  private real = defaultSize;\n  private relative = defaultSize;\n  private ratio = defaultSize;\n  private firstInit = true;\n  private isDomCreated = false;\n  public status = Status.waiting;\n  public eventBus = this.event.bind(this);\n  private observer!: ResizeObserver;\n\n  private callbacks: Icallback = {\n    onInitialize: undefined,\n    onCropStart: undefined,\n    onCropMove: undefined,\n    onCropEnd: undefined,\n    onError: undefined,\n  };\n\n  public constructor(\n    element: HTMLImageElement | string,\n    optionsProps?: Partial<OptionsPropsValuesType>,\n  ) {\n    try {\n      this.parseCallbackFunctions(optionsProps);\n      const [img, container] = getHTMLelements(element);\n      this.htmlImg = img;\n      if (container) {\n        this.htmlContainer = container;\n      } else {\n        this.replaceDOM = true;\n      }\n      this.changeStatus(Status.waiting);\n\n      // Parse options\n      const rawOptionsData = parseOptions(this.htmlImg.dataset, optionsProps);\n      this.options = prepareOptions(rawOptionsData);\n\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  public getImagePreview() {\n    if (this.status !== \"ready\") {\n      return;\n    }\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"crossorigin\", \"anonymous\");\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      return;\n    }\n    const val = this.getValue(\"real\");\n    canvas.width = val.width;\n    canvas.height = val.height;\n    ctx.drawImage(\n      this.htmlImg,\n      val.x,\n      val.y,\n      val.width,\n      val.height,\n      0,\n      0,\n      val.width,\n      val.height,\n    );\n\n    return canvas;\n  }\n\n  /**\n   * Changes the image src.\n   * @param {String} src\n   */\n  public setImage(src: string) {\n    if (src && src.length !== 0) {\n      this.firstInit = false;\n      this.htmlImg.src = src;\n    }\n  }\n\n  /**\n   * Resets the crop region to the initial settings.\n   */\n  public reset() {\n    try {\n      this.firstInit = false;\n      this.destroy();\n      this.initializeCropper();\n    } catch (error) {\n      if (\n        error instanceof TrueCropperHtmlError ||\n        error instanceof TrueCropperOptionsError ||\n        error instanceof TrueCropperImageError\n      ) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Destroy the TrueCropper instance and replace with the original element.\n   */\n  public destroy() {\n    if (this.isDomCreated) {\n      this.observer.unobserve(this.htmlImg);\n      this.newSelection.destroy();\n      this.handles.destroy();\n      this.selection.destroy();\n      this.background.destroy();\n      if (this.replaceDOM) {\n        if (this.htmlContainer.parentElement) {\n          this.htmlContainer.parentElement.replaceChild(\n            this.htmlImg,\n            this.htmlContainer,\n          );\n        }\n      }\n    }\n    this.isDomCreated = false;\n  }\n\n  /**\n   * Moves the crop region to a specified coordinate.\n   * @param {Coordinates} coordinates\n   */\n  public moveTo(coordinates: Coordinates) {\n    this.box.move(coordinates);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Resizes the crop region to a specified width and height.\n   * @param {Size} size\n   * @param {Points} points\n   */\n  public resizeTo(size: Size, points: Points = { x: 0.5, y: 0.5 }) {\n    this.box.resize(size, points);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Scale the crop region by a factor.\n   * @param {Number} factor\n   * @param {Points} points\n   */\n  public scaleBy(factor: number, points: Points = { x: 0.5, y: 0.5 }) {\n    this.box.scale(factor, points);\n    this.redraw();\n\n    // Call the callback\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Get the value of the crop region.\n   * @param {SizeUnit | undefined} mode - The mode of return value type. If null, defaults to the return mode set in returnMode options.\n   * @returns {number} - The value of the crop region.\n   */\n  public getValue(mode: SizeUnit | undefined = undefined) {\n    const calculationMode = mode || this.options.returnMode;\n\n    const notRoundedValues = () => {\n      if (calculationMode === \"relative\") {\n        return this.box.getValueRelative(this.ratio);\n      }\n      if (calculationMode === \"percent\") {\n        return this.box.getValuePercent();\n      }\n\n      return this.box.getValueReal();\n    };\n\n    const values = notRoundedValues();\n    return {\n      x: Math.round(values.x),\n      y: Math.round(values.y),\n      width: Math.round(values.width),\n      height: Math.round(values.height),\n    };\n  }\n\n  /**\n   * Retrieves the image properties.\n   * @returns {real: Size, relative: Size} An object containing the real and relative properties.\n   * @public\n   */\n  public getImageProps() {\n    return { real: this.real, relative: this.relative };\n  }\n\n  /**\n   * Handles the callback when after initialization.\n   */\n  protected onInitializeCallback() {\n    if (this.callbacks.onInitialize) {\n      this.callbacks.onInitialize(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping starts.\n   */\n  protected onCropStartCallback() {\n    if (this.callbacks.onCropStart) {\n      this.callbacks.onCropStart(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping is in progress.\n   */\n  protected onCropMoveCallback() {\n    if (this.callbacks.onCropMove) {\n      this.callbacks.onCropMove(this, this.getValue());\n    }\n  }\n\n  /**\n   * Handles the callback when cropping ends.\n   */\n  protected onCropEndCallback() {\n    const val = this.getValue();\n    // Set dataset properties for cropping dimensions\n    this.setDatasetCropValues(val);\n\n    if (this.callbacks.onCropEnd) {\n      this.callbacks.onCropEnd(this, val);\n    }\n  }\n\n  /**\n   * Handles errors encountered during operations.\n   * @param {TrueCropperHtmlError | TrueCropperImageError | TrueCropperOptionsError} error - The error object containing information about the error.\n   */\n  protected onErrorCallback(\n    error:\n      | TrueCropperHtmlError\n      | TrueCropperImageError\n      | TrueCropperOptionsError,\n  ) {\n    // Change dataset properties status to error\n    this.changeStatus(Status.error);\n    const value = {\n      type: error.name,\n      message: error.message,\n      data: error.data,\n    };\n    // Destroy instance\n    this.destroy();\n    // If onError callback is provided, invoke it with the error object; otherwise, throw the error\n    if (this.callbacks.onError) {\n      this.callbacks.onError(this, value);\n    } else {\n      throw error;\n    }\n  }\n\n  /** ==============\n   *\n   *\n   *  Private methods\n   *\n   *\n   * ==============\n   */\n\n  private initializeObserver() {\n    this.observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        const target = entry.target as HTMLImageElement;\n        if (target === this.htmlImg && target.complete && target.width !== 0) {\n          this.updateRelativeSize();\n          this.redraw();\n        }\n      }\n    });\n  }\n\n  private initializeCropper() {\n    this.initializeObserver();\n    // Wait until image is loaded before proceeding\n    if (this.htmlImg.width !== 0 && this.htmlImg.height !== 0) {\n      this.initialize();\n    }\n\n    this.htmlImg.onload = () => {\n      this.changeStatus(\n        this.status === Status.waiting ? Status.waiting : Status.reloading,\n      );\n      this.observer.unobserve(this.htmlImg);\n      this.initialize();\n    };\n  }\n  private initialize() {\n    try {\n      this.createDOM();\n      this.calcContainerProps();\n      this.updateRelativeSize();\n      this.createNewBox();\n      this.onInitializeCallback();\n      this.observer.observe(this.htmlImg);\n      this.changeStatus(Status.ready);\n      this.onCropEndCallback();\n    } catch (error) {\n      if (error instanceof TrueCropperImageError) {\n        this.onErrorCallback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private createDOM() {\n    if (this.isDomCreated) {\n      return;\n    }\n\n    if (this.replaceDOM) {\n      this.htmlContainer = document.createElement(\"div\");\n      this.htmlContainer.classList.add(CONSTANTS.base);\n      if (this.htmlImg.parentElement) {\n        this.htmlImg.parentElement.replaceChild(\n          this.htmlContainer,\n          this.htmlImg,\n        );\n      }\n      this.htmlContainer.appendChild(this.htmlImg);\n    }\n    const base = this.htmlContainer;\n    enableTouch(base);\n\n    this.htmlImg.classList.add(CONSTANTS.img);\n    this.background = new Background(base, CONSTANTS.background);\n    this.newSelection = new NewSelection(\n      base,\n      CONSTANTS.new,\n      this.eventBus,\n      this.options.allowNewSelection,\n    );\n    this.selection = new Selection(\n      base,\n      CONSTANTS.selection,\n      this.eventBus,\n      this.options.allowMove,\n    );\n    this.handles = new Handles(\n      base,\n      CONSTANTS.hanleds,\n      this.eventBus,\n      this.options.allowResize,\n      CONSTANTS.handle,\n    );\n    this.isDomCreated = true;\n  }\n\n  private calcContainerProps() {\n    this.real = {\n      width: this.htmlImg.naturalWidth,\n      height: this.htmlImg.naturalHeight,\n    };\n  }\n\n  protected createNewBox() {\n    let startSizeProps = this.options.startSize;\n    if (this.firstInit) {\n      this.firstInit = false;\n      startSizeProps = this.options.firstInitSize;\n    }\n\n    const centered = {\n      x: startSizeProps.centeredX,\n      y: startSizeProps.centeredX,\n    };\n    const allowChange = startSizeProps.allowChange;\n    const realData = convertToRealPx(\n      startSizeProps,\n      this.options.minSize,\n      this.options.maxSize,\n      this.real,\n      this.ratio,\n    );\n    const props = processingInitialProps(\n      realData,\n      this.real,\n      this.options.aspectRatio,\n      allowChange,\n      centered,\n    );\n\n    validateImageSizes(props);\n\n    this.box = new Box(props);\n  }\n\n  private updateRelativeSize() {\n    const { width, height } = this.htmlImg.getBoundingClientRect();\n    if (this.htmlImg.offsetWidth === 0 || this.htmlImg.offsetHeight === 0) {\n      this.relative = { width: this.real.width, height: this.real.height };\n    } else {\n      this.relative = { width, height };\n    }\n\n    this.ratio = {\n      width: this.relative.width / this.real.width,\n      height: this.relative.height / this.real.height,\n    };\n  }\n\n  private changeStatus(status: Status) {\n    this.status = status;\n    if (this.htmlImg) {\n      this.setDataset(CONSTANTS.valueStatus, status);\n    }\n  }\n\n  /**\n   * Draw visuals (border, handles, etc) for the current box.\n   */\n  private redraw() {\n    const box = this.box.getValueRelative(this.ratio);\n\n    this.selection.transform(box);\n    this.background.transform(box);\n    this.handles.transform(box);\n  }\n\n  private event({ type, data }: TrueCropperCoreCallbackEvent) {\n    switch (type) {\n      case \"handlestart\":\n        this.onHandleMoveStart(data);\n        break;\n      case \"handlemove\":\n        this.onHandleMoveMoving(data);\n        break;\n      case \"handleend\":\n        this.onHandleMoveEnd();\n        break;\n      case \"regionstart\":\n        this.onRegionMoveStart(data);\n        break;\n      case \"regionmove\":\n        this.onRegionMoveMoving(data);\n        break;\n      case \"regionend\":\n        this.onRegionMoveEnd();\n        break;\n      case \"createnewbox\":\n        return this.tryToCreateNewBox(data);\n    }\n    return true;\n  }\n\n  private tryToCreateNewBox({\n    coordinates,\n    size,\n    leftMovable,\n    topMovable,\n  }: TrueCropperCoreCreateNewBoxEvent[\"data\"]) {\n    // Get handle data based on movable types\n    const handleData = this.handles\n      .handleByMovableType(leftMovable, topMovable)\n      .getData();\n\n    // Calculate new mouse coordinates\n    const boxCoordinates = this.mouseCoordinates(coordinates);\n\n    // Define movement coordinates for x and y axes\n    const newBox = {\n      coordinates: boxCoordinates,\n      size,\n      points: handleData.points,\n    };\n\n    // Move the box using the calculated movement, and if unsuccessful, return false\n    if (!this.box.prepareAndApplyNewSizeAndCoordinates(newBox)) {\n      return false;\n    }\n\n    // Redraw the box\n    this.redraw();\n\n    // Trigger handle move start event\n    this.onHandleMoveStart(handleData);\n\n    // Return true to indicate successful box creation\n    return true;\n  }\n\n  /**\n   * Executes when user begins dragging a handle.\n   */\n  private onHandleMoveStart(data: TrueCropperCoreHandleStartEvent[\"data\"]) {\n    const { x, y } = this.box.getOppositeCornerCoordinates(data.points);\n    this.activeHandle = {\n      x: {\n        left: data.points.x === 0,\n        savedCoordinate: x,\n      },\n      y: {\n        left: data.points.y === 0,\n        savedCoordinate: y,\n      },\n    };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes on handle move. Main logic to manage the movement of handles.\n   */\n  private onHandleMoveMoving(absMouse: TrueCropperCoreHandleMoveEvent[\"data\"]) {\n    // Calculate mouse's position in relative to the container\n    const coordinates = this.mouseCoordinates(absMouse);\n\n    // получаем левый угол и длину\n    // point == 1 значит мы меняем левый угол\n    // point == 0 значит мы меняем правый угол\n    // point == 0.5 значит мы меняем и левый и правый угол (относительно центра).\n    // в этом случае значение x == null (берем из текещего box)\n    const newBox = calculatePointsBasedOnMouse(\n      coordinates,\n      this.activeHandle.x,\n      this.activeHandle.y,\n    );\n    // const aY = calculatePointBasedOnMouse(mouseY, this.activeHandle.y);\n\n    // Disable flipped crop\n    if (!this.options.allowFlip && (newBox.flipped.x || newBox.flipped.y)) {\n      return;\n    }\n\n    if (this.box.prepareAndApplyNewSizeAndCoordinates(newBox.newBox)) {\n      this.redraw();\n    }\n\n    // Trigger callback\n    this.onCropMoveCallback();\n  }\n  /**\n   *  Executes when the handle move ends.\n   */\n  private onHandleMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Executes when user starts moving the crop region.\n   * @param {TrueCropperCoreRegionMoveEvent[\"data\"]} data - contains the raw mouseX, mouseY coordinate\n   */\n  private onRegionMoveStart(absMouse: TrueCropperCoreRegionMoveEvent[\"data\"]) {\n    const { x, y } = this.mouseCoordinates(absMouse);\n    const box = this.box.getCoourdinates();\n\n    this.currentMove = { offsetX: x - box.x, offsetY: y - box.y };\n\n    // Trigger callback\n    this.onCropStartCallback();\n  }\n\n  /**\n   * Executes when user moves the crop region.\n   */\n  private onRegionMoveMoving(absMouse: TrueCropperCoreRegionMoveEvent[\"data\"]) {\n    const { offsetX, offsetY } = this.currentMove;\n\n    // Calculate mouse's position in relative to the container\n    const { x, y } = this.mouseCoordinates(absMouse);\n    this.box.move({ x: x - offsetX, y: y - offsetY });\n\n    // Update visuals\n    this.redraw();\n\n    // Trigger callback\n    this.onCropMoveCallback();\n  }\n\n  /**\n   * Executes when user stops moving the crop region (mouse up).\n   */\n  private onRegionMoveEnd() {\n    this.onCropEndCallback();\n  }\n\n  /**\n   * Get the real(natural) mouse coordinates within the image container.\n   * @param {number} absMouseX - The absolute X coordinate of the mouse.\n   * @param {number} absMouseY - The absolute Y coordinate of the mouse.\n   * @returns {[number, number]} - The real(natural) X and Y coordinates within the image container.\n   */\n  private mouseCoordinates(absMouse: { x: number; y: number }) {\n    const container = this.htmlImg.getBoundingClientRect();\n    let x = absMouse.x - container.left;\n    let y = absMouse.y - container.top;\n    x = Math.min(Math.max(x, 0), this.relative.width) / this.ratio.width;\n    y = Math.min(Math.max(y, 0), this.relative.height) / this.ratio.height;\n    return { x, y };\n  }\n\n  /**\n   * Sets a value to a dataset attribute of an HTML image element.\n   * @param {string} name - The name of the dataset attribute.\n   * @param {string | number} value - The value to set for the dataset attribute.\n   */\n  private setDataset(name: string, value: string | number) {\n    this.htmlImg.dataset[name] = value.toString();\n  }\n\n  // to helpers\n  private parseCallbackFunctions(\n    optionsProps?: Partial<OptionsPropsValuesType>,\n  ) {\n    if (!optionsProps) {\n      return;\n    }\n    if (optionsProps.onError && typeof optionsProps.onError === \"function\") {\n      this.callbacks.onError = optionsProps.onError;\n    }\n    if (\n      optionsProps.onInitialize &&\n      typeof optionsProps.onInitialize === \"function\"\n    ) {\n      this.callbacks.onInitialize = optionsProps.onInitialize;\n    }\n    if (\n      optionsProps.onCropStart &&\n      typeof optionsProps.onCropStart === \"function\"\n    ) {\n      this.callbacks.onCropStart = optionsProps.onCropStart;\n    }\n    if (\n      optionsProps.onCropMove &&\n      typeof optionsProps.onCropMove === \"function\"\n    ) {\n      this.callbacks.onCropMove = optionsProps.onCropMove;\n    }\n    if (\n      optionsProps.onCropEnd &&\n      typeof optionsProps.onCropEnd === \"function\"\n    ) {\n      this.callbacks.onCropEnd = optionsProps.onCropEnd;\n    }\n  }\n\n  private setDatasetCropValues(value?: BoxProps) {\n    const val = value || this.getValue();\n    this.setDataset(CONSTANTS.valueX, val.x);\n    this.setDataset(CONSTANTS.valueY, val.y);\n    this.setDataset(CONSTANTS.valueWidth, val.width);\n    this.setDataset(CONSTANTS.valueHeight, val.height);\n  }\n}\n"],"names":["BASE_CLASSNAME","CONSTANTS","errorMessage","TrueCropperHtmlError","key","message","__publicField","TrueCropperImageError","data","target","coordinates","targetSize","source","sourceSize","TrueCropperOptionsError","calculatedAspectRatio","aspectRatio","epsilon","name","object","positive","getHTMLelements","element","el","parent","createDiv","className","calculatePointBasedOnMouse","mousePosition","activeHandle","isMouseLeft","flipped","coordinate","size","point","calculatePointsBasedOnMouse","mouse","handleX","handleY","aX","aY","convertToRealPx","start","min","max","real","ratio","toPx","val","type","unit","newMinSize","newMaxSize","processingInitialProps","imgProps","allowChangeStartProps","centered","minSize","adjustSizeProps","maxSize","calculateAdjustedMaxSize","tmp","adjustStartProps","validateImageSizes","checkDimensions","first","second","firstName","secondName","containerToMaxMinSize","newSize","adjustWidth","widthAdjustment","newWidth","adjustHeight","heightAdjustment","newHeight","adjustToAspectRatio","vertiacal","pointX","pointY","sizeProps","defaultVal","maxSizeProps","image","startSize","centeredX","centeredY","startSizeProps","newCoordinates","maxX","maxY","Box","points","fromX","fromY","factor","width","height","x","y","newBox","isVerticalMovement","isMultuAxis","enableTouch","simulateMouseEvent","e","event","touch","touchEventToMouseEvent","Background","div","box","x2","y2","NewSelection","eventBus","enable","onMouseDown","onMouseMove","onMouseUp","mouseX","mouseY","leftMovable","topMovable","Selection","SIZE_UNIT","Status","EPSILON","PREFIX","capitalizeFirstLetter","str","isNil","isNumber","defaultValue","allowZero","isBoolean","isSizeUnit","parseOptions","dataset","options","opts","getValue","value","lower","numberValue","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","checkAspectRatio","a","b","prepareOptions","firstInitSize","Handle","item","handleWidth","handleHeight","left","top","HANDLES","Handles","handleClassName","handle","defaultSize","TrueCropper","optionsProps","img","container","rawOptionsData","error","canvas","ctx","src","mode","calculationMode","values","entries","entry","base","allowChange","realData","props","status","handleData","absMouse","offsetX","offsetY"],"mappings":"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"}